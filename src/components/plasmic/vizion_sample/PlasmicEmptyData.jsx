// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: hMvFr8gCB8DJ
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicEmptyData.module.css"; // plasmic-import: hMvFr8gCB8DJ/css
import _3DTechnySearchingForAFileInAFoldergifObf7MPhBttos from "./images/_3DTechnySearchingForAFileInAFoldergif.gif"; // plasmic-import: obf7mPHBttos/picture

createPlasmicElementProxy;

export const PlasmicEmptyData__VariantProps = new Array("size");

export const PlasmicEmptyData__ArgProps = new Array(
  "title",
  "description",
  "image",
  "onSizeChange"
);

const $$ = {};

function PlasmicEmptyData__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          image: {
            src: _3DTechnySearchingForAFileInAFoldergifObf7MPhBttos,
            fullWidth: 800,
            fullHeight: 800,
            aspectRatio: undefined
          }
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "size",
        type: "writable",
        variableType: "variant",
        valueProp: "size",
        onChangeProp: "onSizeChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"emptyData"}
      data-plasmic-override={overrides.emptyData}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.emptyData,
        { [sty.emptyDatasize_small]: hasVariant($state, "size", "small") }
      )}
      style={{ userSelect: "none" }}
    >
      <PlasmicImg__
        data-plasmic-name={"emptyGif"}
        data-plasmic-override={overrides.emptyGif}
        alt={""}
        className={classNames(sty.emptyGif, {
          [sty.emptyGifsize_small]: hasVariant($state, "size", "small")
        })}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={hasVariant($state, "size", "small") ? "50px" : "175px"}
        loading={"eager"}
        src={args.image}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox___0D9Wk, {
          [sty.freeBoxsize_small___0D9WkjkbgX]: hasVariant(
            $state,
            "size",
            "small"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "No se encontraron Prospectos",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitlesize_small]: hasVariant($state, "size", "small")
          })
        })}
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__fIvFv, {
          [sty.freeBoxsize_small__fIvFVjkbgX]: hasVariant(
            $state,
            "size",
            "small"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents:
            "Buscamos por todos lados (en serio) y no encontramos resultados que coincidan con tu criterio de b\u00fasqueda.",
          value: args.description,
          className: classNames(sty.slotTargetDescription, {
            [sty.slotTargetDescriptionsize_small]: hasVariant(
              $state,
              "size",
              "small"
            )
          })
        })}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  emptyData: ["emptyData", "emptyGif"],
  emptyGif: ["emptyGif"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEmptyData__ArgProps,
          internalVariantPropNames: PlasmicEmptyData__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEmptyData__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "emptyData") {
    func.displayName = "PlasmicEmptyData";
  } else {
    func.displayName = `PlasmicEmptyData.${nodeName}`;
  }
  return func;
}

export const PlasmicEmptyData = Object.assign(
  // Top-level PlasmicEmptyData renders the root element
  makeNodeComponent("emptyData"),
  {
    // Helper components rendering sub-elements
    emptyGif: makeNodeComponent("emptyGif"),
    // Metadata about props expected for PlasmicEmptyData
    internalVariantProps: PlasmicEmptyData__VariantProps,
    internalArgProps: PlasmicEmptyData__ArgProps
  }
);

export default PlasmicEmptyData;
/* prettier-ignore-end */
