// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: 6pm2mgONK1uD
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv, useGlobalActions } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import Logotype from "../../Logotype"; // plasmic-import: qqkvSQ_XaOae/component
import { Card } from "inprodi-design-system"; // plasmic-import: MgI4ow5h1use/codeComponent
import { Form } from "inprodi-design-system"; // plasmic-import: fVNNuSkHtA1W/codeComponent
import { FormField } from "inprodi-design-system"; // plasmic-import: 8n4bi1KfTgdt/codeComponent
import { Input } from "inprodi-design-system"; // plasmic-import: EYGCq8UmQ7qQ/codeComponent
import { Input as Input2 } from "inprodi-design-system"; // plasmic-import: vWZPcyBEx07C/codeComponent
import { Icon } from "inprodi-design-system"; // plasmic-import: pr11DOeHp2wt/codeComponent
import { Button } from "inprodi-design-system"; // plasmic-import: Umfyv_WzKjXA/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicIniciarSesion.module.css"; // plasmic-import: 6pm2mgONK1uD/css

createPlasmicElementProxy;

export const PlasmicIniciarSesion__VariantProps = new Array();

export const PlasmicIniciarSesion__ArgProps = new Array();

const $$ = {};

function PlasmicIniciarSesion__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "mailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "mailField.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "mailField"
      },
      {
        path: "passwordField.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "passwordField"
      },
      {
        path: "loginForm.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "loginForm"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mainSection
          )}
        >
          <Logotype
            data-plasmic-name={"logotype"}
            data-plasmic-override={overrides.logotype}
            className={classNames("__wab_instance", sty.logotype)}
          />

          <Card
            data-plasmic-name={"card"}
            data-plasmic-override={overrides.card}
            className={classNames("__wab_instance", sty.card)}
            content={
              <Form
                data-plasmic-name={"loginForm"}
                data-plasmic-override={overrides.loginForm}
                className={classNames("__wab_instance", sty.loginForm)}
                content={
                  <React.Fragment>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"welcome"}
                      data-plasmic-override={overrides.welcome}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.welcome)}
                    >
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p___4MN4N
                        )}
                      >
                        {"Iniciar Sesi\u00f3n"}
                      </p>
                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p__bd3Oc
                        )}
                      >
                        {
                          "\u00a1Bienvenido de nuevo! Ingresa tu usuario y contrase\u00f1a para acceder a la plataforma"
                        }
                      </p>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"container"}
                      data-plasmic-override={overrides.container}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.container)}
                    >
                      <FormField
                        data-plasmic-name={"mailField"}
                        data-plasmic-override={overrides.mailField}
                        className={classNames("__wab_instance", sty.mailField)}
                        content={
                          <Input
                            data-plasmic-name={"mailInput"}
                            data-plasmic-override={overrides.mailInput}
                            allowClear={false}
                            className={classNames(
                              "__wab_instance",
                              sty.mailInput
                            )}
                            debounce={0}
                            disabled={false}
                            leftIcon={null}
                            onChange={generateStateOnChangeProp($state, [
                              "mailInput",
                              "value"
                            ])}
                            placeholder={"mail@tu-empresa.com"}
                            rightIcon={null}
                            size={"middle"}
                            value={generateStateValueProp($state, [
                              "mailInput",
                              "value"
                            ])}
                            variant={"outlined"}
                          />
                        }
                        error={generateStateValueProp($state, [
                          "mailField",
                          "error"
                        ])}
                        label={"Correo Electr\u00f3nico"}
                        name={"email"}
                        onErrorChange={generateStateOnChangeProp($state, [
                          "mailField",
                          "error"
                        ])}
                        ref={ref => {
                          $refs["mailField"] = ref;
                        }}
                      />

                      <FormField
                        data-plasmic-name={"passwordField"}
                        data-plasmic-override={overrides.passwordField}
                        className={classNames(
                          "__wab_instance",
                          sty.passwordField
                        )}
                        content={
                          <Input2
                            data-plasmic-name={"passwordInput"}
                            data-plasmic-override={overrides.passwordInput}
                            allowClear={false}
                            className={classNames(
                              "__wab_instance",
                              sty.passwordInput
                            )}
                            disabled={false}
                            leftIcon={null}
                            onChange={generateStateOnChangeProp($state, [
                              "passwordInput",
                              "value"
                            ])}
                            rightIcon={
                              <Icon
                                className={classNames(
                                  "__wab_instance",
                                  sty.icon___6Nroh
                                )}
                                icon={"Smiley"}
                                size={16}
                                variant={"regular"}
                              />
                            }
                            size={"middle"}
                            value={generateStateValueProp($state, [
                              "passwordInput",
                              "value"
                            ])}
                            variant={"outlined"}
                          />
                        }
                        error={generateStateValueProp($state, [
                          "passwordField",
                          "error"
                        ])}
                        label={"Contrase\u00f1a"}
                        name={"password"}
                        onErrorChange={generateStateOnChangeProp($state, [
                          "passwordField",
                          "error"
                        ])}
                        ref={ref => {
                          $refs["passwordField"] = ref;
                        }}
                      />
                    </Stack__>
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      block={true}
                      className={classNames("__wab_instance", sty.button)}
                      danger={false}
                      disabled={false}
                      ghost={false}
                      icon={
                        <Icon
                          className={classNames(
                            "__wab_instance",
                            sty.icon__zd2DR
                          )}
                          icon={"CaretRight"}
                          size={16}
                          variant={"regular"}
                        />
                      }
                      iconPosition={"end"}
                      isSubmit={true}
                      label={"Iniciar Sesi\u00f3n"}
                      loading={(() => {
                        try {
                          return (() => {
                            return $state.loginForm.loading;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      size={"medium"}
                      target={"_self"}
                      type={"primary"}
                    />
                  </React.Fragment>
                }
                loading={generateStateValueProp($state, [
                  "loginForm",
                  "loading"
                ])}
                onLoadingChange={generateStateOnChangeProp($state, [
                  "loginForm",
                  "loading"
                ])}
                onSubmit={async () => {
                  const $steps = {};
                  $steps["validateForm"] = true
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const email = $state.mailInput.value;
                              const password = $state.passwordInput.value;
                              let isValid = true;
                              if (!email) {
                                $refs.mailField.setFieldError(
                                  "Ingresa un correo electrónico"
                                );
                                isValid = false;
                              } else if (!$$.validateEmail(email)) {
                                console.log("mail no válido");
                                $refs.mailField.setFieldError(
                                  "Ingresa un correo electrónico válido"
                                );
                                isValid = false;
                              }
                              if (!password) {
                                $refs.passwordField.setFieldError(
                                  "Ingresa tu contraseña"
                                );
                              }
                              return isValid;
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["validateForm"] != null &&
                    typeof $steps["validateForm"] === "object" &&
                    typeof $steps["validateForm"].then === "function"
                  ) {
                    $steps["validateForm"] = await $steps["validateForm"];
                  }
                  $steps["loginRequest"] = (() => {
                    return $steps.validateForm;
                  })()
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "nuXvvBTSGXM93PqWnV14Lf",
                            opId: "8af121a8-005b-4509-b77f-3b74510e49ce",
                            userArgs: {
                              body: [
                                {
                                  email: $state.mailInput.value,
                                  password: $state.passwordInput.value
                                }
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: [],
                            roleId: null
                          },
                          continueOnError: true
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["loginRequest"] != null &&
                    typeof $steps["loginRequest"] === "object" &&
                    typeof $steps["loginRequest"].then === "function"
                  ) {
                    $steps["loginRequest"] = await $steps["loginRequest"];
                  }
                  $steps["loginUser"] = (() => {
                    return (
                      $steps.loginRequest?.data?.statusCode === 200 &&
                      $steps.validateForm
                    );
                  })()
                    ? (() => {
                        const actionArgs = {
                          args: [
                            (() => {
                              try {
                                return $steps.loginRequest.data?.response
                                  ?.token;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $steps.loginRequest.data?.response?.user;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["AuthGlobalContext.login"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                  if (
                    $steps["loginUser"] != null &&
                    typeof $steps["loginUser"] === "object" &&
                    typeof $steps["loginUser"].then === "function"
                  ) {
                    $steps["loginUser"] = await $steps["loginUser"];
                  }
                  $steps["navigate"] = (() => {
                    return (
                      $steps.loginRequest?.data?.statusCode === 200 &&
                      $steps.validateForm
                    );
                  })()
                    ? (() => {
                        const actionArgs = { destination: `/crm/dashboard` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            location.assign(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["navigate"] != null &&
                    typeof $steps["navigate"] === "object" &&
                    typeof $steps["navigate"].then === "function"
                  ) {
                    $steps["navigate"] = await $steps["navigate"];
                  }
                  $steps["handleError"] = (() => {
                    return (
                      ($steps.loginRequest?.data?.statusCode !== 200 ||
                        $steps.loginRequest?.statusCode !== 200) &&
                      $steps.validateForm
                    );
                  })()
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              const errorKey = $steps.loginRequest.details?.key;
                              switch (errorKey) {
                                case "user.notFound":
                                  $refs.mailField.setFieldError(
                                    "Las credenciales ingresadas son incorrectas"
                                  );
                                  break;
                                case "auth.notConfirmed":
                                  $$.showNotification("Cuenta no Verificada", {
                                    description:
                                      "La cuenta ingresada aun no ha sido verficidada. Por favor, revisa tu correo para verificar tu cuenta."
                                  });
                                  break;
                                case "auth.blocked":
                                  $$.showNotification("Cuenta Inactiva", {
                                    description:
                                      "Tu cuenta ha sido desactivada por un administrador de tu empresa."
                                  });
                                  break;
                                default:
                                  break;
                              }
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["handleError"] != null &&
                    typeof $steps["handleError"] === "object" &&
                    typeof $steps["handleError"].then === "function"
                  ) {
                    $steps["handleError"] = await $steps["handleError"];
                  }
                }}
                ref={ref => {
                  $refs["loginForm"] = ref;
                }}
              />
            }
            isLoading={false}
            padding={"26px"}
            shadow={"md"}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"registerLabel"}
            data-plasmic-override={overrides.registerLabel}
            hasGap={true}
            className={classNames(projectcss.all, sty.registerLabel)}
          >
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__k6EQb
              )}
            >
              {"\u00bfNo tienes una cuenta todav\u00eda?"}
            </p>
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              platform={"react"}
            >
              {"Obt\u00e9n tu Prueba Gratuita"}
            </PlasmicLink__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"copyright"}
            data-plasmic-override={overrides.copyright}
            hasGap={true}
            className={classNames(projectcss.all, sty.copyright)}
          >
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p___5EejP
              )}
            >
              {"Core Vizion \u00a92024"}
            </p>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p___93Nxs
              )}
            >
              {"|"}
            </p>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__daCp
              )}
            >
              {"Desarrollado con Pasi\u00f3n en M\u00e9xico"}
            </p>
          </Stack__>
        </Stack__>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  mainSection: [
    "mainSection",
    "logotype",
    "card",
    "loginForm",
    "welcome",
    "container",
    "mailField",
    "mailInput",
    "passwordField",
    "passwordInput",
    "button",
    "registerLabel",
    "link",
    "copyright"
  ],

  logotype: ["logotype"],
  card: [
    "card",
    "loginForm",
    "welcome",
    "container",
    "mailField",
    "mailInput",
    "passwordField",
    "passwordInput",
    "button"
  ],

  loginForm: [
    "loginForm",
    "welcome",
    "container",
    "mailField",
    "mailInput",
    "passwordField",
    "passwordInput",
    "button"
  ],

  welcome: ["welcome"],
  container: [
    "container",
    "mailField",
    "mailInput",
    "passwordField",
    "passwordInput"
  ],

  mailField: ["mailField", "mailInput"],
  mailInput: ["mailInput"],
  passwordField: ["passwordField", "passwordInput"],
  passwordInput: ["passwordInput"],
  button: ["button"],
  registerLabel: ["registerLabel", "link"],
  link: ["link"],
  copyright: ["copyright"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIniciarSesion__ArgProps,
          internalVariantPropNames: PlasmicIniciarSesion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIniciarSesion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicIniciarSesion";
  } else {
    func.displayName = `PlasmicIniciarSesion.${nodeName}`;
  }
  return func;
}

export const PlasmicIniciarSesion = Object.assign(
  // Top-level PlasmicIniciarSesion renders the root element
  makeNodeComponent("mainSection"),
  {
    // Helper components rendering sub-elements
    logotype: makeNodeComponent("logotype"),
    card: makeNodeComponent("card"),
    loginForm: makeNodeComponent("loginForm"),
    welcome: makeNodeComponent("welcome"),
    container: makeNodeComponent("container"),
    mailField: makeNodeComponent("mailField"),
    mailInput: makeNodeComponent("mailInput"),
    passwordField: makeNodeComponent("passwordField"),
    passwordInput: makeNodeComponent("passwordInput"),
    button: makeNodeComponent("button"),
    registerLabel: makeNodeComponent("registerLabel"),
    link: makeNodeComponent("link"),
    copyright: makeNodeComponent("copyright"),
    // Metadata about props expected for PlasmicIniciarSesion
    internalVariantProps: PlasmicIniciarSesion__VariantProps,
    internalArgProps: PlasmicIniciarSesion__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Iniciar Sesión",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIniciarSesion;
/* prettier-ignore-end */
