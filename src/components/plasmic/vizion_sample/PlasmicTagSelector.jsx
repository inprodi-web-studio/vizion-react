// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: 3G-AeCF6EfiK
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Tag } from "inprodi-design-system"; // plasmic-import: _BCMntBFn9Hi/codeComponent
import { Icon } from "inprodi-design-system"; // plasmic-import: pr11DOeHp2wt/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicTagSelector.module.css"; // plasmic-import: 3G-AeCF6EfiK/css

createPlasmicElementProxy;

export const PlasmicTagSelector__VariantProps = new Array();

export const PlasmicTagSelector__ArgProps = new Array("value", "onValueChange");

const $$ = {};

function PlasmicTagSelector__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "value",
        type: "writable",
        variableType: "array",
        valueProp: "value",
        onChangeProp: "onValueChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Tag
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      bordered={true}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      closable={false}
      color={"#BFBFBF"}
      icon={
        <Icon
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames("__wab_instance", sty.icon)}
          icon={"Tag"}
          size={16}
          variant={"bold"}
        />
      }
      label={(() => {
        try {
          return (() => {
            return $props.value?.length ?? 0;
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    />
  );
}

const PlasmicDescendants = {
  root: ["root", "icon"],
  icon: ["icon"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTagSelector__ArgProps,
          internalVariantPropNames: PlasmicTagSelector__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTagSelector__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTagSelector";
  } else {
    func.displayName = `PlasmicTagSelector.${nodeName}`;
  }
  return func;
}

export const PlasmicTagSelector = Object.assign(
  // Top-level PlasmicTagSelector renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    icon: makeNodeComponent("icon"),
    // Metadata about props expected for PlasmicTagSelector
    internalVariantProps: PlasmicTagSelector__VariantProps,
    internalArgProps: PlasmicTagSelector__ArgProps
  }
);

export default PlasmicTagSelector;
/* prettier-ignore-end */
