// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: U0Wek-az3TXP
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Avatar } from "inprodi-design-system"; // plasmic-import: LHFWbCJrjoSX/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicUserDropdown.module.css"; // plasmic-import: U0Wek-az3TXP/css

createPlasmicElementProxy;

export const PlasmicUserDropdown__VariantProps = new Array();

export const PlasmicUserDropdown__ArgProps = new Array();

const $$ = {};

function PlasmicUserDropdown__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"userDropdown"}
      data-plasmic-override={overrides.userDropdown}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.userDropdown
      )}
    >
      <Avatar
        data-plasmic-name={"avatar"}
        data-plasmic-override={overrides.avatar}
        bordered={true}
        className={classNames("__wab_instance", sty.avatar)}
        color={true ? "#1F32C4" : undefined}
        content={(() => {
          try {
            return (() => {
              const { image, name } = $ctx.user;
              if (image?.url) return image.url;
              return name ?? "A";
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        isCircular={true}
        size={"md"}
        type={(() => {
          try {
            return (() => {
              const { image } = $ctx.user;
              if (image?.url) return "image";
              return "text";
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "image";
            }
            throw e;
          }
        })()}
        variant={"filled"}
      />

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, sty.text)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hK4A
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (() => {
                  return $$.parseName($ctx.user);
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__rfuom
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (() => {
                  const roleDictionary = {
                    owner: "Propietario",
                    amdin: "Administrador"
                  };
                  return roleDictionary[$ctx.user.role?.name] || "-";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Super Administrador";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  userDropdown: ["userDropdown", "avatar", "text"],
  avatar: ["avatar"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUserDropdown__ArgProps,
          internalVariantPropNames: PlasmicUserDropdown__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUserDropdown__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "userDropdown") {
    func.displayName = "PlasmicUserDropdown";
  } else {
    func.displayName = `PlasmicUserDropdown.${nodeName}`;
  }
  return func;
}

export const PlasmicUserDropdown = Object.assign(
  // Top-level PlasmicUserDropdown renders the root element
  makeNodeComponent("userDropdown"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicUserDropdown
    internalVariantProps: PlasmicUserDropdown__VariantProps,
    internalArgProps: PlasmicUserDropdown__ArgProps
  }
);

export default PlasmicUserDropdown;
/* prettier-ignore-end */
