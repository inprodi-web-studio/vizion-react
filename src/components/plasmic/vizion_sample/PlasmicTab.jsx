// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: Llxk4nE61vv7
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Icon } from "inprodi-design-system"; // plasmic-import: pr11DOeHp2wt/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicTab.module.css"; // plasmic-import: Llxk4nE61vv7/css

createPlasmicElementProxy;

export const PlasmicTab__VariantProps = new Array("isActive");

export const PlasmicTab__ArgProps = new Array(
  "label",
  "onIsActiveChange",
  "icon",
  "onClick"
);

const $$ = {};

function PlasmicTab__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          label: "Tab Title",
          icon: "Smiley"
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isActive",
        type: "writable",
        variableType: "variant",
        valueProp: "isActive",
        onChangeProp: "onIsActiveChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.container,
        { [sty.containerisActive]: hasVariant($state, "isActive", "isActive") }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"tab"}
        data-plasmic-override={overrides.tab}
        hasGap={true}
        className={classNames(projectcss.all, sty.tab, {
          [sty.tabisActive]: hasVariant($state, "isActive", "isActive")
        })}
        onClick={async event => {
          const $steps = {};
          $steps["runOnClick"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onClick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnClick"] != null &&
            typeof $steps["runOnClick"] === "object" &&
            typeof $steps["runOnClick"].then === "function"
          ) {
            $steps["runOnClick"] = await $steps["runOnClick"];
          }
        }}
        style={{ userSelect: "none" }}
      >
        <Icon
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames("__wab_instance", sty.icon, {
            [sty.iconisActive]: hasVariant($state, "isActive", "isActive")
          })}
          color={(() => {
            try {
              return $state.isActive
                ? "var(--token-pRs3-4jrQ4XQ)"
                : "var(--token-YFIqRc19SnuM)";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "var(--token-pRs3-4jrQ4XQ)";
              }
              throw e;
            }
          })()}
          icon={
            hasVariant($state, "isActive", "isActive")
              ? (() => {
                  try {
                    return $props.icon;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
              : (() => {
                  try {
                    return $props.icon;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()
          }
          size={16}
          variant={"regular"}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            { [sty.textisActive]: hasVariant($state, "isActive", "isActive") }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.label;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Resumen";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </Stack__>
      <div
        data-plasmic-name={"indicator"}
        data-plasmic-override={overrides.indicator}
        className={classNames(projectcss.all, sty.indicator, {
          [sty.indicatorisActive]: hasVariant($state, "isActive", "isActive")
        })}
      />
    </div>
  );
}

const PlasmicDescendants = {
  container: ["container", "tab", "icon", "text", "indicator"],
  tab: ["tab", "icon", "text"],
  icon: ["icon"],
  text: ["text"],
  indicator: ["indicator"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTab__ArgProps,
          internalVariantPropNames: PlasmicTab__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTab__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicTab";
  } else {
    func.displayName = `PlasmicTab.${nodeName}`;
  }
  return func;
}

export const PlasmicTab = Object.assign(
  // Top-level PlasmicTab renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    tab: makeNodeComponent("tab"),
    icon: makeNodeComponent("icon"),
    text: makeNodeComponent("text"),
    indicator: makeNodeComponent("indicator"),
    // Metadata about props expected for PlasmicTab
    internalVariantProps: PlasmicTab__VariantProps,
    internalArgProps: PlasmicTab__ArgProps
  }
);

export default PlasmicTab;
/* prettier-ignore-end */
