// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: 5_oWxrfwjDGD
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  initializeCodeComponentStates,
  initializePlasmicStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import AppShell from "../../AppShell"; // plasmic-import: ejt2_Xh6tCty/component
import { Icon } from "inprodi-design-system"; // plasmic-import: pr11DOeHp2wt/codeComponent
import { Dropdown } from "inprodi-design-system"; // plasmic-import: VR7TjCldSz8n/codeComponent
import { DropdownItem } from "inprodi-design-system"; // plasmic-import: TDTwnvMbhFuH/codeComponent
import { Divider } from "inprodi-design-system"; // plasmic-import: wg1uLyOOWzxq/codeComponent
import { Card } from "inprodi-design-system"; // plasmic-import: MgI4ow5h1use/codeComponent
import { Avatar } from "inprodi-design-system"; // plasmic-import: LHFWbCJrjoSX/codeComponent
import { Skeleton } from "inprodi-design-system"; // plasmic-import: BVuwjAViiz5F/codeComponent
import { Rate } from "inprodi-design-system"; // plasmic-import: QSpBNk0IPN71/codeComponent
import UserSelector from "../../UserSelector"; // plasmic-import: zYKS2FXDESZB/component
import IconSelector from "../../IconSelector"; // plasmic-import: 0Re2ao-UpkEe/component
import ImageSelector from "../../ImageSelector"; // plasmic-import: fRC85Ctx5Ezf/component
import TagsWrapper from "../../TagsWrapper"; // plasmic-import: vGT8E4MFM0KX/component
import { Tag } from "inprodi-design-system"; // plasmic-import: _BCMntBFn9Hi/codeComponent
import EmptyData from "../../EmptyData"; // plasmic-import: hMvFr8gCB8DJ/component
import Tab from "../../Tab"; // plasmic-import: Llxk4nE61vv7/component
import { Modal } from "inprodi-design-system"; // plasmic-import: uLec7e2D4Hau/codeComponent
import { Form } from "inprodi-design-system"; // plasmic-import: fVNNuSkHtA1W/codeComponent
import { FormField } from "inprodi-design-system"; // plasmic-import: 8n4bi1KfTgdt/codeComponent
import { Input } from "inprodi-design-system"; // plasmic-import: EYGCq8UmQ7qQ/codeComponent
import { Select } from "inprodi-design-system"; // plasmic-import: 6migCzdJYTa1/codeComponent
import { Confirmation } from "inprodi-design-system"; // plasmic-import: 8sPy6N_cZled/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicCrmExpedienteProspecto.module.css"; // plasmic-import: 5_oWxrfwjDGD/css
import casualLife3DGreenNotebookWithOrangeBookmarkpngNN5LkmKtSoJl from "./images/casualLife3DGreenNotebookWithOrangeBookmarkpng.png"; // plasmic-import: nN5lkmKtSoJl/picture

createPlasmicElementProxy;

export const PlasmicCrmExpedienteProspecto__VariantProps = new Array();

export const PlasmicCrmExpedienteProspecto__ArgProps = new Array();

const $$ = {};

function PlasmicCrmExpedienteProspecto__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "dropdown.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "dropdown"
      },
      {
        path: "dropdown.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "dropdown"
      },
      {
        path: "dropdownItem.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dropdownItem2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dropdownItem3.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dropdownItem4.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "tab.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.subsection === "resume";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "tab2.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.subsection === "estimates";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "tab3.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.subsection === "activity";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "tab4.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.subsection === "tasks";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "tab5.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.subsection === "notes";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "tab6.isActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.subsection === "files";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "subsection",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "resume"
      },
      {
        path: "responsible.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.searchUsers.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })(),
        refName: "responsible"
      },
      {
        path: "responsible.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "responsible"
      },
      {
        path: "userSelector.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { responsible } = $queries.findOneLead.data.response;
                return responsible;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return null;
              }
              throw e;
            }
          })()
      },
      {
        path: "group.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.searchGroups.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })(),
        refName: "group"
      },
      {
        path: "group.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "group"
      },
      {
        path: "source.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.searchSources.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })(),
        refName: "source"
      },
      {
        path: "source.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "source"
      },
      {
        path: "groupSelector.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { group } = $queries.findOneLead.data.response;
                return group;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return null;
              }
              throw e;
            }
          })()
      },
      {
        path: "sourceSelector.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { source } = $queries.findOneLead.data.response;
                return source;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return null;
              }
              throw e;
            }
          })()
      },
      {
        path: "rate.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { rating } = $queries.findOneLead.data.response;
                return rating;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "search",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          users: null,
          groups: null,
          sources: null,
          tags: null
        })
      },
      {
        path: "dropdownItem5[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem6[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem8[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "tags.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.searchTags.isLoading;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })(),
        refName: "tags"
      },
      {
        path: "tags.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "tags"
      },
      {
        path: "dropdownItem9[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "tagsWrapper2.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.findOneLead.data.response.tags;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "dropdown2[].loading",
        type: "private",
        variableType: "boolean",
        refName: "dropdown2"
      },
      {
        path: "dropdown2[].searchValue",
        type: "private",
        variableType: "text",
        refName: "dropdown2"
      },
      {
        path: "dropdownItem7[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem10[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem12[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem13[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem14[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem15[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem16[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "modals",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          contact: { opened: false, data: null }
        })
      },
      {
        path: "emptyData.size",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "small"
      },
      {
        path: "contactModal.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.modals.contact.opened;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "contactForm.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "contactForm"
      },
      {
        path: "name.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "name"
      },
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.modals.contact.data?.completeName?.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "middleName.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "middleName"
      },
      {
        path: "middleNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.modals.contact.data?.completeName?.middleName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "lastName.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "lastName"
      },
      {
        path: "lastNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.modals.contact.data?.completeName?.lastName;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "email.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "email"
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.modals.contact.data?.email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "phone.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "phone"
      },
      {
        path: "phoneCodeInput.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { code } = $state.modals.contact.data?.phone ?? {};
                const flag = $queries.findCountries.data.response.filter(i => {
                  const root = i.idd.root;
                  const suffix = i.idd.suffixes[0];
                  return code === `${root}${suffix}`;
                });
                return {
                  label: code ? code : "+52",
                  value: code ? code : "+52",
                  flag: flag[0] ? flag[0].flag : "\uD83C\uDDF2\uD83C\uDDFD"
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "phoneCodeInput"
      },
      {
        path: "phoneCodeInput.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "phoneCodeInput"
      },
      {
        path: "dropdownItem11[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "phoneNumberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.modals.contact.data?.phone?.number;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "job.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "job"
      },
      {
        path: "jobInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.modals.contact.data?.job;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "confirmations",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          deleteContact: { opened: false, data: null }
        })
      },
      {
        path: "loading",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          deleteContact: false
        })
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    findOneLead: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "379c0ad1-b913-4047-9490-57a06c314b86",
        userArgs: {
          path: [`contacts/leads/${$ctx.params.uuid}`],
          headers: [`Bearer ${$ctx.token}`]
        },
        cacheKey: `plasmic.$.379c0ad1-b913-4047-9490-57a06c314b86.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    searchUsers: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "b548865d-40c3-4d4e-8d46-aa1a25a61311",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`],
          params: [$state.search.users ?? ""]
        },
        cacheKey: `plasmic.$.b548865d-40c3-4d4e-8d46-aa1a25a61311.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    searchGroups: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "96aff237-42a5-456e-871c-9fe400d0c312",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`],
          params: [$state.search.groups ?? ""]
        },
        cacheKey: `plasmic.$.96aff237-42a5-456e-871c-9fe400d0c312.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    searchSources: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "9c0fb179-6c5b-49ff-9b72-039f63aeaee0",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`],
          params: [$state.search.sources ?? ""]
        },
        cacheKey: `plasmic.$.9c0fb179-6c5b-49ff-9b72-039f63aeaee0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    searchTags: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "e22cbb99-5299-44f0-834f-35f6959fbc92",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`],
          params: [$state.search.tags ?? ""]
        },
        cacheKey: `plasmic.$.e22cbb99-5299-44f0-834f-35f6959fbc92.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    findCountries: usePlasmicDataOp(() => {
      return {
        sourceId: "rg7zzn1zFr3dquQauKJCRm",
        opId: "88d0138c-1f4a-483f-896d-268269a3b4cc",
        userArgs: {
          path: [
            (() => {
              return "all?fields=name,flag,translations,idd";
            })()
          ]
        },
        cacheKey: `plasmic.$.88d0138c-1f4a-483f-896d-268269a3b4cc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mainSection
          )}
        >
          <AppShell
            data-plasmic-name={"appShell"}
            data-plasmic-override={overrides.appShell}
            collapsed={true}
            pageContent2={
              <Stack__
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <div
                  data-plasmic-name={"topBar"}
                  data-plasmic-override={overrides.topBar}
                  className={classNames(projectcss.all, sty.topBar)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"returnButton"}
                    data-plasmic-override={overrides.returnButton}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.returnButton)}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToCrmProspectos"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/crm/contacts/leads`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                location.assign(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToCrmProspectos"] != null &&
                        typeof $steps["goToCrmProspectos"] === "object" &&
                        typeof $steps["goToCrmProspectos"].then === "function"
                      ) {
                        $steps["goToCrmProspectos"] = await $steps[
                          "goToCrmProspectos"
                        ];
                      }
                    }}
                    style={{ userSelect: "none" }}
                  >
                    <Icon
                      className={classNames("__wab_instance", sty.icon__nnoXb)}
                      color={"var(--token-YFIqRc19SnuM)"}
                      icon={"ArrowLeft"}
                      size={16}
                      variant={"regular"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Wou7
                      )}
                    >
                      {"Regresar"}
                    </div>
                  </Stack__>
                  <Dropdown
                    data-plasmic-name={"dropdown"}
                    data-plasmic-override={overrides.dropdown}
                    className={classNames("__wab_instance", sty.dropdown)}
                    closeOnSelect={true}
                    isEmpty={false}
                    loading={generateStateValueProp($state, [
                      "dropdown",
                      "loading"
                    ])}
                    maxHeight={"200px"}
                    menuContent={
                      <React.Fragment>
                        <DropdownItem
                          data-plasmic-name={"dropdownItem"}
                          data-plasmic-override={overrides.dropdownItem}
                          className={classNames(
                            "__wab_instance",
                            sty.dropdownItem
                          )}
                          disabled={false}
                          isSelected={generateStateValueProp($state, [
                            "dropdownItem",
                            "isSelected"
                          ])}
                          label={"Editar Prospecto"}
                          leftSection={
                            <Icon
                              className={classNames(
                                "__wab_instance",
                                sty.icon__zhpNr
                              )}
                              color={"#868E96"}
                              icon={"PencilSimpleLine"}
                              size={16}
                              variant={"regular"}
                            />
                          }
                          onIsSelectedChange={generateStateOnChangeProp(
                            $state,
                            ["dropdownItem", "isSelected"]
                          )}
                          selectedPosition={"right"}
                        />

                        <DropdownItem
                          data-plasmic-name={"dropdownItem2"}
                          data-plasmic-override={overrides.dropdownItem2}
                          className={classNames(
                            "__wab_instance",
                            sty.dropdownItem2
                          )}
                          disabled={false}
                          isSelected={generateStateValueProp($state, [
                            "dropdownItem2",
                            "isSelected"
                          ])}
                          label={"Convertir en Cliente"}
                          leftSection={
                            <Icon
                              className={classNames(
                                "__wab_instance",
                                sty.icon___9Fs6L
                              )}
                              color={"#868E96"}
                              icon={"Handshake"}
                              size={16}
                              variant={"regular"}
                            />
                          }
                          onIsSelectedChange={generateStateOnChangeProp(
                            $state,
                            ["dropdownItem2", "isSelected"]
                          )}
                          selectedPosition={"right"}
                        />

                        <Divider
                          className={classNames(
                            "__wab_instance",
                            sty.divider__p8Jps
                          )}
                          dashed={false}
                          margin={"0px"}
                          orientation={"left"}
                          orientationMargin={"0px"}
                          type={"horizontal"}
                        />

                        <DropdownItem
                          data-plasmic-name={"dropdownItem3"}
                          data-plasmic-override={overrides.dropdownItem3}
                          className={classNames(
                            "__wab_instance",
                            sty.dropdownItem3
                          )}
                          disabled={false}
                          isSelected={generateStateValueProp($state, [
                            "dropdownItem3",
                            "isSelected"
                          ])}
                          label={"Marcar como Inactivo"}
                          leftSection={
                            <Icon
                              className={classNames(
                                "__wab_instance",
                                sty.icon__ag2O8
                              )}
                              color={"#868E96"}
                              icon={"Prohibit"}
                              size={16}
                              variant={"regular"}
                            />
                          }
                          onIsSelectedChange={generateStateOnChangeProp(
                            $state,
                            ["dropdownItem3", "isSelected"]
                          )}
                          selectedPosition={"right"}
                        />

                        <DropdownItem
                          data-plasmic-name={"dropdownItem4"}
                          data-plasmic-override={overrides.dropdownItem4}
                          className={classNames(
                            "__wab_instance",
                            sty.dropdownItem4
                          )}
                          disabled={false}
                          isSelected={generateStateValueProp($state, [
                            "dropdownItem4",
                            "isSelected"
                          ])}
                          label={"Eliminar Prospecto"}
                          leftSection={
                            <Icon
                              className={classNames(
                                "__wab_instance",
                                sty.icon__eCi
                              )}
                              color={"#868E96"}
                              icon={"Trash"}
                              size={16}
                              variant={"regular"}
                            />
                          }
                          onIsSelectedChange={generateStateOnChangeProp(
                            $state,
                            ["dropdownItem4", "isSelected"]
                          )}
                          selectedPosition={"right"}
                        />
                      </React.Fragment>
                    }
                    onLoadingChange={generateStateOnChangeProp($state, [
                      "dropdown",
                      "loading"
                    ])}
                    onSearch={generateStateOnChangeProp($state, [
                      "dropdown",
                      "searchValue"
                    ])}
                    placement={"bottomRight"}
                    ref={ref => {
                      $refs["dropdown"] = ref;
                    }}
                    searchValue={generateStateValueProp($state, [
                      "dropdown",
                      "searchValue"
                    ])}
                    searchable={false}
                    trigger={"click"}
                    triggerContent={
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"menuButton"}
                        data-plasmic-override={overrides.menuButton}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.menuButton)}
                      >
                        <Icon
                          className={classNames(
                            "__wab_instance",
                            sty.icon__hMwad
                          )}
                          color={"var(--token-YFIqRc19SnuM)"}
                          icon={"DotsThreeVertical"}
                          size={20}
                          variant={"regular"}
                        />
                      </Stack__>
                    }
                    width={"225px"}
                  />
                </div>
                <Card
                  data-plasmic-name={"card"}
                  data-plasmic-override={overrides.card}
                  className={classNames("__wab_instance", sty.card)}
                  content={
                    <div
                      data-plasmic-name={"container"}
                      data-plasmic-override={overrides.container}
                      className={classNames(projectcss.all, sty.container)}
                    >
                      <div
                        data-plasmic-name={"leftColumn"}
                        data-plasmic-override={overrides.leftColumn}
                        className={classNames(projectcss.all, sty.leftColumn)}
                      >
                        <div
                          data-plasmic-name={"mapPlaceholder"}
                          data-plasmic-override={overrides.mapPlaceholder}
                          className={classNames(
                            projectcss.all,
                            sty.mapPlaceholder
                          )}
                        />

                        <div
                          data-plasmic-name={"mapOverlay"}
                          data-plasmic-override={overrides.mapOverlay}
                          className={classNames(projectcss.all, sty.mapOverlay)}
                        />

                        <div
                          data-plasmic-name={"nameContainer"}
                          data-plasmic-override={overrides.nameContainer}
                          className={classNames(
                            projectcss.all,
                            sty.nameContainer
                          )}
                        >
                          {(() => {
                            try {
                              return !$queries.findOneLead.isLoading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Avatar
                              bordered={true}
                              className={classNames(
                                "__wab_instance",
                                sty.avatar__ka087
                              )}
                              color={true ? "#15C2C2" : undefined}
                              content={"Avatar"}
                              isCircular={false}
                              size={"md"}
                              type={"text"}
                              variant={"filled"}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return $queries.findOneLead.isLoading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Skeleton
                              data-plasmic-name={"avatarSkeleton"}
                              data-plasmic-override={overrides.avatarSkeleton}
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.avatarSkeleton
                              )}
                              count={1}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return !$queries.findOneLead.isLoading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__b9J2A
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const { finalName } =
                                        $queries.findOneLead.data.response;
                                      return finalName;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $queries.findOneLead.isLoading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Skeleton
                              data-plasmic-name={"nameSkeleton2"}
                              data-plasmic-override={overrides.nameSkeleton2}
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.nameSkeleton2
                              )}
                              count={1}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return !$queries.findOneLead.isLoading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yJbo
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      const { createdAt } =
                                        $queries.findOneLead.data.response;
                                      const formattedDate = $$.formatDate(
                                        createdAt,
                                        "MMMM D, YYYY"
                                      );
                                      return `Creado el ${formattedDate}`;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $queries.findOneLead.isLoading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Skeleton
                              data-plasmic-name={"dateSkeleton"}
                              data-plasmic-override={overrides.dateSkeleton}
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.dateSkeleton
                              )}
                              count={1}
                            />
                          ) : null}
                        </div>
                        {(() => {
                          try {
                            return $queries.findOneLead.isLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"skeletonContainer"}
                            data-plasmic-override={overrides.skeletonContainer}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.skeletonContainer
                            )}
                          >
                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton__f3T8B
                              )}
                              count={1}
                            />

                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton__fChDf
                              )}
                              count={1}
                            />

                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton__aeKua
                              )}
                              count={1}
                            />

                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton__vmEm
                              )}
                              count={1}
                            />

                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton___2FvDc
                              )}
                              count={1}
                            />

                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton___2AcRd
                              )}
                              count={1}
                            />

                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton___2GUe
                              )}
                              count={1}
                            />

                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton__q6R5Q
                              )}
                              count={1}
                            />

                            <Skeleton
                              circle={false}
                              className={classNames(
                                "__wab_instance",
                                sty.skeleton___06UOn
                              )}
                              count={1}
                            />
                          </Stack__>
                        ) : null}
                        {(() => {
                          try {
                            return !$queries.findOneLead.isLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"metas"}
                            data-plasmic-override={overrides.metas}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.metas)}
                          >
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container2"}
                              data-plasmic-override={overrides.container2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container2
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5VAXk
                                )}
                              >
                                <Icon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.icon__cLpQp
                                  )}
                                  color={"var(--token-YFIqRc19SnuM)"}
                                  icon={"Envelope"}
                                  size={16}
                                  variant={"regular"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0GOpr
                                  )}
                                >
                                  {"Correo Electr\u00f3nico"}
                                </div>
                              </Stack__>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___6Vcge
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const { email } =
                                          $queries.findOneLead.data.response;
                                        return email ?? "-";
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container10"}
                              data-plasmic-override={overrides.container10}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container10
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__zi2Wx
                                )}
                              >
                                <Icon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.icon__h4Q7I
                                  )}
                                  color={"var(--token-YFIqRc19SnuM)"}
                                  icon={"DeviceMobileSpeaker"}
                                  size={16}
                                  variant={"regular"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ihvBx
                                  )}
                                >
                                  {"Celular"}
                                </div>
                              </Stack__>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wc4Dc
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const {
                                          cellphone: { code, number }
                                        } = $queries.findOneLead.data.response;
                                        return number
                                          ? `${code} ${$$.parsePhoneNumber(
                                              number
                                            )}`
                                          : "-";
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "-";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container11"}
                              data-plasmic-override={overrides.container11}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container11
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__aDsM
                                )}
                              >
                                <Icon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.icon__iP8Ua
                                  )}
                                  color={"var(--token-YFIqRc19SnuM)"}
                                  icon={"Phone"}
                                  size={16}
                                  variant={"regular"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___5Om3
                                  )}
                                >
                                  {"Tel\u00e9fono"}
                                </div>
                              </Stack__>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ju1NQ
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const {
                                          phone: { code, number }
                                        } = $queries.findOneLead.data.response;
                                        return number
                                          ? `${code} ${$$.parsePhoneNumber(
                                              number
                                            )}`
                                          : "-";
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Correo Electr\u00f3nico";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container12"}
                              data-plasmic-override={overrides.container12}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container12
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__yYtoM
                                )}
                              >
                                <Icon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.icon___4WNhw
                                  )}
                                  color={"var(--token-YFIqRc19SnuM)"}
                                  icon={"MapPin"}
                                  size={16}
                                  variant={"regular"}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hzvy2
                                  )}
                                >
                                  {"Direcci\u00f3n"}
                                </div>
                              </Stack__>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zVGg
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        const {
                                          mainAddress: {
                                            street,
                                            extNumber,
                                            intNumber,
                                            suburb,
                                            cp,
                                            state,
                                            city,
                                            country
                                          }
                                        } = $queries.findOneLead.data.response;
                                        return `${street ?? ""} ${
                                          extNumber ? `#${extNumber}` : ""
                                        } ${intNumber ?? ""}
${suburb ?? ""} ${cp ?? ""}
${city ?? ""} ${state ?? ""}
${country ?? ""}`
                                          .trimStart()
                                          .replace(/ +(?= )/g, "");
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Correo Electr\u00f3nico";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container6"}
                              data-plasmic-override={overrides.container6}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container6
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sxcdQ
                                )}
                              >
                                {"Calificaci\u00f3n"}
                              </div>
                              <Rate
                                data-plasmic-name={"rate"}
                                data-plasmic-override={overrides.rate}
                                allowClear={true}
                                allowHalf={false}
                                className={classNames(
                                  "__wab_instance",
                                  sty.rate
                                )}
                                count={5}
                                disabled={false}
                                icon={"SketchLogo"}
                                onValueChange={async (...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "rate",
                                    "value"
                                  ]).apply(null, eventArgs);
                                  (async value => {
                                    const $steps = {};
                                    $steps["loading"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return $$.showNotification(
                                                "Actualizando Calificación",
                                                {
                                                  type: "loading",
                                                  id: `rating`
                                                }
                                              );
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["loading"] != null &&
                                      typeof $steps["loading"] === "object" &&
                                      typeof $steps["loading"].then ===
                                        "function"
                                    ) {
                                      $steps["loading"] = await $steps[
                                        "loading"
                                      ];
                                    }
                                    $steps["checkIfClear"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return (() => {
                                                const isCleared =
                                                  $state.rate.value ===
                                                  $queries.findOneLead.data
                                                    .response.rating;
                                                return isCleared;
                                              })();
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["checkIfClear"] != null &&
                                      typeof $steps["checkIfClear"] ===
                                        "object" &&
                                      typeof $steps["checkIfClear"].then ===
                                        "function"
                                    ) {
                                      $steps["checkIfClear"] = await $steps[
                                        "checkIfClear"
                                      ];
                                    }
                                    $steps["patchRequest"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            dataOp: {
                                              sourceId:
                                                "nuXvvBTSGXM93PqWnV14Lf",
                                              opId: "68a04977-1cad-432a-9a42-0d0d2cb7868b",
                                              userArgs: {
                                                path: [
                                                  `contacts/leads/${$ctx.params.uuid}`
                                                ],

                                                headers: [
                                                  `Bearer ${$ctx.token}`
                                                ],

                                                body: [
                                                  (() => {
                                                    const isCleared =
                                                      $steps.checkIfCleared;
                                                    return isCleared
                                                      ? 0
                                                      : $state.rate.value;
                                                  })()
                                                ]
                                              },
                                              cacheKey: null,
                                              invalidatedKeys: [
                                                "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                                              ],

                                              roleId: null
                                            },
                                            continueOnError: true
                                          };
                                          return (async ({
                                            dataOp,
                                            continueOnError
                                          }) => {
                                            try {
                                              const response =
                                                await executePlasmicDataOp(
                                                  dataOp,
                                                  {
                                                    userAuthToken:
                                                      dataSourcesCtx?.userAuthToken,
                                                    user: dataSourcesCtx?.user
                                                  }
                                                );
                                              await plasmicInvalidate(
                                                dataOp.invalidatedKeys
                                              );
                                              return response;
                                            } catch (e) {
                                              if (!continueOnError) {
                                                throw e;
                                              }
                                              return e;
                                            }
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["patchRequest"] != null &&
                                      typeof $steps["patchRequest"] ===
                                        "object" &&
                                      typeof $steps["patchRequest"].then ===
                                        "function"
                                    ) {
                                      $steps["patchRequest"] = await $steps[
                                        "patchRequest"
                                      ];
                                    }
                                    $steps["finalNotification"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return $$.showNotification(
                                                "La calificación se actualizó correctamente",
                                                {
                                                  type: "success",
                                                  id: `rating`
                                                }
                                              );
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["finalNotification"] != null &&
                                      typeof $steps["finalNotification"] ===
                                        "object" &&
                                      typeof $steps["finalNotification"]
                                        .then === "function"
                                    ) {
                                      $steps["finalNotification"] =
                                        await $steps["finalNotification"];
                                    }
                                  }).apply(null, eventArgs);
                                }}
                                value={generateStateValueProp($state, [
                                  "rate",
                                  "value"
                                ])}
                              />
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container3"}
                              data-plasmic-override={overrides.container3}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container3
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cvmVi
                                )}
                              >
                                {"Responsable"}
                              </div>
                              <Dropdown
                                data-plasmic-name={"responsible"}
                                data-plasmic-override={overrides.responsible}
                                className={classNames(
                                  "__wab_instance",
                                  sty.responsible
                                )}
                                closeOnSelect={true}
                                isEmpty={(() => {
                                  try {
                                    return (
                                      $queries.searchUsers.data.response.results
                                        .length === 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()}
                                loading={generateStateValueProp($state, [
                                  "responsible",
                                  "loading"
                                ])}
                                maxHeight={"200px"}
                                menuContent={(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.searchUsers.data.response
                                        .results;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const user = __plasmic_item_0;
                                  const userIndex = __plasmic_idx_0;
                                  return (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dropdownItem5
                                      ),
                                      disabled: false,
                                      isSelected: generateStateValueProp(
                                        $state,
                                        [
                                          "dropdownItem5",
                                          __plasmic_idx_0,
                                          "isSelected"
                                        ]
                                      ),
                                      key: userIndex,
                                      label: (() => {
                                        try {
                                          return $$.parseName(user);
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      leftSection: (
                                        <Avatar
                                          bordered={true}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.avatar___3R0Fq
                                          )}
                                          color={true ? "#1F32C4" : undefined}
                                          content={(() => {
                                            try {
                                              return (() => {
                                                const { image, name } = user;
                                                if (image?.url)
                                                  return image.url;
                                                return name;
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                          isCircular={true}
                                          size={"xs"}
                                          type={(() => {
                                            try {
                                              return (() => {
                                                const { image } = user;
                                                if (image?.url) return "image";
                                                return "text";
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "text";
                                              }
                                              throw e;
                                            }
                                          })()}
                                          variant={"filled"}
                                        />
                                      ),

                                      onClick: async () => {
                                        const $steps = {};
                                        $steps["loading"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return $$.showNotification(
                                                    "Actualizando Responsable",
                                                    {
                                                      type: "loading",
                                                      id: `responsible`
                                                    }
                                                  );
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["loading"] != null &&
                                          typeof $steps["loading"] ===
                                            "object" &&
                                          typeof $steps["loading"].then ===
                                            "function"
                                        ) {
                                          $steps["loading"] = await $steps[
                                            "loading"
                                          ];
                                        }
                                        $steps["checkIfSelected"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    const isSelected =
                                                      $state.userSelector.value
                                                        ?.uuid === user.uuid;
                                                    return isSelected;
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["checkIfSelected"] != null &&
                                          typeof $steps["checkIfSelected"] ===
                                            "object" &&
                                          typeof $steps["checkIfSelected"]
                                            .then === "function"
                                        ) {
                                          $steps["checkIfSelected"] =
                                            await $steps["checkIfSelected"];
                                        }
                                        $steps["updateLocalValue"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    const isSelected =
                                                      $steps.checkIfSelected;
                                                    $state.userSelector.value =
                                                      isSelected ? null : user;
                                                    return ($queries.findOneLead.data.response.responsible =
                                                      isSelected ? null : user);
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateLocalValue"] != null &&
                                          typeof $steps["updateLocalValue"] ===
                                            "object" &&
                                          typeof $steps["updateLocalValue"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLocalValue"] =
                                            await $steps["updateLocalValue"];
                                        }
                                        $steps["patchRequest"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                continueOnError: true,
                                                dataOp: {
                                                  sourceId:
                                                    "nuXvvBTSGXM93PqWnV14Lf",
                                                  opId: "29ef8da1-f001-4e7f-b73b-32e0df9e5731",
                                                  userArgs: {
                                                    path: [
                                                      `contacts/leads/${$ctx.params.uuid}`
                                                    ],

                                                    body: [
                                                      (() => {
                                                        const isSelected =
                                                          $steps.checkIfSelected;
                                                        return isSelected
                                                          ? null
                                                          : user.uuid;
                                                      })()
                                                    ],

                                                    headers: [
                                                      `Bearer ${$ctx.token}`
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                                                  ],

                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["patchRequest"] != null &&
                                          typeof $steps["patchRequest"] ===
                                            "object" &&
                                          typeof $steps["patchRequest"].then ===
                                            "function"
                                        ) {
                                          $steps["patchRequest"] = await $steps[
                                            "patchRequest"
                                          ];
                                        }
                                        $steps["finalNotification"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return $$.showNotification(
                                                    "El Responsable se actualizó correctamente",
                                                    {
                                                      type: "success",
                                                      id: `responsible`
                                                    }
                                                  );
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["finalNotification"] != null &&
                                          typeof $steps["finalNotification"] ===
                                            "object" &&
                                          typeof $steps["finalNotification"]
                                            .then === "function"
                                        ) {
                                          $steps["finalNotification"] =
                                            await $steps["finalNotification"];
                                        }
                                      },
                                      onIsSelectedChange:
                                        generateStateOnChangeProp($state, [
                                          "dropdownItem5",
                                          __plasmic_idx_0,
                                          "isSelected"
                                        ]),
                                      selectedPosition: "right"
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "isSelected",
                                          plasmicStateName:
                                            "dropdownItem5[].isSelected"
                                        }
                                      ],

                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "dropdownItem5[].isSelected",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return (
                                                  user.uuid ===
                                                  $queries.findOneLead.data
                                                    .response.responsible?.uuid
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return false;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],

                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <DropdownItem
                                        data-plasmic-name={"dropdownItem5"}
                                        data-plasmic-override={
                                          overrides.dropdownItem5
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })();
                                })}
                                onLoadingChange={generateStateOnChangeProp(
                                  $state,
                                  ["responsible", "loading"]
                                )}
                                onSearch={async (...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "responsible",
                                    "searchValue"
                                  ]).apply(null, eventArgs);
                                  (async value => {
                                    const $steps = {};
                                    $steps["setSearch"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["search", "users"]
                                            },
                                            operation: 0,
                                            value:
                                              $state.responsible.searchValue
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["setSearch"] != null &&
                                      typeof $steps["setSearch"] === "object" &&
                                      typeof $steps["setSearch"].then ===
                                        "function"
                                    ) {
                                      $steps["setSearch"] = await $steps[
                                        "setSearch"
                                      ];
                                    }
                                  }).apply(null, eventArgs);
                                }}
                                placement={"bottomRight"}
                                ref={ref => {
                                  $refs["responsible"] = ref;
                                }}
                                searchValue={generateStateValueProp($state, [
                                  "responsible",
                                  "searchValue"
                                ])}
                                searchable={true}
                                trigger={"click"}
                                triggerContent={
                                  <UserSelector
                                    data-plasmic-name={"userSelector"}
                                    data-plasmic-override={
                                      overrides.userSelector
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.userSelector
                                    )}
                                    onValueChange={generateStateOnChangeProp(
                                      $state,
                                      ["userSelector", "value"]
                                    )}
                                    value={generateStateValueProp($state, [
                                      "userSelector",
                                      "value"
                                    ])}
                                  />
                                }
                                width={"250px"}
                              />
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container4"}
                              data-plasmic-override={overrides.container4}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hc5O6
                                )}
                              >
                                {"Grupo"}
                              </div>
                              <Dropdown
                                data-plasmic-name={"group"}
                                data-plasmic-override={overrides.group}
                                className={classNames(
                                  "__wab_instance",
                                  sty.group
                                )}
                                closeOnSelect={true}
                                isEmpty={(() => {
                                  try {
                                    return (
                                      $queries.searchGroups.data.response
                                        .results.length === 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()}
                                loading={generateStateValueProp($state, [
                                  "group",
                                  "loading"
                                ])}
                                maxHeight={"200px"}
                                menuContent={(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.searchGroups.data.response
                                        .results;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const group = __plasmic_item_0;
                                  const groupIndex = __plasmic_idx_0;
                                  return (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dropdownItem6
                                      ),
                                      disabled: false,
                                      isSelected: generateStateValueProp(
                                        $state,
                                        [
                                          "dropdownItem6",
                                          __plasmic_idx_0,
                                          "isSelected"
                                        ]
                                      ),
                                      key: groupIndex,
                                      label: (() => {
                                        try {
                                          return group.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      leftSection: (
                                        <Icon
                                          className={classNames(
                                            "__wab_instance",
                                            sty.icon__fnXg
                                          )}
                                          color={(() => {
                                            try {
                                              return group.color;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                          icon={"Smiley"}
                                          size={16}
                                          variant={"regular"}
                                        />
                                      ),

                                      onClick: async () => {
                                        const $steps = {};
                                        $steps["loading"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return $$.showNotification(
                                                    "Actualizando Grupo",
                                                    {
                                                      type: "loading",
                                                      id: `group`
                                                    }
                                                  );
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["loading"] != null &&
                                          typeof $steps["loading"] ===
                                            "object" &&
                                          typeof $steps["loading"].then ===
                                            "function"
                                        ) {
                                          $steps["loading"] = await $steps[
                                            "loading"
                                          ];
                                        }
                                        $steps["checkIfSelected"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    const isSelected =
                                                      $state.groupSelector.value
                                                        ?.uuid === group.uuid;
                                                    return isSelected;
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["checkIfSelected"] != null &&
                                          typeof $steps["checkIfSelected"] ===
                                            "object" &&
                                          typeof $steps["checkIfSelected"]
                                            .then === "function"
                                        ) {
                                          $steps["checkIfSelected"] =
                                            await $steps["checkIfSelected"];
                                        }
                                        $steps["updateLocalValue"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    const isSelected =
                                                      $steps.checkIfSelected;
                                                    $state.groupSelector.value =
                                                      isSelected ? null : group;
                                                    return ($queries.findOneLead.data.response.group =
                                                      isSelected
                                                        ? null
                                                        : group);
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateLocalValue"] != null &&
                                          typeof $steps["updateLocalValue"] ===
                                            "object" &&
                                          typeof $steps["updateLocalValue"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLocalValue"] =
                                            await $steps["updateLocalValue"];
                                        }
                                        $steps["patchRequest"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                continueOnError: true,
                                                dataOp: {
                                                  sourceId:
                                                    "nuXvvBTSGXM93PqWnV14Lf",
                                                  opId: "03687e94-561f-4036-b399-c289e4496bc7",
                                                  userArgs: {
                                                    headers: [
                                                      `Bearer ${$ctx.token}`
                                                    ],

                                                    body: [
                                                      $state.groupSelector.value
                                                        .uuid
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                                                  ],

                                                  roleId: null
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["patchRequest"] != null &&
                                          typeof $steps["patchRequest"] ===
                                            "object" &&
                                          typeof $steps["patchRequest"].then ===
                                            "function"
                                        ) {
                                          $steps["patchRequest"] = await $steps[
                                            "patchRequest"
                                          ];
                                        }
                                        $steps["finalNotification"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return $$.showNotification(
                                                    "El grupo se actualizó correctamente",
                                                    {
                                                      type: "success",
                                                      id: `group`
                                                    }
                                                  );
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["finalNotification"] != null &&
                                          typeof $steps["finalNotification"] ===
                                            "object" &&
                                          typeof $steps["finalNotification"]
                                            .then === "function"
                                        ) {
                                          $steps["finalNotification"] =
                                            await $steps["finalNotification"];
                                        }
                                      },
                                      onIsSelectedChange:
                                        generateStateOnChangeProp($state, [
                                          "dropdownItem6",
                                          __plasmic_idx_0,
                                          "isSelected"
                                        ]),
                                      selectedPosition: "right"
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "isSelected",
                                          plasmicStateName:
                                            "dropdownItem6[].isSelected"
                                        }
                                      ],

                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "dropdownItem6[].isSelected",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return (
                                                  $state.groupSelector.value
                                                    .uuid === group.uuid
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return false;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],

                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <DropdownItem
                                        data-plasmic-name={"dropdownItem6"}
                                        data-plasmic-override={
                                          overrides.dropdownItem6
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })();
                                })}
                                onLoadingChange={generateStateOnChangeProp(
                                  $state,
                                  ["group", "loading"]
                                )}
                                onSearch={async (...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "group",
                                    "searchValue"
                                  ]).apply(null, eventArgs);
                                  (async value => {
                                    const $steps = {};
                                    $steps["setSearch"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["search", "groups"]
                                            },
                                            operation: 0,
                                            value: $state.group.searchValue
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["setSearch"] != null &&
                                      typeof $steps["setSearch"] === "object" &&
                                      typeof $steps["setSearch"].then ===
                                        "function"
                                    ) {
                                      $steps["setSearch"] = await $steps[
                                        "setSearch"
                                      ];
                                    }
                                  }).apply(null, eventArgs);
                                }}
                                placement={"bottomRight"}
                                ref={ref => {
                                  $refs["group"] = ref;
                                }}
                                searchValue={generateStateValueProp($state, [
                                  "group",
                                  "searchValue"
                                ])}
                                searchable={true}
                                trigger={"click"}
                                triggerContent={
                                  <IconSelector
                                    data-plasmic-name={"groupSelector"}
                                    data-plasmic-override={
                                      overrides.groupSelector
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.groupSelector
                                    )}
                                    emptyLabel={"Sin Grupo"}
                                    labelAccesor={"name"}
                                    onValueChange={generateStateOnChangeProp(
                                      $state,
                                      ["groupSelector", "value"]
                                    )}
                                    value={generateStateValueProp($state, [
                                      "groupSelector",
                                      "value"
                                    ])}
                                  />
                                }
                                width={"250px"}
                              />
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container5"}
                              data-plasmic-override={overrides.container5}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container5
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__csP4
                                )}
                              >
                                {"Fuente"}
                              </div>
                              <Dropdown
                                data-plasmic-name={"source"}
                                data-plasmic-override={overrides.source}
                                className={classNames(
                                  "__wab_instance",
                                  sty.source
                                )}
                                closeOnSelect={true}
                                isEmpty={(() => {
                                  try {
                                    return (
                                      $queries.searchSources.data.response
                                        .results.length === 0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return false;
                                    }
                                    throw e;
                                  }
                                })()}
                                loading={generateStateValueProp($state, [
                                  "source",
                                  "loading"
                                ])}
                                maxHeight={"200px"}
                                menuContent={(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.searchSources.data
                                        .response.results;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const source = __plasmic_item_0;
                                  const sourceIndex = __plasmic_idx_0;
                                  return (() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dropdownItem8
                                      ),
                                      disabled: false,
                                      isSelected: generateStateValueProp(
                                        $state,
                                        [
                                          "dropdownItem8",
                                          __plasmic_idx_0,
                                          "isSelected"
                                        ]
                                      ),
                                      key: sourceIndex,
                                      label: (() => {
                                        try {
                                          return source.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      leftSection: (
                                        <PlasmicImg__
                                          data-plasmic-name={"img"}
                                          data-plasmic-override={overrides.img}
                                          alt={""}
                                          className={classNames(sty.img)}
                                          displayHeight={"24px"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"24px"}
                                          loading={"lazy"}
                                          src={(() => {
                                            try {
                                              return source.icon;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()}
                                        />
                                      ),

                                      onClick: async () => {
                                        const $steps = {};
                                        $steps["loadingNotification"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return $$.showNotification(
                                                    "Actualizando Fuente",
                                                    {
                                                      type: "loading",
                                                      id: `source`
                                                    }
                                                  );
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["loadingNotification"] !=
                                            null &&
                                          typeof $steps[
                                            "loadingNotification"
                                          ] === "object" &&
                                          typeof $steps["loadingNotification"]
                                            .then === "function"
                                        ) {
                                          $steps["loadingNotification"] =
                                            await $steps["loadingNotification"];
                                        }
                                        $steps["checkIfSelected"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    const isSelected =
                                                      $state.sourceSelector
                                                        .value?.uuid ===
                                                      source.uuid;
                                                    return isSelected;
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["checkIfSelected"] != null &&
                                          typeof $steps["checkIfSelected"] ===
                                            "object" &&
                                          typeof $steps["checkIfSelected"]
                                            .then === "function"
                                        ) {
                                          $steps["checkIfSelected"] =
                                            await $steps["checkIfSelected"];
                                        }
                                        $steps["updateLocalValue"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    const isSelected =
                                                      $steps.checkIfSelected;
                                                    $state.sourceSelector.value =
                                                      isSelected
                                                        ? null
                                                        : source;
                                                    return ($queries.findOneLead.data.response.source =
                                                      isSelected
                                                        ? null
                                                        : source);
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateLocalValue"] != null &&
                                          typeof $steps["updateLocalValue"] ===
                                            "object" &&
                                          typeof $steps["updateLocalValue"]
                                            .then === "function"
                                        ) {
                                          $steps["updateLocalValue"] =
                                            await $steps["updateLocalValue"];
                                        }
                                        $steps["patchRequest"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "nuXvvBTSGXM93PqWnV14Lf",
                                                  opId: "c8454ba1-e0eb-45e0-a457-22b2c7b518b6",
                                                  userArgs: {
                                                    path: [
                                                      `contacts/leads/${$ctx.params.uuid}`
                                                    ],

                                                    headers: [
                                                      `Bearer ${$ctx.token}`
                                                    ],

                                                    body: [
                                                      (() => {
                                                        const isSelected =
                                                          $steps.checkIfSelected;
                                                        return isSelected
                                                          ? null
                                                          : source.uuid;
                                                      })()
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [],
                                                  roleId: null
                                                },
                                                continueOnError: true
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["patchRequest"] != null &&
                                          typeof $steps["patchRequest"] ===
                                            "object" &&
                                          typeof $steps["patchRequest"].then ===
                                            "function"
                                        ) {
                                          $steps["patchRequest"] = await $steps[
                                            "patchRequest"
                                          ];
                                        }
                                        $steps["finalNotification"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return $$.showNotification(
                                                    "La fuente se actualizó correctamente",
                                                    {
                                                      type: "success",
                                                      id: `source`
                                                    }
                                                  );
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["finalNotification"] != null &&
                                          typeof $steps["finalNotification"] ===
                                            "object" &&
                                          typeof $steps["finalNotification"]
                                            .then === "function"
                                        ) {
                                          $steps["finalNotification"] =
                                            await $steps["finalNotification"];
                                        }
                                      },
                                      onIsSelectedChange:
                                        generateStateOnChangeProp($state, [
                                          "dropdownItem8",
                                          __plasmic_idx_0,
                                          "isSelected"
                                        ]),
                                      selectedPosition: "right"
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "isSelected",
                                          plasmicStateName:
                                            "dropdownItem8[].isSelected"
                                        }
                                      ],

                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "dropdownItem8[].isSelected",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) =>
                                            (() => {
                                              try {
                                                return (
                                                  $state.sourceSelector.value
                                                    ?.uuid === source.uuid
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return false;
                                                }
                                                throw e;
                                              }
                                            })()
                                        }
                                      ],

                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <DropdownItem
                                        data-plasmic-name={"dropdownItem8"}
                                        data-plasmic-override={
                                          overrides.dropdownItem8
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })();
                                })}
                                onLoadingChange={generateStateOnChangeProp(
                                  $state,
                                  ["source", "loading"]
                                )}
                                onSearch={async (...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "source",
                                    "searchValue"
                                  ]).apply(null, eventArgs);
                                  (async value => {
                                    const $steps = {};
                                    $steps["setSearch"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "search",
                                                "sources"
                                              ]
                                            },
                                            operation: 0,
                                            value: $state.source.searchValue
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;
                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["setSearch"] != null &&
                                      typeof $steps["setSearch"] === "object" &&
                                      typeof $steps["setSearch"].then ===
                                        "function"
                                    ) {
                                      $steps["setSearch"] = await $steps[
                                        "setSearch"
                                      ];
                                    }
                                  }).apply(null, eventArgs);
                                }}
                                placement={"bottomRight"}
                                ref={ref => {
                                  $refs["source"] = ref;
                                }}
                                searchValue={generateStateValueProp($state, [
                                  "source",
                                  "searchValue"
                                ])}
                                searchable={true}
                                trigger={"click"}
                                triggerContent={
                                  <ImageSelector
                                    data-plasmic-name={"sourceSelector"}
                                    data-plasmic-override={
                                      overrides.sourceSelector
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.sourceSelector
                                    )}
                                    imageAccesor={"icon"}
                                    onValueChange={generateStateOnChangeProp(
                                      $state,
                                      ["sourceSelector", "value"]
                                    )}
                                    value={generateStateValueProp($state, [
                                      "sourceSelector",
                                      "value"
                                    ])}
                                  />
                                }
                                width={"250px"}
                              />
                            </Stack__>
                            <Stack__
                              as={"div"}
                              data-plasmic-name={"container8"}
                              data-plasmic-override={overrides.container8}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.container8
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cr1Oj
                                )}
                              >
                                {"Etiquetas"}
                              </div>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__m5Rt0
                                )}
                              >
                                <TagsWrapper
                                  data-plasmic-name={"tagsWrapper2"}
                                  data-plasmic-override={overrides.tagsWrapper2}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tagsWrapper2
                                  )}
                                  onValueChange={generateStateOnChangeProp(
                                    $state,
                                    ["tagsWrapper2", "value"]
                                  )}
                                  value={generateStateValueProp($state, [
                                    "tagsWrapper2",
                                    "value"
                                  ])}
                                />

                                <Dropdown
                                  data-plasmic-name={"tags"}
                                  data-plasmic-override={overrides.tags}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tags
                                  )}
                                  closeOnSelect={true}
                                  isEmpty={(() => {
                                    try {
                                      return (
                                        $queries.searchTags.data.response
                                          .results.length === 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  loading={generateStateValueProp($state, [
                                    "tags",
                                    "loading"
                                  ])}
                                  maxHeight={"200px"}
                                  menuContent={(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.searchTags.data.response
                                          .results;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const tag = __plasmic_item_0;
                                    const tagIndex = __plasmic_idx_0;
                                    return (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.dropdownItem9
                                        ),
                                        disabled: false,
                                        isSelected: generateStateValueProp(
                                          $state,
                                          [
                                            "dropdownItem9",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]
                                        ),
                                        key: tagIndex,
                                        label: (() => {
                                          try {
                                            return tag.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        leftSection: (
                                          <Icon
                                            className={classNames(
                                              "__wab_instance",
                                              sty.icon__mErf
                                            )}
                                            color={"#868E96"}
                                            icon={"Tag"}
                                            size={16}
                                            variant={"duotone"}
                                          />
                                        ),

                                        onClick: async () => {
                                          const $steps = {};
                                          $steps["loadingNotification"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return $$.showNotification(
                                                      "Actualizando Etiquetas",
                                                      {
                                                        type: "loading",
                                                        id: `tag`
                                                      }
                                                    );
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["loadingNotification"] !=
                                              null &&
                                            typeof $steps[
                                              "loadingNotification"
                                            ] === "object" &&
                                            typeof $steps["loadingNotification"]
                                              .then === "function"
                                          ) {
                                            $steps["loadingNotification"] =
                                              await $steps[
                                                "loadingNotification"
                                              ];
                                          }
                                          $steps["checkIfSelected"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      const index =
                                                        $state.tagsWrapper2.value?.findIndex(
                                                          i =>
                                                            i.uuid === tag.uuid
                                                        );
                                                      const isSelected =
                                                        index !== -1;
                                                      return {
                                                        index,
                                                        isSelected
                                                      };
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["checkIfSelected"] != null &&
                                            typeof $steps["checkIfSelected"] ===
                                              "object" &&
                                            typeof $steps["checkIfSelected"]
                                              .then === "function"
                                          ) {
                                            $steps["checkIfSelected"] =
                                              await $steps["checkIfSelected"];
                                          }
                                          $steps["updateLocalValue"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      const {
                                                        isSelected,
                                                        index
                                                      } =
                                                        $steps.checkIfSelected;
                                                      if (isSelected) {
                                                        return $state.tagsWrapper2.value?.splice(
                                                          index,
                                                          1
                                                        );
                                                      } else {
                                                        return $state.tagsWrapper2.value?.push(
                                                          tag
                                                        );
                                                      }
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateLocalValue"] !=
                                              null &&
                                            typeof $steps[
                                              "updateLocalValue"
                                            ] === "object" &&
                                            typeof $steps["updateLocalValue"]
                                              .then === "function"
                                          ) {
                                            $steps["updateLocalValue"] =
                                              await $steps["updateLocalValue"];
                                          }
                                          $steps["patchRequest"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  dataOp: {
                                                    sourceId:
                                                      "nuXvvBTSGXM93PqWnV14Lf",
                                                    opId: "ccf12444-2d0b-4060-97c7-cd9acebce2d2",
                                                    userArgs: {
                                                      path: [
                                                        `contacts/leads/${$ctx.params.uuid}`
                                                      ],

                                                      headers: [
                                                        `Bearer ${$ctx.token}`
                                                      ],

                                                      body: [
                                                        (() => {
                                                          return tag.uuid;
                                                        })()
                                                      ]
                                                    },
                                                    cacheKey: null,
                                                    invalidatedKeys: [],
                                                    roleId: null
                                                  },
                                                  continueOnError: true
                                                };
                                                return (async ({
                                                  dataOp,
                                                  continueOnError
                                                }) => {
                                                  try {
                                                    const response =
                                                      await executePlasmicDataOp(
                                                        dataOp,
                                                        {
                                                          userAuthToken:
                                                            dataSourcesCtx?.userAuthToken,
                                                          user: dataSourcesCtx?.user
                                                        }
                                                      );
                                                    await plasmicInvalidate(
                                                      dataOp.invalidatedKeys
                                                    );
                                                    return response;
                                                  } catch (e) {
                                                    if (!continueOnError) {
                                                      throw e;
                                                    }
                                                    return e;
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["patchRequest"] != null &&
                                            typeof $steps["patchRequest"] ===
                                              "object" &&
                                            typeof $steps["patchRequest"]
                                              .then === "function"
                                          ) {
                                            $steps["patchRequest"] =
                                              await $steps["patchRequest"];
                                          }
                                          $steps["finalNotification"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return $$.showNotification(
                                                      "Las etiquetas se actualizaron correctamente",
                                                      {
                                                        type: "success",
                                                        id: `tag`
                                                      }
                                                    );
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["finalNotification"] !=
                                              null &&
                                            typeof $steps[
                                              "finalNotification"
                                            ] === "object" &&
                                            typeof $steps["finalNotification"]
                                              .then === "function"
                                          ) {
                                            $steps["finalNotification"] =
                                              await $steps["finalNotification"];
                                          }
                                        },
                                        onIsSelectedChange:
                                          generateStateOnChangeProp($state, [
                                            "dropdownItem9",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]),
                                        selectedPosition: "right"
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "isSelected",
                                            plasmicStateName:
                                              "dropdownItem9[].isSelected"
                                          }
                                        ],

                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "dropdownItem9[].isSelected",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return (
                                                    $state.tagsWrapper2.value?.filter(
                                                      i => i.uuid === tag.uuid
                                                    ).length === 1
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],

                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <DropdownItem
                                          data-plasmic-name={"dropdownItem9"}
                                          data-plasmic-override={
                                            overrides.dropdownItem9
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })();
                                  })}
                                  onLoadingChange={generateStateOnChangeProp(
                                    $state,
                                    ["tags", "loading"]
                                  )}
                                  onSearch={async (...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "tags",
                                      "searchValue"
                                    ]).apply(null, eventArgs);
                                    (async value => {
                                      const $steps = {};
                                      $steps["setSearch"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["search", "tags"]
                                              },
                                              operation: 0,
                                              value: $state.tags.searchValue
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["setSearch"] != null &&
                                        typeof $steps["setSearch"] ===
                                          "object" &&
                                        typeof $steps["setSearch"].then ===
                                          "function"
                                      ) {
                                        $steps["setSearch"] = await $steps[
                                          "setSearch"
                                        ];
                                      }
                                    }).apply(null, eventArgs);
                                  }}
                                  placement={"bottomRight"}
                                  ref={ref => {
                                    $refs["tags"] = ref;
                                  }}
                                  searchValue={generateStateValueProp($state, [
                                    "tags",
                                    "searchValue"
                                  ])}
                                  searchable={true}
                                  trigger={"click"}
                                  triggerContent={
                                    <Tag
                                      data-plasmic-name={"tag"}
                                      data-plasmic-override={overrides.tag}
                                      bordered={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.tag
                                      )}
                                      closable={false}
                                      color={"#BFBFBF"}
                                      icon={
                                        <Icon
                                          className={classNames(
                                            "__wab_instance",
                                            sty.icon__l3BCb
                                          )}
                                          icon={"Plus"}
                                          size={12}
                                          variant={"bold"}
                                        />
                                      }
                                      label={``}
                                    />
                                  }
                                  width={"250px"}
                                />
                              </Stack__>
                            </Stack__>
                          </Stack__>
                        ) : null}
                        {(() => {
                          try {
                            return !$queries.findOneLead.isLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"contacts"}
                            data-plasmic-override={overrides.contacts}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.contacts)}
                          >
                            <div
                              data-plasmic-name={"container7"}
                              data-plasmic-override={overrides.container7}
                              className={classNames(
                                projectcss.all,
                                sty.container7
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__z3Mnr
                                )}
                              >
                                {"Contactos"}
                              </div>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"menuButton2"}
                                data-plasmic-override={overrides.menuButton2}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.menuButton2
                                )}
                                onClick={async event => {
                                  const $steps = {};
                                  $steps["updateModalsContactOpened"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "modals",
                                              "contact",
                                              "opened"
                                            ]
                                          },
                                          operation: 4
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;
                                          const oldValue = $stateGet(
                                            objRoot,
                                            variablePath
                                          );
                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            !oldValue
                                          );
                                          return !oldValue;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateModalsContactOpened"] !=
                                      null &&
                                    typeof $steps[
                                      "updateModalsContactOpened"
                                    ] === "object" &&
                                    typeof $steps["updateModalsContactOpened"]
                                      .then === "function"
                                  ) {
                                    $steps["updateModalsContactOpened"] =
                                      await $steps["updateModalsContactOpened"];
                                  }
                                }}
                              >
                                <Icon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.icon__zx0Yo
                                  )}
                                  color={"var(--token-YFIqRc19SnuM)"}
                                  icon={"Plus"}
                                  size={18}
                                  variant={"regular"}
                                />
                              </Stack__>
                            </div>
                            {(() => {
                              try {
                                return (
                                  $queries.findOneLead.data.response.insiders
                                    .length > 0
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })()
                              ? (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.findOneLead.data.response
                                        .insiders;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const contact = __plasmic_item_0;
                                  const contactIndex = __plasmic_idx_0;
                                  return (
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"contactItem"}
                                      data-plasmic-override={
                                        overrides.contactItem
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.contactItem,
                                        "contact-container"
                                      )}
                                      key={contactIndex}
                                      onClick={async event => {
                                        const $steps = {};
                                        $steps["openModal"] = (() => {
                                          return event.target.closest(
                                            ".contact-container"
                                          );
                                        })()
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "modals",
                                                    "contact",
                                                    "opened"
                                                  ]
                                                },
                                                operation: 4
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;
                                                const oldValue = $stateGet(
                                                  objRoot,
                                                  variablePath
                                                );
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  !oldValue
                                                );
                                                return !oldValue;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["openModal"] != null &&
                                          typeof $steps["openModal"] ===
                                            "object" &&
                                          typeof $steps["openModal"].then ===
                                            "function"
                                        ) {
                                          $steps["openModal"] = await $steps[
                                            "openModal"
                                          ];
                                        }
                                        $steps["passData"] =
                                          event.target.closest(
                                            ".contact-container"
                                          )
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "modals",
                                                      "contact",
                                                      "data"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: contact
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;
                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["passData"] != null &&
                                          typeof $steps["passData"] ===
                                            "object" &&
                                          typeof $steps["passData"].then ===
                                            "function"
                                        ) {
                                          $steps["passData"] = await $steps[
                                            "passData"
                                          ];
                                        }
                                      }}
                                    >
                                      <Avatar
                                        bordered={false}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.avatar__n6D8P
                                        )}
                                        color={true ? "#15C2C2" : undefined}
                                        content={(() => {
                                          try {
                                            return contact.completeName.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()}
                                        isCircular={false}
                                        size={"sm"}
                                        type={"text"}
                                        variant={"filled"}
                                      />

                                      <div
                                        data-plasmic-name={"text"}
                                        data-plasmic-override={overrides.text}
                                        className={classNames(
                                          projectcss.all,
                                          sty.text
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__f1Kuv
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $$.parseName(
                                                  contact.completeName
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__fu6EZ
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return contact.job;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      {(() => {
                                        try {
                                          return contact.isPrimary;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"mainIndicator"}
                                          data-plasmic-override={
                                            overrides.mainIndicator
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.mainIndicator
                                          )}
                                        >
                                          <Icon
                                            className={classNames(
                                              "__wab_instance",
                                              sty.icon__oDoO0
                                            )}
                                            color={"#FAAD14"}
                                            icon={"Star"}
                                            size={14}
                                            variant={"regular"}
                                          />
                                        </div>
                                      ) : null}
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.dropdown2
                                          ),
                                          closeOnSelect: true,
                                          isEmpty: false,
                                          loading: generateStateValueProp(
                                            $state,
                                            [
                                              "dropdown2",
                                              __plasmic_idx_0,
                                              "loading"
                                            ]
                                          ),
                                          maxHeight: ``,
                                          menuContent: (
                                            <React.Fragment>
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.dropdownItem7
                                                  ),
                                                  disabled: false,
                                                  isSelected:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "dropdownItem7",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  label:
                                                    "Enviar Correo Electr\u00f3nico",
                                                  leftSection: (
                                                    <Icon
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.icon__zQgWw
                                                      )}
                                                      color={"#868E96"}
                                                      icon={"Envelope"}
                                                      size={16}
                                                      variant={"regular"}
                                                    />
                                                  ),

                                                  onClick: async () => {
                                                    const $steps = {};
                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return event.stopPropagation();
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }
                                                  },
                                                  onIsSelectedChange:
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      [
                                                        "dropdownItem7",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  selectedPosition: "right"
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "isSelected",
                                                      plasmicStateName:
                                                        "dropdownItem7[].isSelected"
                                                    }
                                                  ],

                                                  [__plasmic_idx_0],
                                                  undefined ?? {},
                                                  child$Props
                                                );
                                                initializePlasmicStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "dropdownItem7[].isSelected",
                                                      initFunc: ({
                                                        $props,
                                                        $state,
                                                        $queries
                                                      }) => false
                                                    }
                                                  ],

                                                  [__plasmic_idx_0]
                                                );
                                                return (
                                                  <DropdownItem
                                                    data-plasmic-name={
                                                      "dropdownItem7"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.dropdownItem7
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.dropdownItem10
                                                  ),
                                                  disabled: false,
                                                  isSelected:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "dropdownItem10",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  label:
                                                    "Conectar en Videollamada",
                                                  leftSection: (
                                                    <Icon
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.icon__jZJa4
                                                      )}
                                                      color={"#868E96"}
                                                      icon={"VideoConference"}
                                                      size={16}
                                                      variant={"regular"}
                                                    />
                                                  ),

                                                  onIsSelectedChange:
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      [
                                                        "dropdownItem10",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  selectedPosition: "right"
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "isSelected",
                                                      plasmicStateName:
                                                        "dropdownItem10[].isSelected"
                                                    }
                                                  ],

                                                  [__plasmic_idx_0],
                                                  undefined ?? {},
                                                  child$Props
                                                );
                                                initializePlasmicStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "dropdownItem10[].isSelected",
                                                      initFunc: ({
                                                        $props,
                                                        $state,
                                                        $queries
                                                      }) => false
                                                    }
                                                  ],

                                                  [__plasmic_idx_0]
                                                );
                                                return (
                                                  <DropdownItem
                                                    data-plasmic-name={
                                                      "dropdownItem10"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.dropdownItem10
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.dropdownItem13
                                                  ),
                                                  disabled: false,
                                                  isSelected:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "dropdownItem13",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  label: "Enviar WhatsApp",
                                                  leftSection: (
                                                    <Icon
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.icon__yaOhr
                                                      )}
                                                      color={"#868E96"}
                                                      icon={"WhatsappLogo"}
                                                      size={16}
                                                      variant={"regular"}
                                                    />
                                                  ),

                                                  onIsSelectedChange:
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      [
                                                        "dropdownItem13",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  selectedPosition: "right"
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "isSelected",
                                                      plasmicStateName:
                                                        "dropdownItem13[].isSelected"
                                                    }
                                                  ],

                                                  [__plasmic_idx_0],
                                                  undefined ?? {},
                                                  child$Props
                                                );
                                                initializePlasmicStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "dropdownItem13[].isSelected",
                                                      initFunc: ({
                                                        $props,
                                                        $state,
                                                        $queries
                                                      }) => false
                                                    }
                                                  ],

                                                  [__plasmic_idx_0]
                                                );
                                                return (
                                                  <DropdownItem
                                                    data-plasmic-name={
                                                      "dropdownItem13"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.dropdownItem13
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.dropdownItem14
                                                  ),
                                                  disabled: false,
                                                  isSelected:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "dropdownItem14",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  label:
                                                    "Llamar por Tel\u00e9fono",
                                                  leftSection: (
                                                    <Icon
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.icon__vhbEk
                                                      )}
                                                      color={"#868E96"}
                                                      icon={"PhoneOutgoing"}
                                                      size={16}
                                                      variant={"regular"}
                                                    />
                                                  ),

                                                  onIsSelectedChange:
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      [
                                                        "dropdownItem14",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  selectedPosition: "right"
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "isSelected",
                                                      plasmicStateName:
                                                        "dropdownItem14[].isSelected"
                                                    }
                                                  ],

                                                  [__plasmic_idx_0],
                                                  undefined ?? {},
                                                  child$Props
                                                );
                                                initializePlasmicStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "dropdownItem14[].isSelected",
                                                      initFunc: ({
                                                        $props,
                                                        $state,
                                                        $queries
                                                      }) => false
                                                    }
                                                  ],

                                                  [__plasmic_idx_0]
                                                );
                                                return (
                                                  <DropdownItem
                                                    data-plasmic-name={
                                                      "dropdownItem14"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.dropdownItem14
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.dropdownItem15
                                                  ),
                                                  disabled: false,
                                                  isSelected:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "dropdownItem15",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  label: "Enviar SMS",
                                                  leftSection: (
                                                    <Icon
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.icon__zX0E
                                                      )}
                                                      color={"#868E96"}
                                                      icon={"Chat"}
                                                      size={16}
                                                      variant={"regular"}
                                                    />
                                                  ),

                                                  onIsSelectedChange:
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      [
                                                        "dropdownItem15",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  selectedPosition: "right"
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "isSelected",
                                                      plasmicStateName:
                                                        "dropdownItem15[].isSelected"
                                                    }
                                                  ],

                                                  [__plasmic_idx_0],
                                                  undefined ?? {},
                                                  child$Props
                                                );
                                                initializePlasmicStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "dropdownItem15[].isSelected",
                                                      initFunc: ({
                                                        $props,
                                                        $state,
                                                        $queries
                                                      }) => false
                                                    }
                                                  ],

                                                  [__plasmic_idx_0]
                                                );
                                                return (
                                                  <DropdownItem
                                                    data-plasmic-name={
                                                      "dropdownItem15"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.dropdownItem15
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                              <Divider
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.divider__s2Sj3
                                                )}
                                                dashed={false}
                                                margin={"0px"}
                                                orientation={"left"}
                                                orientationMargin={"0px"}
                                                type={"horizontal"}
                                              />

                                              {(() => {
                                                try {
                                                  return !contact.isPrimary;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                                ? (() => {
                                                    const child$Props = {
                                                      className: classNames(
                                                        "__wab_instance",
                                                        sty.dropdownItem12
                                                      ),
                                                      disabled: false,
                                                      isSelected:
                                                        generateStateValueProp(
                                                          $state,
                                                          [
                                                            "dropdownItem12",
                                                            __plasmic_idx_0,
                                                            "isSelected"
                                                          ]
                                                        ),
                                                      label:
                                                        "Establecer como Principal",
                                                      leftSection: (
                                                        <Icon
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.icon___6Wgd4
                                                          )}
                                                          color={"#868E96"}
                                                          icon={"Star"}
                                                          size={16}
                                                          variant={"regular"}
                                                        />
                                                      ),

                                                      onClick: async () => {
                                                        const $steps = {};
                                                        $steps[
                                                          "loadingNotification"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  customFunction:
                                                                    async () => {
                                                                      return $$.showNotification(
                                                                        "Estableciendo Contacto Principal",
                                                                        {
                                                                          type: "loading",
                                                                          id: "set-primary"
                                                                        }
                                                                      );
                                                                    }
                                                                };
                                                              return (({
                                                                customFunction
                                                              }) => {
                                                                return customFunction();
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "loadingNotification"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "loadingNotification"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "loadingNotification"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "loadingNotification"
                                                          ] = await $steps[
                                                            "loadingNotification"
                                                          ];
                                                        }
                                                        $steps["patchRequest"] =
                                                          true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    dataOp: {
                                                                      sourceId:
                                                                        "nuXvvBTSGXM93PqWnV14Lf",
                                                                      opId: "01ac5960-a6c9-4991-ab9f-7d2e18f1c22c",
                                                                      userArgs:
                                                                        {
                                                                          path: [
                                                                            `/insiders/leads/${$ctx.params.uuid}/${contact.uuid}`
                                                                          ],

                                                                          headers:
                                                                            [
                                                                              `Bearer ${$ctx.token}`
                                                                            ]
                                                                        },
                                                                      cacheKey:
                                                                        null,
                                                                      invalidatedKeys:
                                                                        [
                                                                          "379c0ad1-b913-4047-9490-57a06c314b86"
                                                                        ],

                                                                      roleId:
                                                                        null
                                                                    },
                                                                    continueOnError:
                                                                      true
                                                                  };
                                                                return (async ({
                                                                  dataOp,
                                                                  continueOnError
                                                                }) => {
                                                                  try {
                                                                    const response =
                                                                      await executePlasmicDataOp(
                                                                        dataOp,
                                                                        {
                                                                          userAuthToken:
                                                                            dataSourcesCtx?.userAuthToken,
                                                                          user: dataSourcesCtx?.user
                                                                        }
                                                                      );
                                                                    await plasmicInvalidate(
                                                                      dataOp.invalidatedKeys
                                                                    );
                                                                    return response;
                                                                  } catch (e) {
                                                                    if (
                                                                      !continueOnError
                                                                    ) {
                                                                      throw e;
                                                                    }
                                                                    return e;
                                                                  }
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                        if (
                                                          $steps[
                                                            "patchRequest"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "patchRequest"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "patchRequest"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "patchRequest"
                                                          ] = await $steps[
                                                            "patchRequest"
                                                          ];
                                                        }
                                                        $steps[
                                                          "finalNotification"
                                                        ] = true
                                                          ? (() => {
                                                              const actionArgs =
                                                                {
                                                                  customFunction:
                                                                    async () => {
                                                                      return (() => {
                                                                        return $$.showNotification(
                                                                          "Contacto Primario Actualizado",
                                                                          {
                                                                            type: "success",
                                                                            id: "set-primary"
                                                                          }
                                                                        );
                                                                      })();
                                                                    }
                                                                };
                                                              return (({
                                                                customFunction
                                                              }) => {
                                                                return customFunction();
                                                              })?.apply(null, [
                                                                actionArgs
                                                              ]);
                                                            })()
                                                          : undefined;
                                                        if (
                                                          $steps[
                                                            "finalNotification"
                                                          ] != null &&
                                                          typeof $steps[
                                                            "finalNotification"
                                                          ] === "object" &&
                                                          typeof $steps[
                                                            "finalNotification"
                                                          ].then === "function"
                                                        ) {
                                                          $steps[
                                                            "finalNotification"
                                                          ] = await $steps[
                                                            "finalNotification"
                                                          ];
                                                        }
                                                      },
                                                      onIsSelectedChange:
                                                        generateStateOnChangeProp(
                                                          $state,
                                                          [
                                                            "dropdownItem12",
                                                            __plasmic_idx_0,
                                                            "isSelected"
                                                          ]
                                                        ),
                                                      selectedPosition: "right"
                                                    };
                                                    initializeCodeComponentStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "isSelected",
                                                          plasmicStateName:
                                                            "dropdownItem12[].isSelected"
                                                        }
                                                      ],

                                                      [__plasmic_idx_0],
                                                      undefined ?? {},
                                                      child$Props
                                                    );
                                                    initializePlasmicStates(
                                                      $state,
                                                      [
                                                        {
                                                          name: "dropdownItem12[].isSelected",
                                                          initFunc: ({
                                                            $props,
                                                            $state,
                                                            $queries
                                                          }) => false
                                                        }
                                                      ],

                                                      [__plasmic_idx_0]
                                                    );
                                                    return (
                                                      <DropdownItem
                                                        data-plasmic-name={
                                                          "dropdownItem12"
                                                        }
                                                        data-plasmic-override={
                                                          overrides.dropdownItem12
                                                        }
                                                        {...child$Props}
                                                      />
                                                    );
                                                  })()
                                                : null}
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.dropdownItem16
                                                  ),
                                                  disabled: (() => {
                                                    try {
                                                      return (() => {
                                                        const currentInsiders =
                                                          $queries.findOneLead
                                                            .data.response
                                                            .insiders.length;
                                                        const { isPrimary } =
                                                          contact;
                                                        if (
                                                          isPrimary &&
                                                          currentInsiders !== 1
                                                        ) {
                                                          return true;
                                                        }
                                                        return false;
                                                      })();
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })(),
                                                  isSelected:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "dropdownItem16",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  label: "Eliminar Contacto",
                                                  leftSection: (
                                                    <Icon
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.icon__huNdf
                                                      )}
                                                      color={"#868E96"}
                                                      icon={"Trash"}
                                                      size={16}
                                                      variant={"regular"}
                                                    />
                                                  ),

                                                  onClick: async () => {
                                                    const $steps = {};
                                                    $steps["openConfirmation"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "confirmations",
                                                                  "deleteContact",
                                                                  "opened"
                                                                ]
                                                              },
                                                              operation: 4
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;
                                                              const oldValue =
                                                                $stateGet(
                                                                  objRoot,
                                                                  variablePath
                                                                );
                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                !oldValue
                                                              );
                                                              return !oldValue;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "openConfirmation"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "openConfirmation"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "openConfirmation"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "openConfirmation"
                                                      ] = await $steps[
                                                        "openConfirmation"
                                                      ];
                                                    }
                                                    $steps["passData"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "confirmations",
                                                                "deleteContact",
                                                                "data"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: contact
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;
                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["passData"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "passData"
                                                      ] === "object" &&
                                                      typeof $steps["passData"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["passData"] =
                                                        await $steps[
                                                          "passData"
                                                        ];
                                                    }
                                                  },
                                                  onIsSelectedChange:
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      [
                                                        "dropdownItem16",
                                                        __plasmic_idx_0,
                                                        "isSelected"
                                                      ]
                                                    ),
                                                  selectedPosition: "right"
                                                };
                                                initializeCodeComponentStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "isSelected",
                                                      plasmicStateName:
                                                        "dropdownItem16[].isSelected"
                                                    }
                                                  ],

                                                  [__plasmic_idx_0],
                                                  undefined ?? {},
                                                  child$Props
                                                );
                                                initializePlasmicStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "dropdownItem16[].isSelected",
                                                      initFunc: ({
                                                        $props,
                                                        $state,
                                                        $queries
                                                      }) => false
                                                    }
                                                  ],

                                                  [__plasmic_idx_0]
                                                );
                                                return (
                                                  <DropdownItem
                                                    data-plasmic-name={
                                                      "dropdownItem16"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.dropdownItem16
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                            </React.Fragment>
                                          ),

                                          onLoadingChange:
                                            generateStateOnChangeProp($state, [
                                              "dropdown2",
                                              __plasmic_idx_0,
                                              "loading"
                                            ]),
                                          onSearch: generateStateOnChangeProp(
                                            $state,
                                            [
                                              "dropdown2",
                                              __plasmic_idx_0,
                                              "searchValue"
                                            ]
                                          ),
                                          placement: "bottomRight",
                                          ref: ref => {
                                            $refs["dropdown2"] = ref;
                                          },
                                          searchValue: generateStateValueProp(
                                            $state,
                                            [
                                              "dropdown2",
                                              __plasmic_idx_0,
                                              "searchValue"
                                            ]
                                          ),
                                          searchable: false,
                                          trigger: "click",
                                          triggerContent: (
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"menuButton3"}
                                              data-plasmic-override={
                                                overrides.menuButton3
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.menuButton3
                                              )}
                                              onClick={async event => {
                                                const $steps = {};
                                                $steps["runCode"] = true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return event.stopPropagation();
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                                if (
                                                  $steps["runCode"] != null &&
                                                  typeof $steps["runCode"] ===
                                                    "object" &&
                                                  typeof $steps["runCode"]
                                                    .then === "function"
                                                ) {
                                                  $steps["runCode"] =
                                                    await $steps["runCode"];
                                                }
                                              }}
                                            >
                                              <Icon
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.icon__v1JN3
                                                )}
                                                color={
                                                  "var(--token-YFIqRc19SnuM)"
                                                }
                                                icon={"DotsThreeVertical"}
                                                size={16}
                                                variant={"regular"}
                                              />
                                            </Stack__>
                                          ),

                                          width: "225px"
                                        };
                                        initializeCodeComponentStates(
                                          $state,
                                          [
                                            {
                                              name: "loading",
                                              plasmicStateName:
                                                "dropdown2[].loading"
                                            },
                                            {
                                              name: "searchValue",
                                              plasmicStateName:
                                                "dropdown2[].searchValue"
                                            }
                                          ],

                                          [__plasmic_idx_0],
                                          undefined ?? {},
                                          child$Props
                                        );
                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "dropdown2[].loading",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => false
                                            },
                                            {
                                              name: "dropdown2[].searchValue",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => ""
                                            }
                                          ],

                                          [__plasmic_idx_0]
                                        );
                                        return (
                                          <Dropdown
                                            data-plasmic-name={"dropdown2"}
                                            data-plasmic-override={
                                              overrides.dropdown2
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </Stack__>
                                  );
                                })
                              : null}
                            {(() => {
                              try {
                                return (
                                  $queries.findOneLead.data.response.insiders
                                    .length === 0 &&
                                  !$queries.findOneLead.isLoading
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <EmptyData
                                data-plasmic-name={"emptyData"}
                                data-plasmic-override={overrides.emptyData}
                                className={classNames(
                                  "__wab_instance",
                                  sty.emptyData
                                )}
                                description={
                                  "Agrega contactos complementarios al prospecto para gestionar distintas personas de contacto."
                                }
                                image={{
                                  src: casualLife3DGreenNotebookWithOrangeBookmarkpngNN5LkmKtSoJl,
                                  fullWidth: 368,
                                  fullHeight: 496,
                                  aspectRatio: undefined
                                }}
                                onSizeChange={generateStateOnChangeProp(
                                  $state,
                                  ["emptyData", "size"]
                                )}
                                size={generateStateValueProp($state, [
                                  "emptyData",
                                  "size"
                                ])}
                                title={"Sin Contactos Complementarios"}
                              />
                            ) : null}
                          </Stack__>
                        ) : null}
                      </div>
                      <div
                        data-plasmic-name={"rightColumn"}
                        data-plasmic-override={overrides.rightColumn}
                        className={classNames(projectcss.all, sty.rightColumn)}
                      >
                        <div
                          data-plasmic-name={"top"}
                          data-plasmic-override={overrides.top}
                          className={classNames(projectcss.all, sty.top)}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"tabs"}
                            data-plasmic-override={overrides.tabs}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.tabs)}
                          >
                            <Tab
                              data-plasmic-name={"tab"}
                              data-plasmic-override={overrides.tab}
                              className={classNames("__wab_instance", sty.tab)}
                              icon={"ReadCvLogo"}
                              isActive={generateStateValueProp($state, [
                                "tab",
                                "isActive"
                              ])}
                              label={"Resumen"}
                              onClick={async () => {
                                const $steps = {};
                                $steps["updateSubsection"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["subsection"]
                                        },
                                        operation: 0,
                                        value: "resume"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSubsection"] != null &&
                                  typeof $steps["updateSubsection"] ===
                                    "object" &&
                                  typeof $steps["updateSubsection"].then ===
                                    "function"
                                ) {
                                  $steps["updateSubsection"] = await $steps[
                                    "updateSubsection"
                                  ];
                                }
                              }}
                              onIsActiveChange={generateStateOnChangeProp(
                                $state,
                                ["tab", "isActive"]
                              )}
                            />

                            <Tab
                              data-plasmic-name={"tab2"}
                              data-plasmic-override={overrides.tab2}
                              className={classNames("__wab_instance", sty.tab2)}
                              icon={"Calculator"}
                              isActive={generateStateValueProp($state, [
                                "tab2",
                                "isActive"
                              ])}
                              label={"Cotizaciones"}
                              onClick={async () => {
                                const $steps = {};
                                $steps["updateSubsection"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["subsection"]
                                        },
                                        operation: 0,
                                        value: "estimates"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSubsection"] != null &&
                                  typeof $steps["updateSubsection"] ===
                                    "object" &&
                                  typeof $steps["updateSubsection"].then ===
                                    "function"
                                ) {
                                  $steps["updateSubsection"] = await $steps[
                                    "updateSubsection"
                                  ];
                                }
                              }}
                              onIsActiveChange={generateStateOnChangeProp(
                                $state,
                                ["tab2", "isActive"]
                              )}
                            />

                            <Tab
                              data-plasmic-name={"tab3"}
                              data-plasmic-override={overrides.tab3}
                              className={classNames("__wab_instance", sty.tab3)}
                              icon={"Pulse"}
                              isActive={generateStateValueProp($state, [
                                "tab3",
                                "isActive"
                              ])}
                              label={"Actividad"}
                              onClick={async () => {
                                const $steps = {};
                                $steps["updateSubsection"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["subsection"]
                                        },
                                        operation: 0,
                                        value: "activity"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSubsection"] != null &&
                                  typeof $steps["updateSubsection"] ===
                                    "object" &&
                                  typeof $steps["updateSubsection"].then ===
                                    "function"
                                ) {
                                  $steps["updateSubsection"] = await $steps[
                                    "updateSubsection"
                                  ];
                                }
                              }}
                              onIsActiveChange={generateStateOnChangeProp(
                                $state,
                                ["tab3", "isActive"]
                              )}
                            />

                            <Tab
                              data-plasmic-name={"tab4"}
                              data-plasmic-override={overrides.tab4}
                              className={classNames("__wab_instance", sty.tab4)}
                              icon={"CheckCircle"}
                              isActive={generateStateValueProp($state, [
                                "tab4",
                                "isActive"
                              ])}
                              label={"Tareas"}
                              onClick={async () => {
                                const $steps = {};
                                $steps["updateSubsection"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["subsection"]
                                        },
                                        operation: 0,
                                        value: "tasks"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSubsection"] != null &&
                                  typeof $steps["updateSubsection"] ===
                                    "object" &&
                                  typeof $steps["updateSubsection"].then ===
                                    "function"
                                ) {
                                  $steps["updateSubsection"] = await $steps[
                                    "updateSubsection"
                                  ];
                                }
                              }}
                              onIsActiveChange={generateStateOnChangeProp(
                                $state,
                                ["tab4", "isActive"]
                              )}
                            />

                            <Tab
                              data-plasmic-name={"tab5"}
                              data-plasmic-override={overrides.tab5}
                              className={classNames("__wab_instance", sty.tab5)}
                              icon={"Note"}
                              isActive={generateStateValueProp($state, [
                                "tab5",
                                "isActive"
                              ])}
                              label={"Notas"}
                              onClick={async () => {
                                const $steps = {};
                                $steps["updateSubsection"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["subsection"]
                                        },
                                        operation: 0,
                                        value: "notes"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSubsection"] != null &&
                                  typeof $steps["updateSubsection"] ===
                                    "object" &&
                                  typeof $steps["updateSubsection"].then ===
                                    "function"
                                ) {
                                  $steps["updateSubsection"] = await $steps[
                                    "updateSubsection"
                                  ];
                                }
                              }}
                              onIsActiveChange={generateStateOnChangeProp(
                                $state,
                                ["tab5", "isActive"]
                              )}
                            />

                            <Tab
                              data-plasmic-name={"tab6"}
                              data-plasmic-override={overrides.tab6}
                              className={classNames("__wab_instance", sty.tab6)}
                              icon={"Paperclip"}
                              isActive={generateStateValueProp($state, [
                                "tab6",
                                "isActive"
                              ])}
                              label={"Archivos"}
                              onClick={async () => {
                                const $steps = {};
                                $steps["updateSubsection"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["subsection"]
                                        },
                                        operation: 0,
                                        value: "files"
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;
                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateSubsection"] != null &&
                                  typeof $steps["updateSubsection"] ===
                                    "object" &&
                                  typeof $steps["updateSubsection"].then ===
                                    "function"
                                ) {
                                  $steps["updateSubsection"] = await $steps[
                                    "updateSubsection"
                                  ];
                                }
                              }}
                              onIsActiveChange={generateStateOnChangeProp(
                                $state,
                                ["tab6", "isActive"]
                              )}
                            />
                          </Stack__>
                        </div>
                      </div>
                    </div>
                  }
                  isLoading={false}
                  padding={"0"}
                  shadow={"none"}
                />

                <Modal
                  data-plasmic-name={"contactModal"}
                  data-plasmic-override={overrides.contactModal}
                  bodyPadding={"0"}
                  cancelText={"Cancelar"}
                  className={classNames("__wab_instance", sty.contactModal)}
                  confirmLoading={(() => {
                    try {
                      return $state.contactForm.loading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  content={
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"modalContent"}
                      data-plasmic-override={overrides.modalContent}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.modalContent)}
                    >
                      <Form
                        data-plasmic-name={"contactForm"}
                        data-plasmic-override={overrides.contactForm}
                        className={classNames(
                          "__wab_instance",
                          sty.contactForm
                        )}
                        content={
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__z40Pi
                            )}
                          >
                            <FormField
                              data-plasmic-name={"name"}
                              data-plasmic-override={overrides.name}
                              className={classNames("__wab_instance", sty.name)}
                              content={
                                <Input
                                  data-plasmic-name={"nameInput"}
                                  data-plasmic-override={overrides.nameInput}
                                  allowClear={false}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.nameInput
                                  )}
                                  debounce={0}
                                  disabled={false}
                                  leftIcon={null}
                                  onChange={generateStateOnChangeProp($state, [
                                    "nameInput",
                                    "value"
                                  ])}
                                  placeholder={"Alejandro"}
                                  rightIcon={null}
                                  size={"middle"}
                                  value={generateStateValueProp($state, [
                                    "nameInput",
                                    "value"
                                  ])}
                                  variant={"outlined"}
                                />
                              }
                              error={generateStateValueProp($state, [
                                "name",
                                "error"
                              ])}
                              label={"Nombre(s)"}
                              name={``}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "name",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["name"] = ref;
                              }}
                            />

                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xaLvT
                              )}
                            >
                              <FormField
                                data-plasmic-name={"middleName"}
                                data-plasmic-override={overrides.middleName}
                                className={classNames(
                                  "__wab_instance",
                                  sty.middleName
                                )}
                                content={
                                  <Input
                                    data-plasmic-name={"middleNameInput"}
                                    data-plasmic-override={
                                      overrides.middleNameInput
                                    }
                                    allowClear={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.middleNameInput
                                    )}
                                    debounce={0}
                                    disabled={false}
                                    leftIcon={null}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["middleNameInput", "value"]
                                    )}
                                    placeholder={"Murillo"}
                                    rightIcon={null}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "middleNameInput",
                                      "value"
                                    ])}
                                    variant={"outlined"}
                                  />
                                }
                                error={generateStateValueProp($state, [
                                  "middleName",
                                  "error"
                                ])}
                                label={"Apellido Materno"}
                                name={""}
                                onErrorChange={generateStateOnChangeProp(
                                  $state,
                                  ["middleName", "error"]
                                )}
                                ref={ref => {
                                  $refs["middleName"] = ref;
                                }}
                              />

                              <FormField
                                data-plasmic-name={"lastName"}
                                data-plasmic-override={overrides.lastName}
                                className={classNames(
                                  "__wab_instance",
                                  sty.lastName
                                )}
                                content={
                                  <Input
                                    data-plasmic-name={"lastNameInput"}
                                    data-plasmic-override={
                                      overrides.lastNameInput
                                    }
                                    allowClear={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.lastNameInput
                                    )}
                                    debounce={0}
                                    disabled={false}
                                    leftIcon={null}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["lastNameInput", "value"]
                                    )}
                                    placeholder={"Gonz\u00e1lez"}
                                    rightIcon={null}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "lastNameInput",
                                      "value"
                                    ])}
                                    variant={"outlined"}
                                  />
                                }
                                error={generateStateValueProp($state, [
                                  "lastName",
                                  "error"
                                ])}
                                label={"Apellido Paterno"}
                                name={""}
                                onErrorChange={generateStateOnChangeProp(
                                  $state,
                                  ["lastName", "error"]
                                )}
                                ref={ref => {
                                  $refs["lastName"] = ref;
                                }}
                              />
                            </Stack__>
                            <FormField
                              data-plasmic-name={"email"}
                              data-plasmic-override={overrides.email}
                              className={classNames(
                                "__wab_instance",
                                sty.email
                              )}
                              content={
                                <Input
                                  data-plasmic-name={"emailInput"}
                                  data-plasmic-override={overrides.emailInput}
                                  allowClear={false}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.emailInput
                                  )}
                                  debounce={0}
                                  disabled={false}
                                  leftIcon={null}
                                  onChange={generateStateOnChangeProp($state, [
                                    "emailInput",
                                    "value"
                                  ])}
                                  placeholder={"mail@empresa.com"}
                                  rightIcon={null}
                                  size={"middle"}
                                  value={generateStateValueProp($state, [
                                    "emailInput",
                                    "value"
                                  ])}
                                  variant={"outlined"}
                                />
                              }
                              error={generateStateValueProp($state, [
                                "email",
                                "error"
                              ])}
                              label={"Correo Electr\u00f3nico"}
                              name={``}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "email",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["email"] = ref;
                              }}
                            />

                            <FormField
                              data-plasmic-name={"phone"}
                              data-plasmic-override={overrides.phone}
                              className={classNames(
                                "__wab_instance",
                                sty.phone
                              )}
                              content={
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jHmcW
                                  )}
                                >
                                  <Select
                                    data-plasmic-name={"phoneCodeInput"}
                                    data-plasmic-override={
                                      overrides.phoneCodeInput
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.phoneCodeInput
                                    )}
                                    isEmpty={false}
                                    loading={false}
                                    menuContent={(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $queries.findCountries.data.response
                                            .filter(
                                              i =>
                                                i.idd.root || i.idd.suffixes[0]
                                            )
                                            .sort((a, b) => {
                                              const rootA = a.idd.root.replace(
                                                "+",
                                                ""
                                              );
                                              const rootB = b.idd.root.replace(
                                                "+",
                                                ""
                                              );
                                              const suffixA = a.idd.suffixes[0];
                                              const suffixB = b.idd.suffixes[0];
                                              const finalA = parseInt(
                                                `${rootA}${suffixA}`
                                              );
                                              const finalB = parseInt(
                                                `${rootB}${suffixB}`
                                              );
                                              if (finalA < finalB) {
                                                return -1;
                                              }
                                              if (finalA > finalB) {
                                                return 1;
                                              }
                                              return 0;
                                            });
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const code = __plasmic_item_0;
                                        const currentCode = __plasmic_idx_0;
                                        return (() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.dropdownItem11
                                            ),
                                            disabled: false,
                                            isSelected: generateStateValueProp(
                                              $state,
                                              [
                                                "dropdownItem11",
                                                __plasmic_idx_0,
                                                "isSelected"
                                              ]
                                            ),
                                            key: currentCode,
                                            label: (() => {
                                              try {
                                                return `${code.idd.root}${code.idd.suffixes[0]}`;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            leftSection: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__peEhs
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return code.flag;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            ),

                                            onClick: async () => {
                                              const $steps = {};
                                              $steps["setValue"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return $refs.phoneCodeInput.setValue(
                                                            {
                                                              label: `${code.idd.root}${code.idd.suffixes[0]}`,
                                                              value: `${code.idd.root}${code.idd.suffixes[0]}`,
                                                              flag: code.flag
                                                            }
                                                          );
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["setValue"] != null &&
                                                typeof $steps["setValue"] ===
                                                  "object" &&
                                                typeof $steps["setValue"]
                                                  .then === "function"
                                              ) {
                                                $steps["setValue"] =
                                                  await $steps["setValue"];
                                              }
                                            },
                                            onIsSelectedChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "dropdownItem11",
                                                  __plasmic_idx_0,
                                                  "isSelected"
                                                ]
                                              ),
                                            selectedPosition: "right"
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "isSelected",
                                                plasmicStateName:
                                                  "dropdownItem11[].isSelected"
                                              }
                                            ],

                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "dropdownItem11[].isSelected",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) =>
                                                  (() => {
                                                    try {
                                                      return (
                                                        $state.phoneCodeInput
                                                          .value.value ===
                                                        `${code.idd.root}${code.idd.suffixes[0]}`
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                              }
                                            ],

                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <DropdownItem
                                              data-plasmic-name={
                                                "dropdownItem11"
                                              }
                                              data-plasmic-override={
                                                overrides.dropdownItem11
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })();
                                      }
                                    )}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["phoneCodeInput", "value"]
                                    )}
                                    onSearch={generateStateOnChangeProp(
                                      $state,
                                      ["phoneCodeInput", "searchValue"]
                                    )}
                                    placeholder={"Seleccionar..."}
                                    ref={ref => {
                                      $refs["phoneCodeInput"] = ref;
                                    }}
                                    searchValue={generateStateValueProp(
                                      $state,
                                      ["phoneCodeInput", "searchValue"]
                                    )}
                                    searchable={false}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "phoneCodeInput",
                                      "value"
                                    ])}
                                    valueContent={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__gfQpb
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state.phoneCodeInput.value
                                                .flag;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    }
                                  />

                                  <Input
                                    data-plasmic-name={"phoneNumberInput"}
                                    data-plasmic-override={
                                      overrides.phoneNumberInput
                                    }
                                    allowClear={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.phoneNumberInput
                                    )}
                                    debounce={0}
                                    disabled={false}
                                    error={(() => {
                                      try {
                                        return $state.phone.error;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    leftIcon={
                                      <DataCtxReader__>
                                        {$ctx => (
                                          <Icon
                                            className={classNames(
                                              "__wab_instance",
                                              sty.icon__vSex9
                                            )}
                                            color={"#868E96"}
                                            icon={"DeviceMobileSpeaker"}
                                            size={16}
                                            variant={"regular"}
                                          />
                                        )}
                                      </DataCtxReader__>
                                    }
                                    mask={"99 9999 9999"}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["phoneNumberInput", "value"]
                                    )}
                                    placeholder={"33 9999 9999"}
                                    rightIcon={null}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "phoneNumberInput",
                                      "value"
                                    ])}
                                    variant={"outlined"}
                                  />
                                </Stack__>
                              }
                              error={generateStateValueProp($state, [
                                "phone",
                                "error"
                              ])}
                              label={"Tel\u00e9fono Celular"}
                              name={``}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "phone",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["phone"] = ref;
                              }}
                            />

                            <FormField
                              data-plasmic-name={"job"}
                              data-plasmic-override={overrides.job}
                              className={classNames("__wab_instance", sty.job)}
                              content={
                                <Input
                                  data-plasmic-name={"jobInput"}
                                  data-plasmic-override={overrides.jobInput}
                                  allowClear={false}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.jobInput
                                  )}
                                  debounce={0}
                                  disabled={false}
                                  leftIcon={null}
                                  onChange={generateStateOnChangeProp($state, [
                                    "jobInput",
                                    "value"
                                  ])}
                                  placeholder={"Director de Compras"}
                                  rightIcon={null}
                                  size={"middle"}
                                  value={generateStateValueProp($state, [
                                    "jobInput",
                                    "value"
                                  ])}
                                  variant={"outlined"}
                                />
                              }
                              error={generateStateValueProp($state, [
                                "job",
                                "error"
                              ])}
                              label={"Puesto"}
                              name={``}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "job",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["job"] = ref;
                              }}
                            />
                          </Stack__>
                        }
                        loading={generateStateValueProp($state, [
                          "contactForm",
                          "loading"
                        ])}
                        onLoadingChange={generateStateOnChangeProp($state, [
                          "contactForm",
                          "loading"
                        ])}
                        onSubmit={async () => {
                          const $steps = {};
                          $steps["validateForm"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      const name = $state.nameInput.value;
                                      const email = $state.emailInput.value;
                                      const phoneNumber =
                                        $state.phoneNumberInput.value;
                                      let isValid = true;
                                      if (!name) {
                                        $refs.name.setFieldError(
                                          "Ingresa el nombre del contacto"
                                        );
                                        isValid = false;
                                      }
                                      if (email && !$$.validateEmail(email)) {
                                        $refs.email.setFieldError(
                                          "Ingresa un correo electrónico válido"
                                        );
                                        isValid = false;
                                      }
                                      if (
                                        phoneNumber &&
                                        !$$.validatePhone(phoneNumber)
                                      ) {
                                        $refs.phone.setFieldError(
                                          "Ingresa un teléfono válido"
                                        );
                                        isValid = false;
                                      }
                                      return isValid;
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["validateForm"] != null &&
                            typeof $steps["validateForm"] === "object" &&
                            typeof $steps["validateForm"].then === "function"
                          ) {
                            $steps["validateForm"] = await $steps[
                              "validateForm"
                            ];
                          }
                          $steps["postRequest"] =
                            $steps.validateForm && !$state.modals.contact.data
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "nuXvvBTSGXM93PqWnV14Lf",
                                      opId: "27dfe945-afcc-48b7-90f5-7aa16b5fbd42",
                                      userArgs: {
                                        path: [
                                          `insiders/leads/${$ctx.params.uuid}`
                                        ],

                                        headers: [`Bearer ${$ctx.token}`],
                                        body: [
                                          (() => {
                                            const name = $state.nameInput.value;
                                            const middleName =
                                              $state.middleNameInput.value;
                                            const lastName =
                                              $state.lastNameInput.value;
                                            const email =
                                              $state.emailInput.value;
                                            const phoneCode =
                                              $state.phoneCodeInput.value.value;
                                            const phoneNumber =
                                              $state.phoneNumberInput.value;
                                            const job = $state.jobInput.value;
                                            const currentInsiders =
                                              $queries.findOneLead.data.response
                                                .insiders.length;
                                            return {
                                              completeName: {
                                                name,
                                                middleName,
                                                lastName
                                              },
                                              isPrimary:
                                                currentInsiders === 0
                                                  ? true
                                                  : false,
                                              email,
                                              job,
                                              phone: {
                                                code: phoneNumber
                                                  ? phoneCode
                                                  : undefined,
                                                number: phoneNumber
                                              }
                                            };
                                          })()
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "379c0ad1-b913-4047-9490-57a06c314b86"
                                      ],

                                      roleId: null
                                    },
                                    continueOnError: true
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["postRequest"] != null &&
                            typeof $steps["postRequest"] === "object" &&
                            typeof $steps["postRequest"].then === "function"
                          ) {
                            $steps["postRequest"] = await $steps["postRequest"];
                          }
                          $steps["putRequest"] =
                            $steps.validateForm && $state.modals.contact.data
                              ? (() => {
                                  const actionArgs = {
                                    continueOnError: true,
                                    dataOp: {
                                      sourceId: "nuXvvBTSGXM93PqWnV14Lf",
                                      opId: "1517eaf1-371b-4ff0-b5a8-2dc44e894bfb",
                                      userArgs: {
                                        path: [
                                          `insiders/leads/${$ctx.params.uuid}/${$state.modals.contact.data?.uuid}`
                                        ],

                                        headers: [`Bearer ${$ctx.token}`],
                                        body: [
                                          (() => {
                                            const name = $state.nameInput.value;
                                            const middleName =
                                              $state.middleNameInput.value;
                                            const lastName =
                                              $state.lastNameInput.value;
                                            const email =
                                              $state.emailInput.value;
                                            const phoneCode =
                                              $state.phoneCodeInput.value.value;
                                            const phoneNumber =
                                              $state.phoneNumberInput.value;
                                            const job = $state.jobInput.value;
                                            return {
                                              completeName: {
                                                name,
                                                middleName,
                                                lastName
                                              },
                                              email,
                                              job,
                                              phone: {
                                                code: phoneNumber
                                                  ? phoneCode
                                                  : undefined,
                                                number: phoneNumber
                                              }
                                            };
                                          })()
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [
                                        "379c0ad1-b913-4047-9490-57a06c314b86"
                                      ],

                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["putRequest"] != null &&
                            typeof $steps["putRequest"] === "object" &&
                            typeof $steps["putRequest"].then === "function"
                          ) {
                            $steps["putRequest"] = await $steps["putRequest"];
                          }
                          $steps["handleResponse"] =
                            $steps.postRequest || $steps.putRequest
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        const isUpdate =
                                          $state.modals.contact.data;
                                        const isSuccess = isUpdate
                                          ? $steps.putRequest.data
                                          : $steps.postRequest.data;
                                        if (isSuccess) {
                                          $state.modals.contact.opened = false;
                                          $state.modals.contact.data = null;
                                          $$.showNotification(
                                            isUpdate
                                              ? "Contacto Actualizado Correctamente"
                                              : "Contacto Creado Correctamente",
                                            { type: "success" }
                                          );
                                          return;
                                        }
                                        return $$.showNotification(
                                          "Ocurrió un Error Desconocido",
                                          { type: "error" }
                                        );
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["handleResponse"] != null &&
                            typeof $steps["handleResponse"] === "object" &&
                            typeof $steps["handleResponse"].then === "function"
                          ) {
                            $steps["handleResponse"] = await $steps[
                              "handleResponse"
                            ];
                          }
                        }}
                        ref={ref => {
                          $refs["contactForm"] = ref;
                        }}
                      />
                    </Stack__>
                  }
                  mask={true}
                  maskClosable={true}
                  okText={(() => {
                    try {
                      return (() => {
                        const isUpdated = $state.modals.contact.data;
                        return isUpdated ? "Guardar Cambios" : "Crear Contacto";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onCancel={async () => {
                    const $steps = {};
                    $steps["closeModal"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modals", "contact", "opened"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["closeModal"] != null &&
                      typeof $steps["closeModal"] === "object" &&
                      typeof $steps["closeModal"].then === "function"
                    ) {
                      $steps["closeModal"] = await $steps["closeModal"];
                    }
                    $steps["cleanData"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modals", "contact", "data"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["cleanData"] != null &&
                      typeof $steps["cleanData"] === "object" &&
                      typeof $steps["cleanData"].then === "function"
                    ) {
                      $steps["cleanData"] = await $steps["cleanData"];
                    }
                  }}
                  onClose={async () => {
                    const $steps = {};
                    $steps["cleanData"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["modals", "contact", "data"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["cleanData"] != null &&
                      typeof $steps["cleanData"] === "object" &&
                      typeof $steps["cleanData"].then === "function"
                    ) {
                      $steps["cleanData"] = await $steps["cleanData"];
                    }
                  }}
                  onOk={async () => {
                    const $steps = {};
                    $steps["submitForm"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return $refs.contactForm.submitForm();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["submitForm"] != null &&
                      typeof $steps["submitForm"] === "object" &&
                      typeof $steps["submitForm"].then === "function"
                    ) {
                      $steps["submitForm"] = await $steps["submitForm"];
                    }
                  }}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "contactModal",
                    "open"
                  ])}
                  open={generateStateValueProp($state, [
                    "contactModal",
                    "open"
                  ])}
                  title={(() => {
                    try {
                      return (() => {
                        const isUpdated = $state.modals.contact.data;
                        return isUpdated ? "Editar Contacto" : "Nuevo Contacto";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  width={"500px"}
                />

                <Confirmation
                  data-plasmic-name={"deleteContactConfirmation"}
                  data-plasmic-override={overrides.deleteContactConfirmation}
                  className={classNames(
                    "__wab_instance",
                    sty.deleteContactConfirmation
                  )}
                  description={
                    "Si eliminas el contacto no podr\u00e1s deshacer esta acci\u00f3n m\u00e1s adelante. Procede solo si est\u00e1s seguro de querer realizar esta acci\u00f3n."
                  }
                  loading={(() => {
                    try {
                      return $state.loading.deleteContact;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  okText={"Si, Eliminar"}
                  onCancel={async () => {
                    const $steps = {};
                    $steps["closeModal"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: [
                                "confirmations",
                                "deleteContact",
                                "opened"
                              ]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["closeModal"] != null &&
                      typeof $steps["closeModal"] === "object" &&
                      typeof $steps["closeModal"].then === "function"
                    ) {
                      $steps["closeModal"] = await $steps["closeModal"];
                    }
                  }}
                  onOk={async () => {
                    const $steps = {};
                    $steps["setLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading", "deleteContact"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["setLoading"] != null &&
                      typeof $steps["setLoading"] === "object" &&
                      typeof $steps["setLoading"].then === "function"
                    ) {
                      $steps["setLoading"] = await $steps["setLoading"];
                    }
                    $steps["deleteRequest"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "nuXvvBTSGXM93PqWnV14Lf",
                              opId: "738c7465-e4db-4a3d-a402-4d1e277fd559",
                              userArgs: {
                                path: [
                                  `insiders/leads/${$ctx.params.uuid}/${$state.confirmations.deleteContact.data.uuid}`
                                ],

                                headers: [`Bearer ${$ctx.token}`]
                              },
                              cacheKey: null,
                              invalidatedKeys: [
                                "379c0ad1-b913-4047-9490-57a06c314b86"
                              ],

                              roleId: null
                            },
                            continueOnError: true
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["deleteRequest"] != null &&
                      typeof $steps["deleteRequest"] === "object" &&
                      typeof $steps["deleteRequest"].then === "function"
                    ) {
                      $steps["deleteRequest"] = await $steps["deleteRequest"];
                    }
                    $steps["handleResponse"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.confirmations.deleteContact.opened =
                                  false;
                                $state.loading.deleteContact = false;
                                return $$.showNotification(
                                  "Contacto Eliminado Correctamente",
                                  { type: "success" }
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["handleResponse"] != null &&
                      typeof $steps["handleResponse"] === "object" &&
                      typeof $steps["handleResponse"].then === "function"
                    ) {
                      $steps["handleResponse"] = await $steps["handleResponse"];
                    }
                  }}
                  open={(() => {
                    try {
                      return $state.confirmations.deleteContact.opened;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  title={"Eliminar Contacto"}
                  type={"danger"}
                />
              </Stack__>
            }
            showHeader={false}
            showTrigger={false}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  mainSection: [
    "mainSection",
    "appShell",
    "content",
    "topBar",
    "returnButton",
    "dropdown",
    "menuButton",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4",
    "card",
    "container",
    "leftColumn",
    "mapPlaceholder",
    "mapOverlay",
    "nameContainer",
    "avatarSkeleton",
    "nameSkeleton2",
    "dateSkeleton",
    "skeletonContainer",
    "metas",
    "container2",
    "container10",
    "container11",
    "container12",
    "container6",
    "rate",
    "container3",
    "responsible",
    "userSelector",
    "dropdownItem5",
    "container4",
    "group",
    "groupSelector",
    "dropdownItem6",
    "container5",
    "source",
    "sourceSelector",
    "dropdownItem8",
    "img",
    "container8",
    "tagsWrapper2",
    "tags",
    "tag",
    "dropdownItem9",
    "contacts",
    "container7",
    "menuButton2",
    "contactItem",
    "text",
    "mainIndicator",
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16",
    "emptyData",
    "rightColumn",
    "top",
    "tabs",
    "tab",
    "tab2",
    "tab3",
    "tab4",
    "tab5",
    "tab6",
    "contactModal",
    "modalContent",
    "contactForm",
    "name",
    "nameInput",
    "middleName",
    "middleNameInput",
    "lastName",
    "lastNameInput",
    "email",
    "emailInput",
    "phone",
    "phoneCodeInput",
    "dropdownItem11",
    "phoneNumberInput",
    "job",
    "jobInput",
    "deleteContactConfirmation"
  ],

  appShell: [
    "appShell",
    "content",
    "topBar",
    "returnButton",
    "dropdown",
    "menuButton",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4",
    "card",
    "container",
    "leftColumn",
    "mapPlaceholder",
    "mapOverlay",
    "nameContainer",
    "avatarSkeleton",
    "nameSkeleton2",
    "dateSkeleton",
    "skeletonContainer",
    "metas",
    "container2",
    "container10",
    "container11",
    "container12",
    "container6",
    "rate",
    "container3",
    "responsible",
    "userSelector",
    "dropdownItem5",
    "container4",
    "group",
    "groupSelector",
    "dropdownItem6",
    "container5",
    "source",
    "sourceSelector",
    "dropdownItem8",
    "img",
    "container8",
    "tagsWrapper2",
    "tags",
    "tag",
    "dropdownItem9",
    "contacts",
    "container7",
    "menuButton2",
    "contactItem",
    "text",
    "mainIndicator",
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16",
    "emptyData",
    "rightColumn",
    "top",
    "tabs",
    "tab",
    "tab2",
    "tab3",
    "tab4",
    "tab5",
    "tab6",
    "contactModal",
    "modalContent",
    "contactForm",
    "name",
    "nameInput",
    "middleName",
    "middleNameInput",
    "lastName",
    "lastNameInput",
    "email",
    "emailInput",
    "phone",
    "phoneCodeInput",
    "dropdownItem11",
    "phoneNumberInput",
    "job",
    "jobInput",
    "deleteContactConfirmation"
  ],

  content: [
    "content",
    "topBar",
    "returnButton",
    "dropdown",
    "menuButton",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4",
    "card",
    "container",
    "leftColumn",
    "mapPlaceholder",
    "mapOverlay",
    "nameContainer",
    "avatarSkeleton",
    "nameSkeleton2",
    "dateSkeleton",
    "skeletonContainer",
    "metas",
    "container2",
    "container10",
    "container11",
    "container12",
    "container6",
    "rate",
    "container3",
    "responsible",
    "userSelector",
    "dropdownItem5",
    "container4",
    "group",
    "groupSelector",
    "dropdownItem6",
    "container5",
    "source",
    "sourceSelector",
    "dropdownItem8",
    "img",
    "container8",
    "tagsWrapper2",
    "tags",
    "tag",
    "dropdownItem9",
    "contacts",
    "container7",
    "menuButton2",
    "contactItem",
    "text",
    "mainIndicator",
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16",
    "emptyData",
    "rightColumn",
    "top",
    "tabs",
    "tab",
    "tab2",
    "tab3",
    "tab4",
    "tab5",
    "tab6",
    "contactModal",
    "modalContent",
    "contactForm",
    "name",
    "nameInput",
    "middleName",
    "middleNameInput",
    "lastName",
    "lastNameInput",
    "email",
    "emailInput",
    "phone",
    "phoneCodeInput",
    "dropdownItem11",
    "phoneNumberInput",
    "job",
    "jobInput",
    "deleteContactConfirmation"
  ],

  topBar: [
    "topBar",
    "returnButton",
    "dropdown",
    "menuButton",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4"
  ],

  returnButton: ["returnButton"],
  dropdown: [
    "dropdown",
    "menuButton",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4"
  ],

  menuButton: ["menuButton"],
  dropdownItem: ["dropdownItem"],
  dropdownItem2: ["dropdownItem2"],
  dropdownItem3: ["dropdownItem3"],
  dropdownItem4: ["dropdownItem4"],
  card: [
    "card",
    "container",
    "leftColumn",
    "mapPlaceholder",
    "mapOverlay",
    "nameContainer",
    "avatarSkeleton",
    "nameSkeleton2",
    "dateSkeleton",
    "skeletonContainer",
    "metas",
    "container2",
    "container10",
    "container11",
    "container12",
    "container6",
    "rate",
    "container3",
    "responsible",
    "userSelector",
    "dropdownItem5",
    "container4",
    "group",
    "groupSelector",
    "dropdownItem6",
    "container5",
    "source",
    "sourceSelector",
    "dropdownItem8",
    "img",
    "container8",
    "tagsWrapper2",
    "tags",
    "tag",
    "dropdownItem9",
    "contacts",
    "container7",
    "menuButton2",
    "contactItem",
    "text",
    "mainIndicator",
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16",
    "emptyData",
    "rightColumn",
    "top",
    "tabs",
    "tab",
    "tab2",
    "tab3",
    "tab4",
    "tab5",
    "tab6"
  ],

  container: [
    "container",
    "leftColumn",
    "mapPlaceholder",
    "mapOverlay",
    "nameContainer",
    "avatarSkeleton",
    "nameSkeleton2",
    "dateSkeleton",
    "skeletonContainer",
    "metas",
    "container2",
    "container10",
    "container11",
    "container12",
    "container6",
    "rate",
    "container3",
    "responsible",
    "userSelector",
    "dropdownItem5",
    "container4",
    "group",
    "groupSelector",
    "dropdownItem6",
    "container5",
    "source",
    "sourceSelector",
    "dropdownItem8",
    "img",
    "container8",
    "tagsWrapper2",
    "tags",
    "tag",
    "dropdownItem9",
    "contacts",
    "container7",
    "menuButton2",
    "contactItem",
    "text",
    "mainIndicator",
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16",
    "emptyData",
    "rightColumn",
    "top",
    "tabs",
    "tab",
    "tab2",
    "tab3",
    "tab4",
    "tab5",
    "tab6"
  ],

  leftColumn: [
    "leftColumn",
    "mapPlaceholder",
    "mapOverlay",
    "nameContainer",
    "avatarSkeleton",
    "nameSkeleton2",
    "dateSkeleton",
    "skeletonContainer",
    "metas",
    "container2",
    "container10",
    "container11",
    "container12",
    "container6",
    "rate",
    "container3",
    "responsible",
    "userSelector",
    "dropdownItem5",
    "container4",
    "group",
    "groupSelector",
    "dropdownItem6",
    "container5",
    "source",
    "sourceSelector",
    "dropdownItem8",
    "img",
    "container8",
    "tagsWrapper2",
    "tags",
    "tag",
    "dropdownItem9",
    "contacts",
    "container7",
    "menuButton2",
    "contactItem",
    "text",
    "mainIndicator",
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16",
    "emptyData"
  ],

  mapPlaceholder: ["mapPlaceholder"],
  mapOverlay: ["mapOverlay"],
  nameContainer: [
    "nameContainer",
    "avatarSkeleton",
    "nameSkeleton2",
    "dateSkeleton"
  ],

  avatarSkeleton: ["avatarSkeleton"],
  nameSkeleton2: ["nameSkeleton2"],
  dateSkeleton: ["dateSkeleton"],
  skeletonContainer: ["skeletonContainer"],
  metas: [
    "metas",
    "container2",
    "container10",
    "container11",
    "container12",
    "container6",
    "rate",
    "container3",
    "responsible",
    "userSelector",
    "dropdownItem5",
    "container4",
    "group",
    "groupSelector",
    "dropdownItem6",
    "container5",
    "source",
    "sourceSelector",
    "dropdownItem8",
    "img",
    "container8",
    "tagsWrapper2",
    "tags",
    "tag",
    "dropdownItem9"
  ],

  container2: ["container2"],
  container10: ["container10"],
  container11: ["container11"],
  container12: ["container12"],
  container6: ["container6", "rate"],
  rate: ["rate"],
  container3: ["container3", "responsible", "userSelector", "dropdownItem5"],
  responsible: ["responsible", "userSelector", "dropdownItem5"],
  userSelector: ["userSelector"],
  dropdownItem5: ["dropdownItem5"],
  container4: ["container4", "group", "groupSelector", "dropdownItem6"],
  group: ["group", "groupSelector", "dropdownItem6"],
  groupSelector: ["groupSelector"],
  dropdownItem6: ["dropdownItem6"],
  container5: [
    "container5",
    "source",
    "sourceSelector",
    "dropdownItem8",
    "img"
  ],

  source: ["source", "sourceSelector", "dropdownItem8", "img"],
  sourceSelector: ["sourceSelector"],
  dropdownItem8: ["dropdownItem8", "img"],
  img: ["img"],
  container8: ["container8", "tagsWrapper2", "tags", "tag", "dropdownItem9"],
  tagsWrapper2: ["tagsWrapper2"],
  tags: ["tags", "tag", "dropdownItem9"],
  tag: ["tag"],
  dropdownItem9: ["dropdownItem9"],
  contacts: [
    "contacts",
    "container7",
    "menuButton2",
    "contactItem",
    "text",
    "mainIndicator",
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16",
    "emptyData"
  ],

  container7: ["container7", "menuButton2"],
  menuButton2: ["menuButton2"],
  contactItem: [
    "contactItem",
    "text",
    "mainIndicator",
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16"
  ],

  text: ["text"],
  mainIndicator: ["mainIndicator"],
  dropdown2: [
    "dropdown2",
    "menuButton3",
    "dropdownItem7",
    "dropdownItem10",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem15",
    "dropdownItem12",
    "dropdownItem16"
  ],

  menuButton3: ["menuButton3"],
  dropdownItem7: ["dropdownItem7"],
  dropdownItem10: ["dropdownItem10"],
  dropdownItem13: ["dropdownItem13"],
  dropdownItem14: ["dropdownItem14"],
  dropdownItem15: ["dropdownItem15"],
  dropdownItem12: ["dropdownItem12"],
  dropdownItem16: ["dropdownItem16"],
  emptyData: ["emptyData"],
  rightColumn: [
    "rightColumn",
    "top",
    "tabs",
    "tab",
    "tab2",
    "tab3",
    "tab4",
    "tab5",
    "tab6"
  ],

  top: ["top", "tabs", "tab", "tab2", "tab3", "tab4", "tab5", "tab6"],
  tabs: ["tabs", "tab", "tab2", "tab3", "tab4", "tab5", "tab6"],
  tab: ["tab"],
  tab2: ["tab2"],
  tab3: ["tab3"],
  tab4: ["tab4"],
  tab5: ["tab5"],
  tab6: ["tab6"],
  contactModal: [
    "contactModal",
    "modalContent",
    "contactForm",
    "name",
    "nameInput",
    "middleName",
    "middleNameInput",
    "lastName",
    "lastNameInput",
    "email",
    "emailInput",
    "phone",
    "phoneCodeInput",
    "dropdownItem11",
    "phoneNumberInput",
    "job",
    "jobInput"
  ],

  modalContent: [
    "modalContent",
    "contactForm",
    "name",
    "nameInput",
    "middleName",
    "middleNameInput",
    "lastName",
    "lastNameInput",
    "email",
    "emailInput",
    "phone",
    "phoneCodeInput",
    "dropdownItem11",
    "phoneNumberInput",
    "job",
    "jobInput"
  ],

  contactForm: [
    "contactForm",
    "name",
    "nameInput",
    "middleName",
    "middleNameInput",
    "lastName",
    "lastNameInput",
    "email",
    "emailInput",
    "phone",
    "phoneCodeInput",
    "dropdownItem11",
    "phoneNumberInput",
    "job",
    "jobInput"
  ],

  name: ["name", "nameInput"],
  nameInput: ["nameInput"],
  middleName: ["middleName", "middleNameInput"],
  middleNameInput: ["middleNameInput"],
  lastName: ["lastName", "lastNameInput"],
  lastNameInput: ["lastNameInput"],
  email: ["email", "emailInput"],
  emailInput: ["emailInput"],
  phone: ["phone", "phoneCodeInput", "dropdownItem11", "phoneNumberInput"],
  phoneCodeInput: ["phoneCodeInput", "dropdownItem11"],
  dropdownItem11: ["dropdownItem11"],
  phoneNumberInput: ["phoneNumberInput"],
  job: ["job", "jobInput"],
  jobInput: ["jobInput"],
  deleteContactConfirmation: ["deleteContactConfirmation"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCrmExpedienteProspecto__ArgProps,
          internalVariantPropNames: PlasmicCrmExpedienteProspecto__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCrmExpedienteProspecto__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicCrmExpedienteProspecto";
  } else {
    func.displayName = `PlasmicCrmExpedienteProspecto.${nodeName}`;
  }
  return func;
}

export const PlasmicCrmExpedienteProspecto = Object.assign(
  // Top-level PlasmicCrmExpedienteProspecto renders the root element
  makeNodeComponent("mainSection"),
  {
    // Helper components rendering sub-elements
    appShell: makeNodeComponent("appShell"),
    content: makeNodeComponent("content"),
    topBar: makeNodeComponent("topBar"),
    returnButton: makeNodeComponent("returnButton"),
    dropdown: makeNodeComponent("dropdown"),
    menuButton: makeNodeComponent("menuButton"),
    dropdownItem: makeNodeComponent("dropdownItem"),
    dropdownItem2: makeNodeComponent("dropdownItem2"),
    dropdownItem3: makeNodeComponent("dropdownItem3"),
    dropdownItem4: makeNodeComponent("dropdownItem4"),
    card: makeNodeComponent("card"),
    container: makeNodeComponent("container"),
    leftColumn: makeNodeComponent("leftColumn"),
    mapPlaceholder: makeNodeComponent("mapPlaceholder"),
    mapOverlay: makeNodeComponent("mapOverlay"),
    nameContainer: makeNodeComponent("nameContainer"),
    avatarSkeleton: makeNodeComponent("avatarSkeleton"),
    nameSkeleton2: makeNodeComponent("nameSkeleton2"),
    dateSkeleton: makeNodeComponent("dateSkeleton"),
    skeletonContainer: makeNodeComponent("skeletonContainer"),
    metas: makeNodeComponent("metas"),
    container2: makeNodeComponent("container2"),
    container10: makeNodeComponent("container10"),
    container11: makeNodeComponent("container11"),
    container12: makeNodeComponent("container12"),
    container6: makeNodeComponent("container6"),
    rate: makeNodeComponent("rate"),
    container3: makeNodeComponent("container3"),
    responsible: makeNodeComponent("responsible"),
    userSelector: makeNodeComponent("userSelector"),
    dropdownItem5: makeNodeComponent("dropdownItem5"),
    container4: makeNodeComponent("container4"),
    group: makeNodeComponent("group"),
    groupSelector: makeNodeComponent("groupSelector"),
    dropdownItem6: makeNodeComponent("dropdownItem6"),
    container5: makeNodeComponent("container5"),
    source: makeNodeComponent("source"),
    sourceSelector: makeNodeComponent("sourceSelector"),
    dropdownItem8: makeNodeComponent("dropdownItem8"),
    img: makeNodeComponent("img"),
    container8: makeNodeComponent("container8"),
    tagsWrapper2: makeNodeComponent("tagsWrapper2"),
    tags: makeNodeComponent("tags"),
    tag: makeNodeComponent("tag"),
    dropdownItem9: makeNodeComponent("dropdownItem9"),
    contacts: makeNodeComponent("contacts"),
    container7: makeNodeComponent("container7"),
    menuButton2: makeNodeComponent("menuButton2"),
    contactItem: makeNodeComponent("contactItem"),
    text: makeNodeComponent("text"),
    mainIndicator: makeNodeComponent("mainIndicator"),
    dropdown2: makeNodeComponent("dropdown2"),
    menuButton3: makeNodeComponent("menuButton3"),
    dropdownItem7: makeNodeComponent("dropdownItem7"),
    dropdownItem10: makeNodeComponent("dropdownItem10"),
    dropdownItem13: makeNodeComponent("dropdownItem13"),
    dropdownItem14: makeNodeComponent("dropdownItem14"),
    dropdownItem15: makeNodeComponent("dropdownItem15"),
    dropdownItem12: makeNodeComponent("dropdownItem12"),
    dropdownItem16: makeNodeComponent("dropdownItem16"),
    emptyData: makeNodeComponent("emptyData"),
    rightColumn: makeNodeComponent("rightColumn"),
    top: makeNodeComponent("top"),
    tabs: makeNodeComponent("tabs"),
    tab: makeNodeComponent("tab"),
    tab2: makeNodeComponent("tab2"),
    tab3: makeNodeComponent("tab3"),
    tab4: makeNodeComponent("tab4"),
    tab5: makeNodeComponent("tab5"),
    tab6: makeNodeComponent("tab6"),
    contactModal: makeNodeComponent("contactModal"),
    modalContent: makeNodeComponent("modalContent"),
    contactForm: makeNodeComponent("contactForm"),
    _name: makeNodeComponent("name"),
    nameInput: makeNodeComponent("nameInput"),
    middleName: makeNodeComponent("middleName"),
    middleNameInput: makeNodeComponent("middleNameInput"),
    lastName: makeNodeComponent("lastName"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    email: makeNodeComponent("email"),
    emailInput: makeNodeComponent("emailInput"),
    phone: makeNodeComponent("phone"),
    phoneCodeInput: makeNodeComponent("phoneCodeInput"),
    dropdownItem11: makeNodeComponent("dropdownItem11"),
    phoneNumberInput: makeNodeComponent("phoneNumberInput"),
    job: makeNodeComponent("job"),
    jobInput: makeNodeComponent("jobInput"),
    deleteContactConfirmation: makeNodeComponent("deleteContactConfirmation"),
    // Metadata about props expected for PlasmicCrmExpedienteProspecto
    internalVariantProps: PlasmicCrmExpedienteProspecto__VariantProps,
    internalArgProps: PlasmicCrmExpedienteProspecto__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Expediente Prospecto",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCrmExpedienteProspecto;
/* prettier-ignore-end */
