// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: ejt2_Xh6tCty
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv, useGlobalActions } from "@plasmicapp/react-web/lib/host";
import { Layout } from "inprodi-design-system"; // plasmic-import: t7HRc84T7cvQ/codeComponent
import UserDropdown from "../../UserDropdown"; // plasmic-import: U0Wek-az3TXP/component
import { Dropdown } from "inprodi-design-system"; // plasmic-import: VR7TjCldSz8n/codeComponent
import { Icon } from "inprodi-design-system"; // plasmic-import: pr11DOeHp2wt/codeComponent
import { DropdownItem } from "inprodi-design-system"; // plasmic-import: TDTwnvMbhFuH/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicAppShell.module.css"; // plasmic-import: ejt2_Xh6tCty/css
import CrmsvgIcon from "./icons/PlasmicIcon__Crmsvg"; // plasmic-import: 8fi_Wz7yA_3h/icon
import FinancesvgIcon from "./icons/PlasmicIcon__Financesvg"; // plasmic-import: bWFXn-pt8Sv3/icon
import PurchasessvgIcon from "./icons/PlasmicIcon__Purchasessvg"; // plasmic-import: CDvAS2pq5jAo/icon
import OperationssvgIcon from "./icons/PlasmicIcon__Operationssvg"; // plasmic-import: jBdKoa71QH5x/icon
import StockssvgIcon from "./icons/PlasmicIcon__Stockssvg"; // plasmic-import: tv0nbhrPwX7f/icon
import HumanResourcessvgIcon from "./icons/PlasmicIcon__HumanResourcessvg"; // plasmic-import: UqAfT7OnJ-SL/icon
import LegalsvgIcon from "./icons/PlasmicIcon__Legalsvg"; // plasmic-import: HiwwD1Z8hfWs/icon
import crmsvg2QMvE00Xegeic from "./images/crmsvg2.svg"; // plasmic-import: QMvE00xegeic/picture

createPlasmicElementProxy;

export const PlasmicAppShell__VariantProps = new Array();

export const PlasmicAppShell__ArgProps = new Array(
  "pageTitle",
  "pageContent2",
  "preContent",
  "sufixContent",
  "showTrigger",
  "showHeader",
  "collapsed"
);

const $$ = {};

function PlasmicAppShell__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          pageTitle: "Page Title",
          showTrigger: true,
          showHeader: true,
          collapsed: false
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const $globalActions = useGlobalActions?.();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "layout.collapsed",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props["collapsed"]
      },
      {
        path: "crm.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.app === "crm";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "finances.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.app === "finance";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "purchases.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.app === "purchases";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "operations.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.app === "operations";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "stocks.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.app === "stocks";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "humanResources.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.app === "hr";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "legal.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.app === "legal";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "layout.selected",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "dropdown.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "dropdown"
      },
      {
        path: "dropdown.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "dropdown"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Layout
      data-plasmic-name={"layout"}
      data-plasmic-override={overrides.layout}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      backgroundColor={"#F5F5F5"}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.layout
      )}
      collapsed={generateStateValueProp($state, ["layout", "collapsed"])}
      content={renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.freeBox__gRcM7)} />
        ),

        value: args.pageContent2
      })}
      defaultSelectedKeys={(() => {
        try {
          return (() => {
            let __plasmic_ret = undefined;
            const url = $ctx.pagePath;
            const pathMappings = {
              dashboard: "dashboard",
              leads: "leads",
              customers: "customers",
              catalogue: "catalogue",
              estimates: "estimates",
              sales: "sales",
              teams: "teams",
              comissions: "comissions",
              goals: "goals",
              activity: "activity",
              reports: "reports"
            };
            for (const [key, value] of Object.entries(pathMappings)) {
              if (url.includes(key)) {
                return [value];
              }
            }
            return __plasmic_ret;
          })();
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      headerContent={
        <React.Fragment>
          {renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(projectcss.all, sty.freeBox__ksYjT)} />
            ),

            value: args.sufixContent
          })}
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7HpG
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.pageTitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          {renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(projectcss.all, sty.freeBox__ziYjx)} />
            ),

            value: args.preContent
          })}
          <Stack__
            as={"div"}
            data-plasmic-name={"rightContent"}
            data-plasmic-override={overrides.rightContent}
            hasGap={true}
            className={classNames(projectcss.all, sty.rightContent)}
          >
            <UserDropdown
              data-plasmic-name={"userDropdown"}
              data-plasmic-override={overrides.userDropdown}
              className={classNames("__wab_instance", sty.userDropdown)}
            />
          </Stack__>
        </React.Fragment>
      }
      menuItems={[
        { key: "dashboard", label: "Escritorio", icon: "SquaresFour" },
        {
          key: "contacts",
          label: "Contactos",
          type: "group",
          children: [
            { key: "leads", label: "Prospectos", icon: "UserFocus" },
            { key: "customers", label: "Clientes", icon: "Handshake" }
          ]
        },
        {
          key: "operation",
          label: "Operaci\u00f3n",
          type: "group",
          children: [
            { key: "catalogue", label: "Cat\u00e1logo", icon: "BookOpenText" },
            { key: "estimates", label: "Cotizaciones", icon: "Calculator" },
            { key: "sales", label: "Ventas", icon: "Invoice" }
          ]
        },
        {
          key: "management",
          label: "Gesti\u00f3n",
          type: "group",
          children: [
            { key: "teams", label: "Equipos", icon: "UsersThree" },
            { key: "comissions", label: "Comisiones", icon: "Percent" },
            { key: "goals", label: "Metas", icon: "Target" }
          ]
        },
        {
          key: "analisis",
          label: "An\u00e1lisis",
          type: "group",
          children: [
            { key: "activity", label: "Actividad", icon: "Pulse" },
            { key: "reports", label: "Reportes", icon: "Graph" }
          ]
        }
      ]}
      menuTopSection={
        <Dropdown
          data-plasmic-name={"dropdown"}
          data-plasmic-override={overrides.dropdown}
          className={classNames("__wab_instance", sty.dropdown)}
          closeOnSelect={true}
          isEmpty={false}
          loading={generateStateValueProp($state, ["dropdown", "loading"])}
          maxHeight={"200px"}
          menuContent={
            <React.Fragment>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.crm),
                  disabled: false,
                  isSelected: generateStateValueProp($state, [
                    "crm",
                    "isSelected"
                  ]),
                  label: "Comercial",
                  leftSection: (
                    <CrmsvgIcon
                      className={classNames(projectcss.all, sty.svg__tNWL)}
                      role={"img"}
                    />
                  ),

                  onClick: async () => {
                    const $steps = {};
                    $steps["setApp"] = true
                      ? (() => {
                          const actionArgs = { args: ["crm"] };
                          return $globalActions[
                            "AppGlobalContext.setApp"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["setApp"] != null &&
                      typeof $steps["setApp"] === "object" &&
                      typeof $steps["setApp"].then === "function"
                    ) {
                      $steps["setApp"] = await $steps["setApp"];
                    }
                  },
                  onIsSelectedChange: generateStateOnChangeProp($state, [
                    "crm",
                    "isSelected"
                  ]),
                  rightSection: null,
                  selectedPosition: "right"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "isSelected",
                      plasmicStateName: "crm.isSelected"
                    }
                  ],

                  [],
                  undefined ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "crm.isSelected",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (() => {
                              return $ctx.app === "crm";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],

                  []
                );
                return (
                  <DropdownItem
                    data-plasmic-name={"crm"}
                    data-plasmic-override={overrides.crm}
                    {...child$Props}
                  />
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.finances),
                  disabled: false,
                  isSelected: generateStateValueProp($state, [
                    "finances",
                    "isSelected"
                  ]),
                  label: "Finanzas",
                  leftSection: (
                    <FinancesvgIcon
                      className={classNames(projectcss.all, sty.svg__cHYr)}
                      role={"img"}
                    />
                  ),

                  onClick: async () => {
                    const $steps = {};
                    $steps["setApp"] = true
                      ? (() => {
                          const actionArgs = { args: ["finance"] };
                          return $globalActions[
                            "AppGlobalContext.setApp"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["setApp"] != null &&
                      typeof $steps["setApp"] === "object" &&
                      typeof $steps["setApp"].then === "function"
                    ) {
                      $steps["setApp"] = await $steps["setApp"];
                    }
                  },
                  onIsSelectedChange: generateStateOnChangeProp($state, [
                    "finances",
                    "isSelected"
                  ]),
                  rightSection: null,
                  selectedPosition: "right"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "isSelected",
                      plasmicStateName: "finances.isSelected"
                    }
                  ],

                  [],
                  undefined ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "finances.isSelected",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (() => {
                              return $ctx.app === "finance";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],

                  []
                );
                return (
                  <DropdownItem
                    data-plasmic-name={"finances"}
                    data-plasmic-override={overrides.finances}
                    {...child$Props}
                  />
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.purchases),
                  disabled: false,
                  isSelected: generateStateValueProp($state, [
                    "purchases",
                    "isSelected"
                  ]),
                  label: "Compras",
                  leftSection: (
                    <PurchasessvgIcon
                      className={classNames(projectcss.all, sty.svg__yiuZ4)}
                      role={"img"}
                    />
                  ),

                  onClick: async () => {
                    const $steps = {};
                    $steps["setApp"] = true
                      ? (() => {
                          const actionArgs = { args: ["purchases"] };
                          return $globalActions[
                            "AppGlobalContext.setApp"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["setApp"] != null &&
                      typeof $steps["setApp"] === "object" &&
                      typeof $steps["setApp"].then === "function"
                    ) {
                      $steps["setApp"] = await $steps["setApp"];
                    }
                  },
                  onIsSelectedChange: generateStateOnChangeProp($state, [
                    "purchases",
                    "isSelected"
                  ]),
                  rightSection: null,
                  selectedPosition: "right"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "isSelected",
                      plasmicStateName: "purchases.isSelected"
                    }
                  ],

                  [],
                  undefined ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "purchases.isSelected",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (() => {
                              return $ctx.app === "purchases";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],

                  []
                );
                return (
                  <DropdownItem
                    data-plasmic-name={"purchases"}
                    data-plasmic-override={overrides.purchases}
                    {...child$Props}
                  />
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.operations),
                  disabled: false,
                  isSelected: generateStateValueProp($state, [
                    "operations",
                    "isSelected"
                  ]),
                  label: "Operaciones",
                  leftSection: (
                    <OperationssvgIcon
                      className={classNames(projectcss.all, sty.svg__xusxk)}
                      role={"img"}
                    />
                  ),

                  onClick: async () => {
                    const $steps = {};
                    $steps["setApp"] = true
                      ? (() => {
                          const actionArgs = { args: ["operations"] };
                          return $globalActions[
                            "AppGlobalContext.setApp"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["setApp"] != null &&
                      typeof $steps["setApp"] === "object" &&
                      typeof $steps["setApp"].then === "function"
                    ) {
                      $steps["setApp"] = await $steps["setApp"];
                    }
                  },
                  onIsSelectedChange: generateStateOnChangeProp($state, [
                    "operations",
                    "isSelected"
                  ]),
                  rightSection: null,
                  selectedPosition: "right"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "isSelected",
                      plasmicStateName: "operations.isSelected"
                    }
                  ],

                  [],
                  undefined ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "operations.isSelected",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (() => {
                              return $ctx.app === "operations";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],

                  []
                );
                return (
                  <DropdownItem
                    data-plasmic-name={"operations"}
                    data-plasmic-override={overrides.operations}
                    {...child$Props}
                  />
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.stocks),
                  disabled: false,
                  isSelected: generateStateValueProp($state, [
                    "stocks",
                    "isSelected"
                  ]),
                  label: "Inventarios",
                  leftSection: (
                    <StockssvgIcon
                      className={classNames(projectcss.all, sty.svg__aQwlG)}
                      role={"img"}
                    />
                  ),

                  onClick: async () => {
                    const $steps = {};
                    $steps["setApp"] = true
                      ? (() => {
                          const actionArgs = { args: ["stocks"] };
                          return $globalActions[
                            "AppGlobalContext.setApp"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["setApp"] != null &&
                      typeof $steps["setApp"] === "object" &&
                      typeof $steps["setApp"].then === "function"
                    ) {
                      $steps["setApp"] = await $steps["setApp"];
                    }
                  },
                  onIsSelectedChange: generateStateOnChangeProp($state, [
                    "stocks",
                    "isSelected"
                  ]),
                  rightSection: null,
                  selectedPosition: "right"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "isSelected",
                      plasmicStateName: "stocks.isSelected"
                    }
                  ],

                  [],
                  undefined ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "stocks.isSelected",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (() => {
                              return $ctx.app === "stocks";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],

                  []
                );
                return (
                  <DropdownItem
                    data-plasmic-name={"stocks"}
                    data-plasmic-override={overrides.stocks}
                    {...child$Props}
                  />
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.humanResources),
                  disabled: false,
                  isSelected: generateStateValueProp($state, [
                    "humanResources",
                    "isSelected"
                  ]),
                  label: "Recursos Humanos",
                  leftSection: (
                    <HumanResourcessvgIcon
                      className={classNames(projectcss.all, sty.svg___9J7WO)}
                      role={"img"}
                    />
                  ),

                  onClick: async () => {
                    const $steps = {};
                    $steps["setApp"] = true
                      ? (() => {
                          const actionArgs = { args: ["hr"] };
                          return $globalActions[
                            "AppGlobalContext.setApp"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["setApp"] != null &&
                      typeof $steps["setApp"] === "object" &&
                      typeof $steps["setApp"].then === "function"
                    ) {
                      $steps["setApp"] = await $steps["setApp"];
                    }
                  },
                  onIsSelectedChange: generateStateOnChangeProp($state, [
                    "humanResources",
                    "isSelected"
                  ]),
                  rightSection: null,
                  selectedPosition: "right"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "isSelected",
                      plasmicStateName: "humanResources.isSelected"
                    }
                  ],

                  [],
                  undefined ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "humanResources.isSelected",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (() => {
                              return $ctx.app === "hr";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],

                  []
                );
                return (
                  <DropdownItem
                    data-plasmic-name={"humanResources"}
                    data-plasmic-override={overrides.humanResources}
                    {...child$Props}
                  />
                );
              })()}
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.legal),
                  disabled: false,
                  isSelected: generateStateValueProp($state, [
                    "legal",
                    "isSelected"
                  ]),
                  label: "Legal",
                  leftSection: (
                    <LegalsvgIcon
                      className={classNames(projectcss.all, sty.svg__h53OD)}
                      role={"img"}
                    />
                  ),

                  onClick: async () => {
                    const $steps = {};
                    $steps["setApp"] = true
                      ? (() => {
                          const actionArgs = { args: ["legal"] };
                          return $globalActions[
                            "AppGlobalContext.setApp"
                          ]?.apply(null, [...actionArgs.args]);
                        })()
                      : undefined;
                    if (
                      $steps["setApp"] != null &&
                      typeof $steps["setApp"] === "object" &&
                      typeof $steps["setApp"].then === "function"
                    ) {
                      $steps["setApp"] = await $steps["setApp"];
                    }
                  },
                  onIsSelectedChange: generateStateOnChangeProp($state, [
                    "legal",
                    "isSelected"
                  ]),
                  rightSection: null,
                  selectedPosition: "right"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "isSelected",
                      plasmicStateName: "legal.isSelected"
                    }
                  ],

                  [],
                  undefined ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "legal.isSelected",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return (() => {
                              return $ctx.app === "legal";
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],

                  []
                );
                return (
                  <DropdownItem
                    data-plasmic-name={"legal"}
                    data-plasmic-override={overrides.legal}
                    {...child$Props}
                  />
                );
              })()}
            </React.Fragment>
          }
          onLoadingChange={generateStateOnChangeProp($state, [
            "dropdown",
            "loading"
          ])}
          onSearch={generateStateOnChangeProp($state, [
            "dropdown",
            "searchValue"
          ])}
          placement={"bottomRight"}
          ref={ref => {
            $refs["dropdown"] = ref;
          }}
          searchValue={generateStateValueProp($state, [
            "dropdown",
            "searchValue"
          ])}
          searchable={false}
          trigger={"click"}
          triggerContent={
            (() => {
              try {
                return true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"selector"}
                data-plasmic-override={overrides.selector}
                hasGap={true}
                className={classNames(projectcss.all, sty.selector)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"24px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"24px"}
                  loading={"lazy"}
                  src={(() => {
                    try {
                      return (() => {
                        const currentApp = $ctx.app;
                        const appDictionary = {
                          crm: "https://site-assets.plasmic.app/7f3e3e44efcf50c29758edb592dadb4e.svg",
                          finance:
                            "https://site-assets.plasmic.app/000aa23a421c961cac49c1a1540be7bc.svg",
                          purchases:
                            "https://site-assets.plasmic.app/6c93000a3ba1d4ba96ff18ce43b2ba5b.svg",
                          operations:
                            "https://site-assets.plasmic.app/c3e3f0aab6b099bbfd60921f7d285b02.svg",
                          stocks:
                            "https://site-assets.plasmic.app/5a6324a209b0735cfa097270d188ac8f.svg",
                          hr: "https://site-assets.plasmic.app/68810c1e110bc0071fefc328b478f127.svg",
                          legal:
                            "https://site-assets.plasmic.app/c61cbcf627980ae8d2f158699156a7ab.svg"
                        };
                        return appDictionary[currentApp];
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return {
                          src: crmsvg2QMvE00Xegeic,
                          fullWidth: 150,
                          fullHeight: 150,
                          aspectRatio: 1
                        };
                      }
                      throw e;
                    }
                  })()}
                />

                {(() => {
                  try {
                    return (() => {
                      return !$state.layout.collapsed;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hBOt3
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            const currentApp = $ctx.app;
                            const appDictionary = {
                              crm: "Comercial",
                              finance: "Finanzas",
                              purchases: "Compras",
                              operations: "Operaciones",
                              stocks: "Inventarios",
                              hr: "Recursos Humanos",
                              legal: "Legal"
                            };
                            return appDictionary[currentApp];
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Comercial";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return !$state.layout.collapsed;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon
                    data-plasmic-name={"icon"}
                    data-plasmic-override={overrides.icon}
                    className={classNames("__wab_instance", sty.icon)}
                    icon={"CaretUpDown"}
                    size={14}
                    variant={"regular"}
                  />
                ) : null}
              </Stack__>
            ) : null
          }
          width={"258px"}
        />
      }
      onCollapse={generateStateOnChangeProp($state, ["layout", "collapsed"])}
      onSelect={async (...eventArgs) => {
        generateStateOnChangeProp($state, ["layout", "selected"]).apply(
          null,
          eventArgs
        );
        (async () => {
          const $steps = {};
          $steps["navigate"] = true
            ? (() => {
                const actionArgs = {
                  destination: (() => {
                    try {
                      return (() => {
                        let __plasmic_ret = undefined;
                        const selected = $state.layout.selected;
                        const keyMappings = {
                          dashboard: "/crm/dashboard",
                          leads: "/crm/contacts/leads",
                          customers: "/crm/contacts/customers",
                          catalogue: "/crm/catalogue"
                        };
                        for (const [key, value] of Object.entries(
                          keyMappings
                        )) {
                          if (selected === key) {
                            return value;
                          }
                        }
                        return __plasmic_ret;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    location.assign(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["navigate"] != null &&
            typeof $steps["navigate"] === "object" &&
            typeof $steps["navigate"].then === "function"
          ) {
            $steps["navigate"] = await $steps["navigate"];
          }
        }).apply(null, eventArgs);
      }}
      selected={generateStateValueProp($state, ["layout", "selected"])}
      showHeader={args.showHeader}
      showTrigger={args.showTrigger}
    />
  );
}

const PlasmicDescendants = {
  layout: [
    "layout",
    "rightContent",
    "userDropdown",
    "dropdown",
    "selector",
    "img",
    "icon",
    "crm",
    "finances",
    "purchases",
    "operations",
    "stocks",
    "humanResources",
    "legal"
  ],

  rightContent: ["rightContent", "userDropdown"],
  userDropdown: ["userDropdown"],
  dropdown: [
    "dropdown",
    "selector",
    "img",
    "icon",
    "crm",
    "finances",
    "purchases",
    "operations",
    "stocks",
    "humanResources",
    "legal"
  ],

  selector: ["selector", "img", "icon"],
  img: ["img"],
  icon: ["icon"],
  crm: ["crm"],
  finances: ["finances"],
  purchases: ["purchases"],
  operations: ["operations"],
  stocks: ["stocks"],
  humanResources: ["humanResources"],
  legal: ["legal"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAppShell__ArgProps,
          internalVariantPropNames: PlasmicAppShell__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAppShell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "layout") {
    func.displayName = "PlasmicAppShell";
  } else {
    func.displayName = `PlasmicAppShell.${nodeName}`;
  }
  return func;
}

export const PlasmicAppShell = Object.assign(
  // Top-level PlasmicAppShell renders the root element
  makeNodeComponent("layout"),
  {
    // Helper components rendering sub-elements
    rightContent: makeNodeComponent("rightContent"),
    userDropdown: makeNodeComponent("userDropdown"),
    dropdown: makeNodeComponent("dropdown"),
    selector: makeNodeComponent("selector"),
    img: makeNodeComponent("img"),
    icon: makeNodeComponent("icon"),
    crm: makeNodeComponent("crm"),
    finances: makeNodeComponent("finances"),
    purchases: makeNodeComponent("purchases"),
    operations: makeNodeComponent("operations"),
    stocks: makeNodeComponent("stocks"),
    humanResources: makeNodeComponent("humanResources"),
    legal: makeNodeComponent("legal"),
    // Metadata about props expected for PlasmicAppShell
    internalVariantProps: PlasmicAppShell__VariantProps,
    internalArgProps: PlasmicAppShell__ArgProps
  }
);

export default PlasmicAppShell;
/* prettier-ignore-end */
