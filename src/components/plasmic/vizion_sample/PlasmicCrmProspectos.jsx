// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: QSkz72uIMwAY
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  initializeCodeComponentStates,
  initializePlasmicStates,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import AppShell from "../../AppShell"; // plasmic-import: ejt2_Xh6tCty/component
import { Input } from "inprodi-design-system"; // plasmic-import: EYGCq8UmQ7qQ/codeComponent
import { Icon } from "inprodi-design-system"; // plasmic-import: pr11DOeHp2wt/codeComponent
import { Button } from "inprodi-design-system"; // plasmic-import: Umfyv_WzKjXA/codeComponent
import { Divider } from "inprodi-design-system"; // plasmic-import: wg1uLyOOWzxq/codeComponent
import EmptyData from "../../EmptyData"; // plasmic-import: hMvFr8gCB8DJ/component
import { Stat } from "inprodi-design-system"; // plasmic-import: pm5dZskVt5uq/codeComponent
import { AdvancedTable } from "inprodi-design-system"; // plasmic-import: aVtWn2m7A6tJ/codeComponent
import { AdvancedTableColumn } from "inprodi-design-system"; // plasmic-import: uAArs5Ul8A-r/codeComponent
import { AdvancedTableCell } from "inprodi-design-system"; // plasmic-import: qd17uE_1cLQv/codeComponent
import { Avatar } from "inprodi-design-system"; // plasmic-import: LHFWbCJrjoSX/codeComponent
import { Dropdown } from "inprodi-design-system"; // plasmic-import: VR7TjCldSz8n/codeComponent
import UserSelector from "../../UserSelector"; // plasmic-import: zYKS2FXDESZB/component
import { DropdownItem } from "inprodi-design-system"; // plasmic-import: TDTwnvMbhFuH/codeComponent
import { Rate } from "inprodi-design-system"; // plasmic-import: QSpBNk0IPN71/codeComponent
import IconSelector from "../../IconSelector"; // plasmic-import: 0Re2ao-UpkEe/component
import ImageSelector from "../../ImageSelector"; // plasmic-import: fRC85Ctx5Ezf/component
import { Progress } from "inprodi-design-system"; // plasmic-import: kcTHea5fgw23/codeComponent
import TagSelector from "../../TagSelector"; // plasmic-import: 3G-AeCF6EfiK/component
import { Drawer } from "inprodi-design-system"; // plasmic-import: pb2D6Adyf4Lf/codeComponent
import { Form } from "inprodi-design-system"; // plasmic-import: fVNNuSkHtA1W/codeComponent
import { Segmented } from "inprodi-design-system"; // plasmic-import: ouPqy9s_ZhM0/codeComponent
import { FormField } from "inprodi-design-system"; // plasmic-import: 8n4bi1KfTgdt/codeComponent
import { Select } from "inprodi-design-system"; // plasmic-import: 6migCzdJYTa1/codeComponent
import { Confirmation } from "inprodi-design-system"; // plasmic-import: 8sPy6N_cZled/codeComponent
import HeaderCounter from "../../HeaderCounter"; // plasmic-import: R-HR0MebKBYO/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicCrmProspectos.module.css"; // plasmic-import: QSkz72uIMwAY/css

createPlasmicElementProxy;

export const PlasmicCrmProspectos__VariantProps = new Array();

export const PlasmicCrmProspectos__ArgProps = new Array();

const $$ = {};

function PlasmicCrmProspectos__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "searchInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "rate[].value",
        type: "private",
        variableType: "number"
      },
      {
        path: "dropdownItem[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem2[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem3[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem4[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem5[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "responsibleDropdown[].loading",
        type: "private",
        variableType: "boolean",
        refName: "responsibleDropdown"
      },
      {
        path: "groupDropdown[].loading",
        type: "private",
        variableType: "boolean",
        refName: "groupDropdown"
      },
      {
        path: "tagDropdown[].loading",
        type: "private",
        variableType: "boolean",
        refName: "tagDropdown"
      },
      {
        path: "dropdown2[].loading",
        type: "private",
        variableType: "boolean",
        refName: "dropdown2"
      },
      {
        path: "dropdownItem6[][].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "responsibleDropdown[].searchValue",
        type: "private",
        variableType: "text",
        refName: "responsibleDropdown"
      },
      {
        path: "groupDropdown[].searchValue",
        type: "private",
        variableType: "text",
        refName: "groupDropdown"
      },
      {
        path: "tagDropdown[].searchValue",
        type: "private",
        variableType: "text",
        refName: "tagDropdown"
      },
      {
        path: "dropdown2[].searchValue",
        type: "private",
        variableType: "text",
        refName: "dropdown2"
      },
      {
        path: "search",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          users: null,
          groups: null,
          sources: null,
          tags: null,
          countries: null
        })
      },
      {
        path: "groupSelector[].value",
        type: "private",
        variableType: "object"
      },
      {
        path: "dropdownItem7[][].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dataTable",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          search: "",
          sort: { key: "finalName", type: "asc" },
          filters: []
        })
      },
      {
        path: "userSelector[].value",
        type: "private",
        variableType: "object"
      },
      {
        path: "sourceDropdown[].loading",
        type: "private",
        variableType: "boolean",
        refName: "sourceDropdown"
      },
      {
        path: "sourceDropdown[].searchValue",
        type: "private",
        variableType: "text",
        refName: "sourceDropdown"
      },
      {
        path: "dropdownItem8[][].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "sourceSelector[].value",
        type: "private",
        variableType: "object"
      },
      {
        path: "tagSelector[].value",
        type: "private",
        variableType: "array"
      },
      {
        path: "dropdownItem9[][].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "drawers",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          lead: { opened: false, data: null }
        })
      },
      {
        path: "loading",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          add: false,
          delete: false,
          toggle: false
        })
      },
      {
        path: "leadDrawer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.drawers.lead.opened;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadType.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { tradeName } = $state.drawers.lead.data ?? {};
                return tradeName ? "enterprise" : "particular";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "tradeName.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "tradeName"
      },
      {
        path: "tradeNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.drawers.lead.data?.tradeName ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadName.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadName"
      },
      {
        path: "leadNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.drawers.lead.data?.completeName?.name ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadMiddleName.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadMiddleName"
      },
      {
        path: "leadMiddleNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.drawers.lead.data?.completeName?.middleName ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadLastName.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadLastName"
      },
      {
        path: "leadLastNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.drawers.lead.data?.completeName?.lastName ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadEmail.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadEmail"
      },
      {
        path: "leadEmailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.drawers.lead.data?.email ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadCellphone.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadCellphone"
      },
      {
        path: "leadCellphoneInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { cellphone } = $state.drawers.lead.data ?? {};
                return cellphone?.number ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadPhone.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadPhone"
      },
      {
        path: "leadPhoneInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { phone } = $state.drawers.lead.data ?? {};
                return phone?.number ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadWebsite.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadWebsite"
      },
      {
        path: "leadWebsiteInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "leadAddress.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadAddress"
      },
      {
        path: "streetInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { mainAddress } = $state.drawers.lead.data ?? {};
                return mainAddress?.street ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "extInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { mainAddress } = $state.drawers.lead.data ?? {};
                return mainAddress?.extNumber ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "intInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { mainAddress } = $state.drawers.lead.data ?? {};
                return mainAddress?.intNumber ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "suburbInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { mainAddress } = $state.drawers.lead.data ?? {};
                return mainAddress?.suburb ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "cpInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { mainAddress } = $state.drawers.lead.data ?? {};
                return mainAddress?.cp ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "cityInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { mainAddress } = $state.drawers.lead.data ?? {};
                return mainAddress?.city ?? "";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "unknownStateInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "countryInput.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { mainAddress } = $state.drawers.lead.data ?? {};
                return {
                  label: mainAddress?.country ?? "México",
                  value: mainAddress?.country ?? "México",
                  flag: "\uD83C\uDDF2\uD83C\uDDFD"
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "countryInput"
      },
      {
        path: "countryInput.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "countryInput"
      },
      {
        path: "dropdownItem15[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "leadRate.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadRate"
      },
      {
        path: "leadRateInput.value",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { rating } = $state.drawers.lead.data ?? {};
                return rating;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "leadResponsible.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadResponsible"
      },
      {
        path: "leadResponsibleInput.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const user = $ctx.user;
                const { responsible } = $state.drawers.lead.data ?? {};
                if (!responsible?.uuid && $state.drawers.lead.data?.uuid) {
                  return null;
                }
                return {
                  label: responsible?.uuid
                    ? $$.parseName(responsible)
                    : $$.parseName(user),
                  value: responsible?.uuid ? responsible.uuid : user.uuid,
                  image: responsible?.uuid ? responsible.image : user.image
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "leadResponsibleInput"
      },
      {
        path: "leadResponsibleInput.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "leadResponsibleInput"
      },
      {
        path: "dropdownItem16[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "leadGroup.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadGroup"
      },
      {
        path: "leadGroupInput.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { group } = $state.drawers.lead.data ?? {};
                return {
                  label: group?.name,
                  value: group?.uuid,
                  icon: group?.icon,
                  color: group?.color
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "leadGroupInput"
      },
      {
        path: "leadGroupInput.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "leadGroupInput"
      },
      {
        path: "dropdownItem17[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "leadSource.error",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "",
        refName: "leadSource"
      },
      {
        path: "leadSourceInput.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { source } = $state.drawers.lead.data ?? {};
                return {
                  label: source?.name,
                  value: source?.uuid,
                  icon: source?.icon
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "leadSourceInput"
      },
      {
        path: "leadSourceInput.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "leadSourceInput"
      },
      {
        path: "dropdownItem18[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "leadForm.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "leadForm"
      },
      {
        path: "leadCellphoneCodeInput.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { phone } = $state.drawers.lead.data ?? {};
                return {
                  label: phone?.code ? phone.code : "+52",
                  value: phone?.code ? phone.code : "+52",
                  flag: "\uD83C\uDDF2\uD83C\uDDFD"
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "leadCellphoneCodeInput"
      },
      {
        path: "leadCellphoneCodeInput.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "leadCellphoneCodeInput"
      },
      {
        path: "leadPhoneCodeInput.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return {
                label: "+52",
                value: "+52",
                flag: "\uD83C\uDDF2\uD83C\uDDFD"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "leadPhoneCodeInput"
      },
      {
        path: "leadPhoneCodeInput.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "leadPhoneCodeInput"
      },
      {
        path: "dropdownItem10[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dropdownItem11[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "knownStateInput.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const { state } = $state.drawers.lead.data?.mainAddress ?? {};
                if (!state) return "";
                return {
                  label: state ?? "",
                  value: state ?? ""
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "knownStateInput"
      },
      {
        path: "knownStateInput.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "knownStateInput"
      },
      {
        path: "dropdownItem12[].isSelected",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "confirmations",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          delete: { opened: false, data: null },
          toggle: { opened: false, data: null }
        })
      },
      {
        path: "select.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const subsection = $state.subSection;
                const subsectionDictionary = {
                  all: "Todos",
                  active: "Activos",
                  inactive: "Inactivos"
                };
                return {
                  label: subsectionDictionary[subsection],
                  value: subsection
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        refName: "select"
      },
      {
        path: "select.searchValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "select"
      },
      {
        path: "subSection",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "active"
      },
      {
        path: "dropdownItem13.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.subSection === "all";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "dropdownItem14.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.subSection === "active";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "dropdownItem19.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.subSection === "inactive";
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })()
      },
      {
        path: "query",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "emptyData.size",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const new$Queries = {
    findManyLeads: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "86914df1-eeef-4f35-aa3f-9f2db713ea21",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`],
          params: [
            $state.dataTable.search,
            (() => {
              const { key, type } = $state.dataTable.sort;
              return `${key}:${type}`;
            })(),
            (() => {
              const subSection = $state.subSection;
              return subSection === "active";
            })()
          ]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "Leads";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.86914df1-eeef-4f35-aa3f-9f2db713ea21.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    searchUsers: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "fd76290d-18f0-4437-bfb0-0eee1851538d",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`],
          params: [$state.search.users ?? ""]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "Users";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.fd76290d-18f0-4437-bfb0-0eee1851538d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    searchGroups: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "96aff237-42a5-456e-871c-9fe400d0c312",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`],
          params: [$state.search.groups ?? ""]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "Groups";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.96aff237-42a5-456e-871c-9fe400d0c312.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    searchSources: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "9c0fb179-6c5b-49ff-9b72-039f63aeaee0",
        userArgs: {
          headers: [`Bearer ${$ctx.token}`],
          params: [$state.search.sources ?? ""]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "sources";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.9c0fb179-6c5b-49ff-9b72-039f63aeaee0.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    searchTags: usePlasmicDataOp(() => {
      return {
        sourceId: "nuXvvBTSGXM93PqWnV14Lf",
        opId: "e22cbb99-5299-44f0-834f-35f6959fbc92",
        userArgs: {
          params: [$state.search.tags ?? ""],
          headers: [`Bearer ${$ctx.token}`]
        },
        cacheKey: `plasmic.$.e22cbb99-5299-44f0-834f-35f6959fbc92.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    findCountries: usePlasmicDataOp(() => {
      return {
        sourceId: "rg7zzn1zFr3dquQauKJCRm",
        opId: "88d0138c-1f4a-483f-896d-268269a3b4cc",
        userArgs: {
          path: [
            (() => {
              const search = $state.search.countries;
              return search
                ? `translation/${search}?fields=name,flag,translations,idd`
                : "all?fields=name,flag,translations,idd";
            })()
          ]
        },
        cacheKey: `plasmic.$.88d0138c-1f4a-483f-896d-268269a3b4cc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mainSection"}
          data-plasmic-override={overrides.mainSection}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.mainSection,
            (() => {
              try {
                return (() => {
                  const drawers = $state.drawers;
                  const hasTrueValue = Object.values(drawers).some(
                    value => value.opened === true
                  );
                  return hasTrueValue && "opened-drawer";
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          )}
        >
          <AppShell
            data-plasmic-name={"appShell"}
            data-plasmic-override={overrides.appShell}
            className={classNames("__wab_instance", sty.appShell)}
            pageContent2={
              <div className={classNames(projectcss.all, sty.freeBox__fwWqq)}>
                <div
                  data-plasmic-name={"actionBar"}
                  data-plasmic-override={overrides.actionBar}
                  className={classNames(projectcss.all, sty.actionBar)}
                >
                  <Input
                    data-plasmic-name={"searchInput"}
                    data-plasmic-override={overrides.searchInput}
                    allowClear={false}
                    className={classNames("__wab_instance", sty.searchInput)}
                    debounce={500}
                    disabled={false}
                    leftIcon={
                      <DataCtxReader__>
                        {$ctx => (
                          <Icon
                            className={classNames(
                              "__wab_instance",
                              sty.icon___7IGjk
                            )}
                            color={"var(--token-YFIqRc19SnuM)"}
                            icon={"MagnifyingGlass"}
                            size={16}
                            variant={"regular"}
                          />
                        )}
                      </DataCtxReader__>
                    }
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "searchInput",
                        "value"
                      ]).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};
                        $steps["updateState"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["dataTable", "search"]
                                },
                                operation: 0,
                                value: $state.searchInput.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateState"] != null &&
                          typeof $steps["updateState"] === "object" &&
                          typeof $steps["updateState"].then === "function"
                        ) {
                          $steps["updateState"] = await $steps["updateState"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={"Buscar Prospectos..."}
                    rightIcon={null}
                    size={"middle"}
                    value={generateStateValueProp($state, [
                      "searchInput",
                      "value"
                    ])}
                    variant={"borderless"}
                  />

                  <Stack__
                    as={"div"}
                    data-plasmic-name={"rightSection"}
                    data-plasmic-override={overrides.rightSection}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rightSection)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"secondaryActions"}
                      data-plasmic-override={overrides.secondaryActions}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.secondaryActions,
                        "secondary_actions"
                      )}
                    >
                      <Button
                        block={false}
                        className={classNames(
                          "__wab_instance",
                          sty.button__uY8Qg
                        )}
                        danger={false}
                        disabled={false}
                        ghost={false}
                        icon={
                          <Icon
                            className={classNames(
                              "__wab_instance",
                              sty.icon__u4Cr
                            )}
                            icon={"Database"}
                            size={16}
                            variant={"regular"}
                          />
                        }
                        iconPosition={"start"}
                        isSubmit={false}
                        label={"Campos"}
                        loading={false}
                        size={"small"}
                        target={"_self"}
                        type={"text"}
                      />

                      <Button
                        block={false}
                        className={classNames(
                          "__wab_instance",
                          sty.button__um6Oz
                        )}
                        danger={false}
                        disabled={false}
                        ghost={false}
                        icon={
                          <Icon
                            className={classNames(
                              "__wab_instance",
                              sty.icon__fNkd6
                            )}
                            icon={"Table"}
                            size={16}
                            variant={"regular"}
                          />
                        }
                        iconPosition={"start"}
                        isSubmit={false}
                        label={"Vista"}
                        loading={false}
                        size={"small"}
                        target={"_self"}
                        type={"text"}
                      />

                      <Button
                        block={false}
                        className={classNames(
                          "__wab_instance",
                          sty.button___2VGs
                        )}
                        danger={false}
                        disabled={false}
                        ghost={false}
                        icon={
                          <Icon
                            className={classNames(
                              "__wab_instance",
                              sty.icon__xR71R
                            )}
                            icon={"FunnelSimple"}
                            size={16}
                            variant={"regular"}
                          />
                        }
                        iconPosition={"start"}
                        isSubmit={false}
                        label={"Filtrar"}
                        loading={false}
                        size={"small"}
                        target={"_self"}
                        type={"text"}
                      />
                    </Stack__>
                    <Divider
                      className={classNames(
                        "__wab_instance",
                        sty.divider___850JL
                      )}
                      dashed={false}
                      margin={"0px 20px"}
                      orientation={"left"}
                      orientationMargin={"0px"}
                      type={"vertical"}
                    />

                    <Button
                      block={false}
                      className={classNames(
                        "__wab_instance",
                        sty.button___6AtS6
                      )}
                      danger={false}
                      disabled={false}
                      ghost={false}
                      icon={
                        <Icon
                          className={classNames(
                            "__wab_instance",
                            sty.icon__xGJgd
                          )}
                          icon={"PlusCircle"}
                          size={16}
                          variant={"duotone"}
                        />
                      }
                      iconPosition={"start"}
                      isSubmit={false}
                      label={"Nuevo Prospecto"}
                      loading={false}
                      onClick={async () => {
                        const $steps = {};
                        $steps["openDrawer"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["drawers", "lead", "opened"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["openDrawer"] != null &&
                          typeof $steps["openDrawer"] === "object" &&
                          typeof $steps["openDrawer"].then === "function"
                        ) {
                          $steps["openDrawer"] = await $steps["openDrawer"];
                        }
                      }}
                      size={"medium"}
                      target={"_self"}
                      type={"primary"}
                    />
                  </Stack__>
                </div>
                {(() => {
                  try {
                    return (() => {
                      return (
                        !$queries.findManyLeads.isLoading &&
                        $queries.findManyLeads.data.response.results.length ===
                          0
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <EmptyData
                    data-plasmic-name={"emptyData"}
                    data-plasmic-override={overrides.emptyData}
                    className={classNames("__wab_instance", sty.emptyData)}
                    onSizeChange={generateStateOnChangeProp($state, [
                      "emptyData",
                      "size"
                    ])}
                    size={generateStateValueProp($state, ["emptyData", "size"])}
                  />
                ) : null}
                {(() => {
                  try {
                    return (() => {
                      const subSection = $state.subSection;
                      const hasData =
                        $queries.findManyLeads.data.response.results.length > 0;
                      return subSection !== "inactive" && hasData;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"stats"}
                    data-plasmic-override={overrides.stats}
                    className={classNames(projectcss.all, sty.stats)}
                  >
                    <Stat
                      className={classNames("__wab_instance", sty.stat__eM2Km)}
                      comparison={(() => {
                        try {
                          return (
                            $queries.findManyLeads.data.response.stats["new"]
                              .current -
                            $queries.findManyLeads.data.response.stats["new"]
                              .passed
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                      comparisonLabel={"Contra el Mes Pasado"}
                      delay={0}
                      duration={1.8}
                      icon={
                        <Icon
                          className={classNames(
                            "__wab_instance",
                            sty.icon___8MQzK
                          )}
                          color={"var(--token-pRs3-4jrQ4XQ)"}
                          icon={"SealCheck"}
                          size={20}
                          variant={"duotone"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $queries.findManyLeads.isLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      precision={0}
                      prefix={``}
                      suffix={``}
                      title={"Nuevos Prospectos"}
                      value={(() => {
                        try {
                          return $queries.findManyLeads.data.response.stats[
                            "new"
                          ].current;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <Stat
                      className={classNames("__wab_instance", sty.stat___3VtkY)}
                      comparison={(() => {
                        try {
                          return (
                            $queries.findManyLeads.data.response.stats.converted
                              .current -
                            $queries.findManyLeads.data.response.stats.converted
                              .passed
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 12;
                          }
                          throw e;
                        }
                      })()}
                      comparisonLabel={"Contra el Mes Pasado"}
                      delay={0}
                      duration={2.2}
                      icon={
                        <Icon
                          className={classNames(
                            "__wab_instance",
                            sty.icon___6Tg4W
                          )}
                          color={"var(--token-pRs3-4jrQ4XQ)"}
                          icon={"Handshake"}
                          size={20}
                          variant={"duotone"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $queries.findManyLeads.isLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      precision={0}
                      prefix={``}
                      suffix={``}
                      title={"Prospectos Convertidos"}
                      value={(() => {
                        try {
                          return $queries.findManyLeads.data.response.stats
                            .converted.current;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <Stat
                      className={classNames("__wab_instance", sty.stat__hlen2)}
                      comparison={(() => {
                        try {
                          return (
                            $queries.findManyLeads.data.response.stats
                              .activities.current -
                            $queries.findManyLeads.data.response.stats
                              .activities.passed
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                      comparisonLabel={"Contra el Mes Pasado"}
                      delay={0}
                      duration={2.6}
                      icon={
                        <Icon
                          className={classNames(
                            "__wab_instance",
                            sty.icon__o7Dd
                          )}
                          color={"var(--token-pRs3-4jrQ4XQ)"}
                          icon={"Pulse"}
                          size={20}
                          variant={"duotone"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $queries.findManyLeads.isLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      precision={0}
                      prefix={``}
                      suffix={``}
                      title={"Actividades Realizadas"}
                      value={(() => {
                        try {
                          return $queries.findManyLeads.data.response.stats
                            .activities.current;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                    />

                    <Stat
                      className={classNames("__wab_instance", sty.stat__lMeJu)}
                      comparison={(() => {
                        try {
                          return (
                            $queries.findManyLeads.data.response.stats.value
                              .current -
                            $queries.findManyLeads.data.response.stats.value
                              .passed
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                      comparisonLabel={"Contra el Mes Pasado"}
                      delay={0}
                      duration={3}
                      icon={
                        <Icon
                          className={classNames(
                            "__wab_instance",
                            sty.icon__xCqA7
                          )}
                          color={"var(--token-pRs3-4jrQ4XQ)"}
                          icon={"CurrencyDollar"}
                          size={20}
                          variant={"duotone"}
                        />
                      }
                      loading={(() => {
                        try {
                          return $queries.findManyLeads.isLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      precision={2}
                      prefix={"$"}
                      suffix={"MXN"}
                      title={"Valor Total"}
                      value={(() => {
                        try {
                          return $queries.findManyLeads.data.response.stats
                            .value.current;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 0;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                ) : null}
                {(() => {
                  try {
                    return (() => {
                      return (
                        $queries.findManyLeads.data.response.results.length >
                          0 || $queries.findManyLeads.isLoading
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <AdvancedTable
                    data-plasmic-name={"leadsTable"}
                    data-plasmic-override={overrides.leadsTable}
                    className={classNames("__wab_instance", sty.leadsTable)}
                    content={
                      <React.Fragment>
                        <AdvancedTableColumn
                          data-plasmic-name={"name"}
                          data-plasmic-override={overrides.name}
                          align={"left"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"left"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx => (
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"avatarText"}
                                              data-plasmic-override={
                                                overrides.avatarText
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.avatarText
                                              )}
                                            >
                                              <Avatar
                                                bordered={true}
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.avatar__eyvz3
                                                )}
                                                color={
                                                  true ? "#15C2C2" : undefined
                                                }
                                                content={(() => {
                                                  try {
                                                    return (() => {
                                                      return lead.finalName;
                                                    })();
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                                isCircular={false}
                                                size={"sm"}
                                                type={"text"}
                                                variant={"filled"}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__jloQh
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return lead.finalName;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </Stack__>
                                          )}
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__wc22E
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onClick={async () => {
                                        const $steps = {};
                                        $steps["goToCrmExpedienteProspecto"] =
                                          true
                                            ? (() => {
                                                const actionArgs = {
                                                  destination: `/crm/contacts/leads/${(() => {
                                                    try {
                                                      return lead.uuid;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}`
                                                };
                                                return (({ destination }) => {
                                                  if (
                                                    typeof destination ===
                                                      "string" &&
                                                    destination.startsWith("#")
                                                  ) {
                                                    document
                                                      .getElementById(
                                                        destination.substr(1)
                                                      )
                                                      .scrollIntoView({
                                                        behavior: "smooth"
                                                      });
                                                  } else {
                                                    location.assign(
                                                      destination
                                                    );
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps[
                                            "goToCrmExpedienteProspecto"
                                          ] != null &&
                                          typeof $steps[
                                            "goToCrmExpedienteProspecto"
                                          ] === "object" &&
                                          typeof $steps[
                                            "goToCrmExpedienteProspecto"
                                          ].then === "function"
                                        ) {
                                          $steps["goToCrmExpedienteProspecto"] =
                                            await $steps[
                                              "goToCrmExpedienteProspecto"
                                            ];
                                        }
                                      }}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.name)}
                          initialWidth={300}
                          maxWidth={500}
                          minWidth={200}
                          title={"Nombre del Prospecto"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"phone"}
                          data-plasmic-override={overrides.phone}
                          align={"left"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"left"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx => (
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__frKzC
                                              )}
                                            >
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"textIcon2"}
                                                data-plasmic-override={
                                                  overrides.textIcon2
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.textIcon2
                                                )}
                                              >
                                                <Icon
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.icon__yNEs1
                                                  )}
                                                  color={
                                                    "var(--token-YFIqRc19SnuM)"
                                                  }
                                                  icon={"Envelope"}
                                                  size={16}
                                                  variant={"regular"}
                                                />

                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__wgMn8
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (() => {
                                                          return (
                                                            lead.email ?? "-"
                                                          );
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </Stack__>
                                            </Stack__>
                                          )}
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__rRHh
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onClick={async () => {
                                        const $steps = {};
                                        $steps["goToCrmExpedienteProspecto"] =
                                          true
                                            ? (() => {
                                                const actionArgs = {
                                                  destination: `/crm/contacts/leads/${(() => {
                                                    try {
                                                      return lead.uuid;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}`
                                                };
                                                return (({ destination }) => {
                                                  if (
                                                    typeof destination ===
                                                      "string" &&
                                                    destination.startsWith("#")
                                                  ) {
                                                    document
                                                      .getElementById(
                                                        destination.substr(1)
                                                      )
                                                      .scrollIntoView({
                                                        behavior: "smooth"
                                                      });
                                                  } else {
                                                    location.assign(
                                                      destination
                                                    );
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps[
                                            "goToCrmExpedienteProspecto"
                                          ] != null &&
                                          typeof $steps[
                                            "goToCrmExpedienteProspecto"
                                          ] === "object" &&
                                          typeof $steps[
                                            "goToCrmExpedienteProspecto"
                                          ].then === "function"
                                        ) {
                                          $steps["goToCrmExpedienteProspecto"] =
                                            await $steps[
                                              "goToCrmExpedienteProspecto"
                                            ];
                                        }
                                      }}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.phone)}
                          initialWidth={200}
                          maxWidth={500}
                          minWidth={150}
                          title={"Correo Electr\u00f3nico"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"phone2"}
                          data-plasmic-override={overrides.phone2}
                          align={"left"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"left"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx => (
                                            <Stack__
                                              as={"div"}
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__fvdOx
                                              )}
                                            >
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"textIcon3"}
                                                data-plasmic-override={
                                                  overrides.textIcon3
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.textIcon3
                                                )}
                                              >
                                                <Icon
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.icon__qc45
                                                  )}
                                                  color={
                                                    "var(--token-YFIqRc19SnuM)"
                                                  }
                                                  icon={"DeviceMobileSpeaker"}
                                                  size={16}
                                                  variant={"regular"}
                                                />

                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__vZrw
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (() => {
                                                          const {
                                                            code,
                                                            number
                                                          } =
                                                            lead.cellphone ??
                                                            {};
                                                          if (!number)
                                                            return "-";
                                                          return `${code} ${$$.parsePhoneNumber(
                                                            number
                                                          )}`;
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </Stack__>
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"textIcon4"}
                                                data-plasmic-override={
                                                  overrides.textIcon4
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.textIcon4
                                                )}
                                              >
                                                <Icon
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.icon__syYqt
                                                  )}
                                                  color={
                                                    "var(--token-YFIqRc19SnuM)"
                                                  }
                                                  icon={"Phone"}
                                                  size={16}
                                                  variant={"regular"}
                                                />

                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__o5X0M
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (() => {
                                                          const {
                                                            code,
                                                            number
                                                          } = lead.phone ?? {};
                                                          if (!number)
                                                            return "-";
                                                          return `${code} ${$$.parsePhoneNumber(
                                                            number
                                                          )}`;
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </Stack__>
                                            </Stack__>
                                          )}
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__fMOhz
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onClick={async () => {
                                        const $steps = {};
                                        $steps["goToCrmExpedienteProspecto"] =
                                          true
                                            ? (() => {
                                                const actionArgs = {
                                                  destination: `/crm/contacts/leads/${(() => {
                                                    try {
                                                      return lead.uuid;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}`
                                                };
                                                return (({ destination }) => {
                                                  if (
                                                    typeof destination ===
                                                      "string" &&
                                                    destination.startsWith("#")
                                                  ) {
                                                    document
                                                      .getElementById(
                                                        destination.substr(1)
                                                      )
                                                      .scrollIntoView({
                                                        behavior: "smooth"
                                                      });
                                                  } else {
                                                    location.assign(
                                                      destination
                                                    );
                                                  }
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps[
                                            "goToCrmExpedienteProspecto"
                                          ] != null &&
                                          typeof $steps[
                                            "goToCrmExpedienteProspecto"
                                          ] === "object" &&
                                          typeof $steps[
                                            "goToCrmExpedienteProspecto"
                                          ].then === "function"
                                        ) {
                                          $steps["goToCrmExpedienteProspecto"] =
                                            await $steps[
                                              "goToCrmExpedienteProspecto"
                                            ];
                                        }
                                      }}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.phone2)}
                          initialWidth={200}
                          maxWidth={500}
                          minWidth={150}
                          title={"Tel\u00e9fonos"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"responsible"}
                          data-plasmic-override={overrides.responsible}
                          align={"center"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"center"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx =>
                                            (() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.responsibleDropdown
                                                ),
                                                closeOnSelect: true,
                                                isEmpty: (() => {
                                                  try {
                                                    return (
                                                      $queries.searchUsers.data
                                                        .response.results
                                                        .length === 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return false;
                                                    }
                                                    throw e;
                                                  }
                                                })(),
                                                loading: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "responsibleDropdown",
                                                    __plasmic_idx_0,
                                                    "loading"
                                                  ]
                                                ),
                                                maxHeight: "200px",
                                                menuContent: (_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return $queries
                                                        .searchUsers.data
                                                        .response.results;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const user =
                                                      __plasmic_item_1;
                                                    const userIndex =
                                                      __plasmic_idx_1;
                                                    return (() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem6
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem6",
                                                              __plasmic_idx_0,
                                                              __plasmic_idx_1,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        key: userIndex,
                                                        label: (() => {
                                                          try {
                                                            return (() => {
                                                              const {
                                                                name,
                                                                middleName,
                                                                lastName
                                                              } = user;
                                                              return $$.parseName(
                                                                {
                                                                  name,
                                                                  middleName,
                                                                  lastName
                                                                }
                                                              );
                                                            })();
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })(),
                                                        leftSection: (
                                                          <Avatar
                                                            bordered={true}
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.avatar___8SwOi
                                                            )}
                                                            color={
                                                              true
                                                                ? "#1F32C4"
                                                                : undefined
                                                            }
                                                            content={(() => {
                                                              try {
                                                                return (() => {
                                                                  const {
                                                                    image,
                                                                    name
                                                                  } = user;
                                                                  if (
                                                                    image?.url
                                                                  )
                                                                    return image.url;
                                                                  return name;
                                                                })();
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()}
                                                            isCircular={true}
                                                            size={"xs"}
                                                            type={(() => {
                                                              try {
                                                                return (() => {
                                                                  const {
                                                                    image
                                                                  } = user;
                                                                  if (
                                                                    image?.url
                                                                  )
                                                                    return "image";
                                                                  return "text";
                                                                })();
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return "text";
                                                                }
                                                                throw e;
                                                              }
                                                            })()}
                                                            variant={"filled"}
                                                          />
                                                        ),

                                                        onClick: async () => {
                                                          const $steps = {};
                                                          $steps[
                                                            "loadingNotification"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return $$.showNotification(
                                                                          "Actualizando Responsable",
                                                                          {
                                                                            type: "loading",
                                                                            id: `responsible-${leadIndex}`
                                                                          }
                                                                        );
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "loadingNotification"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "loadingNotification"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "loadingNotification"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "loadingNotification"
                                                            ] = await $steps[
                                                              "loadingNotification"
                                                            ];
                                                          }
                                                          $steps[
                                                            "checkIfSelected"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return (() => {
                                                                          const isSelected =
                                                                            $state
                                                                              .userSelector[
                                                                              leadIndex
                                                                            ]
                                                                              .value
                                                                              ?.uuid ===
                                                                            user.uuid;
                                                                          return isSelected;
                                                                        })();
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "checkIfSelected"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "checkIfSelected"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "checkIfSelected"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "checkIfSelected"
                                                            ] = await $steps[
                                                              "checkIfSelected"
                                                            ];
                                                          }
                                                          $steps[
                                                            "updateLocalValue"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return (() => {
                                                                          const isSelected =
                                                                            $steps.checkIfSelected;
                                                                          $state.userSelector[
                                                                            leadIndex
                                                                          ].value =
                                                                            isSelected
                                                                              ? null
                                                                              : user;
                                                                          return ($queries.findManyLeads.data.response.results[
                                                                            leadIndex
                                                                          ].responsible =
                                                                            isSelected
                                                                              ? null
                                                                              : user);
                                                                        })();
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "updateLocalValue"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "updateLocalValue"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "updateLocalValue"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "updateLocalValue"
                                                            ] = await $steps[
                                                              "updateLocalValue"
                                                            ];
                                                          }
                                                          $steps[
                                                            "patchRequest"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    dataOp: {
                                                                      sourceId:
                                                                        "nuXvvBTSGXM93PqWnV14Lf",
                                                                      opId: "29ef8da1-f001-4e7f-b73b-32e0df9e5731",
                                                                      userArgs:
                                                                        {
                                                                          path: [
                                                                            `contacts/leads/${lead.uuid}`
                                                                          ],

                                                                          headers:
                                                                            [
                                                                              `Bearer ${$ctx.token}`
                                                                            ],

                                                                          body: [
                                                                            (() => {
                                                                              const isSelected =
                                                                                $steps.checkIfSelected;
                                                                              return isSelected
                                                                                ? null
                                                                                : user.uuid;
                                                                            })()
                                                                          ]
                                                                        },
                                                                      cacheKey:
                                                                        null,
                                                                      invalidatedKeys:
                                                                        [],
                                                                      roleId:
                                                                        null
                                                                    },
                                                                    continueOnError:
                                                                      true
                                                                  };
                                                                return (async ({
                                                                  dataOp,
                                                                  continueOnError
                                                                }) => {
                                                                  try {
                                                                    const response =
                                                                      await executePlasmicDataOp(
                                                                        dataOp,
                                                                        {
                                                                          userAuthToken:
                                                                            dataSourcesCtx?.userAuthToken,
                                                                          user: dataSourcesCtx?.user
                                                                        }
                                                                      );
                                                                    await plasmicInvalidate(
                                                                      dataOp.invalidatedKeys
                                                                    );
                                                                    return response;
                                                                  } catch (e) {
                                                                    if (
                                                                      !continueOnError
                                                                    ) {
                                                                      throw e;
                                                                    }
                                                                    return e;
                                                                  }
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "patchRequest"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "patchRequest"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "patchRequest"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "patchRequest"
                                                            ] = await $steps[
                                                              "patchRequest"
                                                            ];
                                                          }
                                                          $steps[
                                                            "finalNotification"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return $$.showNotification(
                                                                          "El Responsable se actualizó correctamente",
                                                                          {
                                                                            type: "success",
                                                                            id: `responsible-${leadIndex}`
                                                                          }
                                                                        );
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "finalNotification"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "finalNotification"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "finalNotification"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "finalNotification"
                                                            ] = await $steps[
                                                              "finalNotification"
                                                            ];
                                                          }
                                                        },
                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem6",
                                                              __plasmic_idx_0,
                                                              __plasmic_idx_1,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem6[][].isSelected"
                                                          }
                                                        ],

                                                        [
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1
                                                        ],

                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem6[][].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) =>
                                                              (() => {
                                                                try {
                                                                  return (
                                                                    $state
                                                                      .userSelector[
                                                                      leadIndex
                                                                    ].value
                                                                      ?.uuid ===
                                                                    user.uuid
                                                                  );
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return false;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                          }
                                                        ],

                                                        [
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1
                                                        ]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem6"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem6
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })();
                                                  }
                                                ),
                                                onClose: async () => {
                                                  const $steps = {};
                                                  $steps["cleanSearch"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "search",
                                                              "users"
                                                            ]
                                                          },
                                                          operation: 1
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;
                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            undefined
                                                          );
                                                          return undefined;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["cleanSearch"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "cleanSearch"
                                                    ] === "object" &&
                                                    typeof $steps["cleanSearch"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["cleanSearch"] =
                                                      await $steps[
                                                        "cleanSearch"
                                                      ];
                                                  }
                                                },
                                                onLoadingChange:
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "responsibleDropdown",
                                                      __plasmic_idx_0,
                                                      "loading"
                                                    ]
                                                  ),
                                                onOpen: async () => {
                                                  const $steps = {};
                                                },
                                                onSearch: async (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "responsibleDropdown",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ).apply(null, eventArgs);
                                                  (async value => {
                                                    const $steps = {};
                                                    $steps["setSearch"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "search",
                                                                "users"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $state
                                                                .responsibleDropdown[
                                                                leadIndex
                                                              ].searchValue
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;
                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["setSearch"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "setSearch"
                                                      ] === "object" &&
                                                      typeof $steps["setSearch"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["setSearch"] =
                                                        await $steps[
                                                          "setSearch"
                                                        ];
                                                    }
                                                  }).apply(null, eventArgs);
                                                },
                                                placement: "bottomRight",
                                                ref: ref => {
                                                  $refs["responsibleDropdown"] =
                                                    ref;
                                                },
                                                searchValue:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "responsibleDropdown",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ),
                                                searchable: true,
                                                trigger: "click",
                                                triggerContent: (() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.userSelector
                                                    ),
                                                    onValueChange:
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "userSelector",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      ),
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "userSelector",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      )
                                                  };
                                                  initializePlasmicStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "userSelector[].value",
                                                        initFunc: ({
                                                          $props,
                                                          $state,
                                                          $queries
                                                        }) =>
                                                          (() => {
                                                            try {
                                                              return lead.responsible;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return null;
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                      }
                                                    ],

                                                    [__plasmic_idx_0]
                                                  );
                                                  return (
                                                    <UserSelector
                                                      data-plasmic-name={
                                                        "userSelector"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.userSelector
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })(),
                                                width: "250px"
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "loading",
                                                    plasmicStateName:
                                                      "responsibleDropdown[].loading"
                                                  },
                                                  {
                                                    name: "searchValue",
                                                    plasmicStateName:
                                                      "responsibleDropdown[].searchValue"
                                                  }
                                                ],

                                                [__plasmic_idx_0],
                                                undefined ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "responsibleDropdown[].loading",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) =>
                                                      (() => {
                                                        try {
                                                          return $queries
                                                            .searchUsers
                                                            .isLoading;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()
                                                  },
                                                  {
                                                    name: "responsibleDropdown[].searchValue",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => ""
                                                  }
                                                ],

                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <Dropdown
                                                  data-plasmic-name={
                                                    "responsibleDropdown"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.responsibleDropdown
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()
                                          }
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__eVsga
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.responsible
                          )}
                          initialWidth={250}
                          maxWidth={500}
                          minWidth={200}
                          title={"Responsable"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"rating"}
                          data-plasmic-override={overrides.rating}
                          align={"center"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"center"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx =>
                                            (() => {
                                              const child$Props = {
                                                allowClear: true,
                                                allowHalf: false,
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.rate
                                                ),
                                                count: 5,
                                                disabled: false,
                                                icon: "SketchLogo",
                                                onValueChange: async (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "rate",
                                                      __plasmic_idx_0,
                                                      "value"
                                                    ]
                                                  ).apply(null, eventArgs);
                                                  (async value => {
                                                    const $steps = {};
                                                    $steps[
                                                      "loadingNotification"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return $$.showNotification(
                                                                  "Actualizando Calificación",
                                                                  {
                                                                    type: "loading",
                                                                    id: `rating-${leadIndex}`
                                                                  }
                                                                );
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "loadingNotification"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "loadingNotification"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "loadingNotification"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "loadingNotification"
                                                      ] = await $steps[
                                                        "loadingNotification"
                                                      ];
                                                    }
                                                    $steps["checkIfCleared"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              customFunction:
                                                                async () => {
                                                                  return (() => {
                                                                    const isCleared =
                                                                      $state
                                                                        .rate[
                                                                        leadIndex
                                                                      ]
                                                                        .value ===
                                                                      $queries
                                                                        .findManyLeads
                                                                        .data
                                                                        .response
                                                                        .results[
                                                                        leadIndex
                                                                      ].rating;
                                                                    return isCleared;
                                                                  })();
                                                                }
                                                            };
                                                            return (({
                                                              customFunction
                                                            }) => {
                                                              return customFunction();
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "checkIfCleared"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "checkIfCleared"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "checkIfCleared"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["checkIfCleared"] =
                                                        await $steps[
                                                          "checkIfCleared"
                                                        ];
                                                    }
                                                    $steps["updateLocalValue"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              customFunction:
                                                                async () => {
                                                                  return (() => {
                                                                    const isCleared =
                                                                      $steps.checkIfCleared;
                                                                    return ($queries.findManyLeads.data.response.results[
                                                                      leadIndex
                                                                    ].rating =
                                                                      isCleared
                                                                        ? 0
                                                                        : $state
                                                                            .rate[
                                                                            leadIndex
                                                                          ]
                                                                            .value);
                                                                  })();
                                                                }
                                                            };
                                                            return (({
                                                              customFunction
                                                            }) => {
                                                              return customFunction();
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateLocalValue"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateLocalValue"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateLocalValue"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateLocalValue"
                                                      ] = await $steps[
                                                        "updateLocalValue"
                                                      ];
                                                    }
                                                    $steps["patchRequest"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              dataOp: {
                                                                sourceId:
                                                                  "nuXvvBTSGXM93PqWnV14Lf",
                                                                opId: "68a04977-1cad-432a-9a42-0d0d2cb7868b",
                                                                userArgs: {
                                                                  path: [
                                                                    `contacts/leads/${lead.uuid}`
                                                                  ],

                                                                  headers: [
                                                                    `Bearer ${$ctx.token}`
                                                                  ],

                                                                  body: [
                                                                    (() => {
                                                                      const isCleared =
                                                                        $steps.checkIfCleared;
                                                                      return isCleared
                                                                        ? 0
                                                                        : $state
                                                                            .rate[
                                                                            leadIndex
                                                                          ]
                                                                            .value;
                                                                    })()
                                                                  ]
                                                                },
                                                                cacheKey: null,
                                                                invalidatedKeys:
                                                                  [],
                                                                roleId: null
                                                              },
                                                              continueOnError:
                                                                true
                                                            };
                                                            return (async ({
                                                              dataOp,
                                                              continueOnError
                                                            }) => {
                                                              try {
                                                                const response =
                                                                  await executePlasmicDataOp(
                                                                    dataOp,
                                                                    {
                                                                      userAuthToken:
                                                                        dataSourcesCtx?.userAuthToken,
                                                                      user: dataSourcesCtx?.user
                                                                    }
                                                                  );
                                                                await plasmicInvalidate(
                                                                  dataOp.invalidatedKeys
                                                                );
                                                                return response;
                                                              } catch (e) {
                                                                if (
                                                                  !continueOnError
                                                                ) {
                                                                  throw e;
                                                                }
                                                                return e;
                                                              }
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["patchRequest"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "patchRequest"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "patchRequest"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["patchRequest"] =
                                                        await $steps[
                                                          "patchRequest"
                                                        ];
                                                    }
                                                    $steps[
                                                      "finalNotification"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return $$.showNotification(
                                                                  "La calificación se actualizó correctamente",
                                                                  {
                                                                    type: "success",
                                                                    id: `rating-${leadIndex}`
                                                                  }
                                                                );
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "finalNotification"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "finalNotification"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "finalNotification"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "finalNotification"
                                                      ] = await $steps[
                                                        "finalNotification"
                                                      ];
                                                    }
                                                  }).apply(null, eventArgs);
                                                },
                                                value: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "rate",
                                                    __plasmic_idx_0,
                                                    "value"
                                                  ]
                                                )
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "value",
                                                    plasmicStateName:
                                                      "rate[].value"
                                                  }
                                                ],

                                                [__plasmic_idx_0],
                                                undefined ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "rate[].value",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) =>
                                                      (() => {
                                                        try {
                                                          return lead.rating;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return 0;
                                                          }
                                                          throw e;
                                                        }
                                                      })()
                                                  }
                                                ],

                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <Rate
                                                  data-plasmic-name={"rate"}
                                                  data-plasmic-override={
                                                    overrides.rate
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()
                                          }
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__otHox
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.rating)}
                          initialWidth={250}
                          maxWidth={400}
                          minWidth={200}
                          title={"Calificaci\u00f3n"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"group"}
                          data-plasmic-override={overrides.group}
                          align={"center"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"center"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx =>
                                            (() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.groupDropdown
                                                ),
                                                closeOnSelect: true,
                                                isEmpty: (() => {
                                                  try {
                                                    return (
                                                      $queries.searchGroups.data
                                                        .response.results
                                                        .length === 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return false;
                                                    }
                                                    throw e;
                                                  }
                                                })(),
                                                loading: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "groupDropdown",
                                                    __plasmic_idx_0,
                                                    "loading"
                                                  ]
                                                ),
                                                maxHeight: "200px",
                                                menuContent: (_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return $queries
                                                        .searchGroups.data
                                                        .response.results;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const group =
                                                      __plasmic_item_1;
                                                    const groupIndex =
                                                      __plasmic_idx_1;
                                                    return (() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem7
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem7",
                                                              __plasmic_idx_0,
                                                              __plasmic_idx_1,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        key: groupIndex,
                                                        label: (() => {
                                                          try {
                                                            return group.name;
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })(),
                                                        leftSection: (
                                                          <Icon
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.icon__o4Kqh
                                                            )}
                                                            color={(() => {
                                                              try {
                                                                return group.color;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()}
                                                            icon={"Smiley"}
                                                            size={20}
                                                            variant={"duotone"}
                                                          />
                                                        ),

                                                        onClick: async () => {
                                                          const $steps = {};
                                                          $steps[
                                                            "loadingNotification"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return $$.showNotification(
                                                                          "Actualizando Grupo",
                                                                          {
                                                                            type: "loading",
                                                                            id: `group-${leadIndex}`
                                                                          }
                                                                        );
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "loadingNotification"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "loadingNotification"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "loadingNotification"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "loadingNotification"
                                                            ] = await $steps[
                                                              "loadingNotification"
                                                            ];
                                                          }
                                                          $steps[
                                                            "checkIfSelected"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return (() => {
                                                                          const isSelected =
                                                                            $state
                                                                              .groupSelector[
                                                                              leadIndex
                                                                            ]
                                                                              .value
                                                                              ?.uuid ===
                                                                            group.uuid;
                                                                          return isSelected;
                                                                        })();
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "checkIfSelected"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "checkIfSelected"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "checkIfSelected"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "checkIfSelected"
                                                            ] = await $steps[
                                                              "checkIfSelected"
                                                            ];
                                                          }
                                                          $steps[
                                                            "updateLocalValue"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return (() => {
                                                                          const isSelected =
                                                                            $steps.checkIfSelected;
                                                                          $state.groupSelector[
                                                                            leadIndex
                                                                          ].value =
                                                                            isSelected
                                                                              ? null
                                                                              : group;
                                                                          return ($queries.findManyLeads.data.response.results[
                                                                            leadIndex
                                                                          ].group =
                                                                            isSelected
                                                                              ? null
                                                                              : group);
                                                                        })();
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "updateLocalValue"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "updateLocalValue"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "updateLocalValue"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "updateLocalValue"
                                                            ] = await $steps[
                                                              "updateLocalValue"
                                                            ];
                                                          }
                                                          $steps[
                                                            "patchRequest"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    dataOp: {
                                                                      sourceId:
                                                                        "nuXvvBTSGXM93PqWnV14Lf",
                                                                      opId: "04d0f59e-9845-4f7f-a635-3ee78741bd8d",
                                                                      userArgs:
                                                                        {
                                                                          path: [
                                                                            `contacts/leads/${lead.uuid}`
                                                                          ],

                                                                          headers:
                                                                            [
                                                                              `Bearer ${$ctx.token}`
                                                                            ],

                                                                          body: [
                                                                            (() => {
                                                                              const isSelected =
                                                                                $steps.checkIfSelected;
                                                                              return isSelected
                                                                                ? null
                                                                                : group.uuid;
                                                                            })()
                                                                          ]
                                                                        },
                                                                      cacheKey:
                                                                        null,
                                                                      invalidatedKeys:
                                                                        [],
                                                                      roleId:
                                                                        null
                                                                    },
                                                                    continueOnError:
                                                                      true
                                                                  };
                                                                return (async ({
                                                                  dataOp,
                                                                  continueOnError
                                                                }) => {
                                                                  try {
                                                                    const response =
                                                                      await executePlasmicDataOp(
                                                                        dataOp,
                                                                        {
                                                                          userAuthToken:
                                                                            dataSourcesCtx?.userAuthToken,
                                                                          user: dataSourcesCtx?.user
                                                                        }
                                                                      );
                                                                    await plasmicInvalidate(
                                                                      dataOp.invalidatedKeys
                                                                    );
                                                                    return response;
                                                                  } catch (e) {
                                                                    if (
                                                                      !continueOnError
                                                                    ) {
                                                                      throw e;
                                                                    }
                                                                    return e;
                                                                  }
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "patchRequest"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "patchRequest"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "patchRequest"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "patchRequest"
                                                            ] = await $steps[
                                                              "patchRequest"
                                                            ];
                                                          }
                                                          $steps[
                                                            "finalNotification"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return $$.showNotification(
                                                                          "El grupo se actualizó correctamente",
                                                                          {
                                                                            type: "success",
                                                                            id: `group-${leadIndex}`
                                                                          }
                                                                        );
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "finalNotification"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "finalNotification"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "finalNotification"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "finalNotification"
                                                            ] = await $steps[
                                                              "finalNotification"
                                                            ];
                                                          }
                                                        },
                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem7",
                                                              __plasmic_idx_0,
                                                              __plasmic_idx_1,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem7[][].isSelected"
                                                          }
                                                        ],

                                                        [
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1
                                                        ],

                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem7[][].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) =>
                                                              (() => {
                                                                try {
                                                                  return (
                                                                    $state
                                                                      .groupSelector[
                                                                      leadIndex
                                                                    ].value
                                                                      ?.uuid ===
                                                                    group.uuid
                                                                  );
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return false;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                          }
                                                        ],

                                                        [
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1
                                                        ]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem7"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem7
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })();
                                                  }
                                                ),
                                                onClose: async () => {
                                                  const $steps = {};
                                                  $steps["cleanSearch"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "search",
                                                              "groups"
                                                            ]
                                                          },
                                                          operation: 1
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;
                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            undefined
                                                          );
                                                          return undefined;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["cleanSearch"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "cleanSearch"
                                                    ] === "object" &&
                                                    typeof $steps["cleanSearch"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["cleanSearch"] =
                                                      await $steps[
                                                        "cleanSearch"
                                                      ];
                                                  }
                                                },
                                                onLoadingChange:
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "groupDropdown",
                                                      __plasmic_idx_0,
                                                      "loading"
                                                    ]
                                                  ),
                                                onOpen: async () => {
                                                  const $steps = {};
                                                },
                                                onSearch: async (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "groupDropdown",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ).apply(null, eventArgs);
                                                  (async value => {
                                                    const $steps = {};
                                                    $steps["setSearch"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "search",
                                                                "groups"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $state
                                                                .groupDropdown[
                                                                leadIndex
                                                              ].searchValue
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;
                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["setSearch"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "setSearch"
                                                      ] === "object" &&
                                                      typeof $steps["setSearch"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["setSearch"] =
                                                        await $steps[
                                                          "setSearch"
                                                        ];
                                                    }
                                                  }).apply(null, eventArgs);
                                                },
                                                placement: "bottomRight",
                                                ref: ref => {
                                                  $refs["groupDropdown"] = ref;
                                                },
                                                searchValue:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "groupDropdown",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ),
                                                searchable: true,
                                                trigger: "click",
                                                triggerContent: (() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.groupSelector
                                                    ),
                                                    emptyLabel: "Sin Grupo",
                                                    labelAccesor: "name",
                                                    onValueChange:
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "groupSelector",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      ),
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "groupSelector",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      )
                                                  };
                                                  initializePlasmicStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "groupSelector[].value",
                                                        initFunc: ({
                                                          $props,
                                                          $state,
                                                          $queries
                                                        }) =>
                                                          (() => {
                                                            try {
                                                              return lead.group;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return {};
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                      }
                                                    ],

                                                    [__plasmic_idx_0]
                                                  );
                                                  return (
                                                    <IconSelector
                                                      data-plasmic-name={
                                                        "groupSelector"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.groupSelector
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })(),
                                                width: "250px"
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "loading",
                                                    plasmicStateName:
                                                      "groupDropdown[].loading"
                                                  },
                                                  {
                                                    name: "searchValue",
                                                    plasmicStateName:
                                                      "groupDropdown[].searchValue"
                                                  }
                                                ],

                                                [__plasmic_idx_0],
                                                undefined ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "groupDropdown[].loading",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) =>
                                                      (() => {
                                                        try {
                                                          return $queries
                                                            .searchGroups
                                                            .isLoading;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()
                                                  },
                                                  {
                                                    name: "groupDropdown[].searchValue",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => ""
                                                  }
                                                ],

                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <Dropdown
                                                  data-plasmic-name={
                                                    "groupDropdown"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.groupDropdown
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()
                                          }
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__n41IX
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.group)}
                          initialWidth={250}
                          maxWidth={500}
                          minWidth={200}
                          title={"Grupo"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"group2"}
                          data-plasmic-override={overrides.group2}
                          align={"center"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"center"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx =>
                                            (() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.sourceDropdown
                                                ),
                                                closeOnSelect: true,
                                                isEmpty: (() => {
                                                  try {
                                                    return (
                                                      $queries.searchSources
                                                        .data.response.results
                                                        .length === 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return false;
                                                    }
                                                    throw e;
                                                  }
                                                })(),
                                                loading: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "sourceDropdown",
                                                    __plasmic_idx_0,
                                                    "loading"
                                                  ]
                                                ),
                                                maxHeight: "200px",
                                                menuContent: (_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return $queries
                                                        .searchSources.data
                                                        .response.results;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const source =
                                                      __plasmic_item_1;
                                                    const sourceIndex =
                                                      __plasmic_idx_1;
                                                    return (() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem8
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem8",
                                                              __plasmic_idx_0,
                                                              __plasmic_idx_1,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        key: sourceIndex,
                                                        label: (() => {
                                                          try {
                                                            return source.name;
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })(),
                                                        leftSection: (
                                                          <PlasmicImg__
                                                            alt={""}
                                                            className={classNames(
                                                              sty.img__crp0V
                                                            )}
                                                            displayHeight={
                                                              "24px"
                                                            }
                                                            displayMaxHeight={
                                                              "none"
                                                            }
                                                            displayMaxWidth={
                                                              "100%"
                                                            }
                                                            displayMinHeight={
                                                              "0"
                                                            }
                                                            displayMinWidth={
                                                              "0"
                                                            }
                                                            displayWidth={
                                                              "24px"
                                                            }
                                                            loading={"lazy"}
                                                            src={(() => {
                                                              try {
                                                                return source.icon;
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()}
                                                          />
                                                        ),

                                                        onClick: async () => {
                                                          const $steps = {};
                                                          $steps[
                                                            "loadingNotification"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return $$.showNotification(
                                                                          "Actualizando Fuente",
                                                                          {
                                                                            type: "loading",
                                                                            id: `source-${leadIndex}`
                                                                          }
                                                                        );
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "loadingNotification"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "loadingNotification"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "loadingNotification"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "loadingNotification"
                                                            ] = await $steps[
                                                              "loadingNotification"
                                                            ];
                                                          }
                                                          $steps[
                                                            "checkIfSelected"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return (() => {
                                                                          const isSelected =
                                                                            $state
                                                                              .sourceSelector[
                                                                              leadIndex
                                                                            ]
                                                                              .value
                                                                              ?.uuid ===
                                                                            source.uuid;
                                                                          return isSelected;
                                                                        })();
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "checkIfSelected"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "checkIfSelected"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "checkIfSelected"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "checkIfSelected"
                                                            ] = await $steps[
                                                              "checkIfSelected"
                                                            ];
                                                          }
                                                          $steps[
                                                            "updateLocalValue"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return (() => {
                                                                          const isSelected =
                                                                            $steps.checkIfSelected;
                                                                          $state.sourceSelector[
                                                                            leadIndex
                                                                          ].value =
                                                                            isSelected
                                                                              ? null
                                                                              : source;
                                                                          return ($queries.findManyLeads.data.response.results[
                                                                            leadIndex
                                                                          ].source =
                                                                            isSelected
                                                                              ? null
                                                                              : source);
                                                                        })();
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "updateLocalValue"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "updateLocalValue"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "updateLocalValue"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "updateLocalValue"
                                                            ] = await $steps[
                                                              "updateLocalValue"
                                                            ];
                                                          }
                                                          $steps[
                                                            "patchRequest"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    dataOp: {
                                                                      sourceId:
                                                                        "nuXvvBTSGXM93PqWnV14Lf",
                                                                      opId: "c8454ba1-e0eb-45e0-a457-22b2c7b518b6",
                                                                      userArgs:
                                                                        {
                                                                          path: [
                                                                            `contacts/leads/${lead.uuid}`
                                                                          ],

                                                                          headers:
                                                                            [
                                                                              `Bearer ${$ctx.token}`
                                                                            ],

                                                                          body: [
                                                                            (() => {
                                                                              const isSelected =
                                                                                $steps.checkIfSelected;
                                                                              return isSelected
                                                                                ? null
                                                                                : source.uuid;
                                                                            })()
                                                                          ]
                                                                        },
                                                                      cacheKey:
                                                                        null,
                                                                      invalidatedKeys:
                                                                        [],
                                                                      roleId:
                                                                        null
                                                                    },
                                                                    continueOnError:
                                                                      true
                                                                  };
                                                                return (async ({
                                                                  dataOp,
                                                                  continueOnError
                                                                }) => {
                                                                  try {
                                                                    const response =
                                                                      await executePlasmicDataOp(
                                                                        dataOp,
                                                                        {
                                                                          userAuthToken:
                                                                            dataSourcesCtx?.userAuthToken,
                                                                          user: dataSourcesCtx?.user
                                                                        }
                                                                      );
                                                                    await plasmicInvalidate(
                                                                      dataOp.invalidatedKeys
                                                                    );
                                                                    return response;
                                                                  } catch (e) {
                                                                    if (
                                                                      !continueOnError
                                                                    ) {
                                                                      throw e;
                                                                    }
                                                                    return e;
                                                                  }
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "patchRequest"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "patchRequest"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "patchRequest"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "patchRequest"
                                                            ] = await $steps[
                                                              "patchRequest"
                                                            ];
                                                          }
                                                          $steps[
                                                            "finalNotification"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return $$.showNotification(
                                                                          "La fuente se actualizó correctamente",
                                                                          {
                                                                            type: "success",
                                                                            id: `source-${leadIndex}`
                                                                          }
                                                                        );
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "finalNotification"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "finalNotification"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "finalNotification"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "finalNotification"
                                                            ] = await $steps[
                                                              "finalNotification"
                                                            ];
                                                          }
                                                        },
                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem8",
                                                              __plasmic_idx_0,
                                                              __plasmic_idx_1,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem8[][].isSelected"
                                                          }
                                                        ],

                                                        [
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1
                                                        ],

                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem8[][].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) =>
                                                              (() => {
                                                                try {
                                                                  return (
                                                                    $state
                                                                      .sourceSelector[
                                                                      leadIndex
                                                                    ].value
                                                                      ?.uuid ===
                                                                    source.uuid
                                                                  );
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return false;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                          }
                                                        ],

                                                        [
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1
                                                        ]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem8"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem8
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })();
                                                  }
                                                ),
                                                onClose: async () => {
                                                  const $steps = {};
                                                  $steps["cleanSearch"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "search",
                                                              "sources"
                                                            ]
                                                          },
                                                          operation: 1
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;
                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            undefined
                                                          );
                                                          return undefined;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["cleanSearch"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "cleanSearch"
                                                    ] === "object" &&
                                                    typeof $steps["cleanSearch"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["cleanSearch"] =
                                                      await $steps[
                                                        "cleanSearch"
                                                      ];
                                                  }
                                                },
                                                onLoadingChange:
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "sourceDropdown",
                                                      __plasmic_idx_0,
                                                      "loading"
                                                    ]
                                                  ),
                                                onOpen: async () => {
                                                  const $steps = {};
                                                },
                                                onSearch: async (
                                                  ...eventArgs
                                                ) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "sourceDropdown",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ).apply(null, eventArgs);
                                                  (async value => {
                                                    const $steps = {};
                                                    $steps["setSearch"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "search",
                                                                "sources"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $state
                                                                .sourceDropdown[
                                                                leadIndex
                                                              ].searchValue
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;
                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["setSearch"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "setSearch"
                                                      ] === "object" &&
                                                      typeof $steps["setSearch"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["setSearch"] =
                                                        await $steps[
                                                          "setSearch"
                                                        ];
                                                    }
                                                  }).apply(null, eventArgs);
                                                },
                                                placement: "bottomRight",
                                                ref: ref => {
                                                  $refs["sourceDropdown"] = ref;
                                                },
                                                searchValue:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "sourceDropdown",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ),
                                                searchable: true,
                                                trigger: "click",
                                                triggerContent: (() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.sourceSelector
                                                    ),
                                                    imageAccesor: "icon",
                                                    onValueChange:
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "sourceSelector",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      ),
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "sourceSelector",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      )
                                                  };
                                                  initializePlasmicStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "sourceSelector[].value",
                                                        initFunc: ({
                                                          $props,
                                                          $state,
                                                          $queries
                                                        }) =>
                                                          (() => {
                                                            try {
                                                              return lead.source;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return {};
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                      }
                                                    ],

                                                    [__plasmic_idx_0]
                                                  );
                                                  return (
                                                    <ImageSelector
                                                      data-plasmic-name={
                                                        "sourceSelector"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.sourceSelector
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })(),
                                                width: "250px"
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "loading",
                                                    plasmicStateName:
                                                      "sourceDropdown[].loading"
                                                  },
                                                  {
                                                    name: "searchValue",
                                                    plasmicStateName:
                                                      "sourceDropdown[].searchValue"
                                                  }
                                                ],

                                                [__plasmic_idx_0],
                                                undefined ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "sourceDropdown[].loading",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) =>
                                                      (() => {
                                                        try {
                                                          return $queries
                                                            .searchSources
                                                            .isLoading;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()
                                                  },
                                                  {
                                                    name: "sourceDropdown[].searchValue",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => ""
                                                  }
                                                ],

                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <Dropdown
                                                  data-plasmic-name={
                                                    "sourceDropdown"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.sourceDropdown
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()
                                          }
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__g3Wzh
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.group2)}
                          initialWidth={250}
                          maxWidth={500}
                          minWidth={200}
                          title={"Fuente"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"potential"}
                          data-plasmic-override={overrides.potential}
                          align={"center"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"center"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx => (
                                            <Stack__
                                              as={"div"}
                                              data-plasmic-name={"container"}
                                              data-plasmic-override={
                                                overrides.container
                                              }
                                              hasGap={true}
                                              className={classNames(
                                                projectcss.all,
                                                sty.container
                                              )}
                                            >
                                              <Progress
                                                data-plasmic-name={"progress"}
                                                data-plasmic-override={
                                                  overrides.progress
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.progress
                                                )}
                                                showInfo={false}
                                                size={34}
                                                strokeColor={["#fa8c16"]}
                                                strokeLinecap={"round"}
                                                strokeWidth={14}
                                                type={"dashboard"}
                                                value={(() => {
                                                  try {
                                                    return lead.potential;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return 0;
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__oduco
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return (
                                                        lead.potential + "%"
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </Stack__>
                                          )}
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__pb0Fd
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.potential
                          )}
                          initialWidth={100}
                          maxWidth={300}
                          minWidth={80}
                          title={"Potencial"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"value"}
                          data-plasmic-override={overrides.value}
                          align={"center"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"center"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx => (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__kMYw
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return $$.formatCurrency(
                                                      lead.value
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          )}
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__fFzj
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.value)}
                          initialWidth={100}
                          maxWidth={300}
                          minWidth={80}
                          title={"Valor"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"tags"}
                          data-plasmic-override={overrides.tags}
                          align={"center"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"center"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx =>
                                            (() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.tagDropdown
                                                ),
                                                closeOnSelect: false,
                                                isEmpty: (() => {
                                                  try {
                                                    return (
                                                      $queries.searchTags.data
                                                        .response.results
                                                        .length === 0
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return false;
                                                    }
                                                    throw e;
                                                  }
                                                })(),
                                                loading: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "tagDropdown",
                                                    __plasmic_idx_0,
                                                    "loading"
                                                  ]
                                                ),
                                                maxHeight: "200px",
                                                menuContent: (_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return $queries.searchTags
                                                        .data.response.results;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const tag =
                                                      __plasmic_item_1;
                                                    const tagIndex =
                                                      __plasmic_idx_1;
                                                    return (() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem9
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem9",
                                                              __plasmic_idx_0,
                                                              __plasmic_idx_1,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        key: tagIndex,
                                                        label: (() => {
                                                          try {
                                                            return tag.name;
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })(),
                                                        leftSection: (
                                                          <Icon
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.icon__vdfKc
                                                            )}
                                                            color={"#868E96"}
                                                            icon={"Tag"}
                                                            size={16}
                                                            variant={"duotone"}
                                                          />
                                                        ),

                                                        onClick: async () => {
                                                          const $steps = {};
                                                          $steps[
                                                            "loadingNotification"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return $$.showNotification(
                                                                          "Actualizando Etiquetas",
                                                                          {
                                                                            type: "loading",
                                                                            id: `tag-${leadIndex}`
                                                                          }
                                                                        );
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "loadingNotification"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "loadingNotification"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "loadingNotification"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "loadingNotification"
                                                            ] = await $steps[
                                                              "loadingNotification"
                                                            ];
                                                          }
                                                          $steps[
                                                            "checkIfSelected"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return (() => {
                                                                          const index =
                                                                            $state.tagSelector[
                                                                              leadIndex
                                                                            ].value.findIndex(
                                                                              i =>
                                                                                i.uuid ===
                                                                                tag.uuid
                                                                            );
                                                                          const isSelected =
                                                                            index !==
                                                                            -1;
                                                                          return {
                                                                            index,
                                                                            isSelected
                                                                          };
                                                                        })();
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "checkIfSelected"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "checkIfSelected"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "checkIfSelected"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "checkIfSelected"
                                                            ] = await $steps[
                                                              "checkIfSelected"
                                                            ];
                                                          }
                                                          $steps[
                                                            "updateLocalValue"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return (() => {
                                                                          const {
                                                                            isSelected,
                                                                            index
                                                                          } =
                                                                            $steps.checkIfSelected;
                                                                          if (
                                                                            isSelected
                                                                          ) {
                                                                            $state.tagSelector[
                                                                              leadIndex
                                                                            ].value.splice(
                                                                              index,
                                                                              1
                                                                            );
                                                                            return $queries.findManyLeads.data.response.results[
                                                                              leadIndex
                                                                            ].tags.splice(
                                                                              index,
                                                                              1
                                                                            );
                                                                          } else {
                                                                            $state.tagSelector[
                                                                              leadIndex
                                                                            ].value.push(
                                                                              tag
                                                                            );
                                                                            return $queries.findManyLeads.data.response.results[
                                                                              leadIndex
                                                                            ].tags.push(
                                                                              tag
                                                                            );
                                                                          }
                                                                        })();
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "updateLocalValue"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "updateLocalValue"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "updateLocalValue"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "updateLocalValue"
                                                            ] = await $steps[
                                                              "updateLocalValue"
                                                            ];
                                                          }
                                                          $steps[
                                                            "patchRequest"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    dataOp: {
                                                                      sourceId:
                                                                        "nuXvvBTSGXM93PqWnV14Lf",
                                                                      opId: "ccf12444-2d0b-4060-97c7-cd9acebce2d2",
                                                                      userArgs:
                                                                        {
                                                                          path: [
                                                                            `contacts/leads/${lead.uuid}`
                                                                          ],

                                                                          headers:
                                                                            [
                                                                              `Bearer ${$ctx.token}`
                                                                            ],

                                                                          body: [
                                                                            (() => {
                                                                              return tag.uuid;
                                                                            })()
                                                                          ]
                                                                        },
                                                                      cacheKey:
                                                                        null,
                                                                      invalidatedKeys:
                                                                        [],
                                                                      roleId:
                                                                        null
                                                                    },
                                                                    continueOnError:
                                                                      true
                                                                  };
                                                                return (async ({
                                                                  dataOp,
                                                                  continueOnError
                                                                }) => {
                                                                  try {
                                                                    const response =
                                                                      await executePlasmicDataOp(
                                                                        dataOp,
                                                                        {
                                                                          userAuthToken:
                                                                            dataSourcesCtx?.userAuthToken,
                                                                          user: dataSourcesCtx?.user
                                                                        }
                                                                      );
                                                                    await plasmicInvalidate(
                                                                      dataOp.invalidatedKeys
                                                                    );
                                                                    return response;
                                                                  } catch (e) {
                                                                    if (
                                                                      !continueOnError
                                                                    ) {
                                                                      throw e;
                                                                    }
                                                                    return e;
                                                                  }
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "patchRequest"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "patchRequest"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "patchRequest"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "patchRequest"
                                                            ] = await $steps[
                                                              "patchRequest"
                                                            ];
                                                          }
                                                          $steps[
                                                            "finalNotification"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    customFunction:
                                                                      async () => {
                                                                        return $$.showNotification(
                                                                          "Las etiquetas se actualizaron correctamente",
                                                                          {
                                                                            type: "success",
                                                                            id: `tag-${leadIndex}`
                                                                          }
                                                                        );
                                                                      }
                                                                  };
                                                                return (({
                                                                  customFunction
                                                                }) => {
                                                                  return customFunction();
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "finalNotification"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "finalNotification"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "finalNotification"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "finalNotification"
                                                            ] = await $steps[
                                                              "finalNotification"
                                                            ];
                                                          }
                                                        },
                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem9",
                                                              __plasmic_idx_0,
                                                              __plasmic_idx_1,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem9[][].isSelected"
                                                          }
                                                        ],

                                                        [
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1
                                                        ],

                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem9[][].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) =>
                                                              (() => {
                                                                try {
                                                                  return (
                                                                    $state.tagSelector[
                                                                      leadIndex
                                                                    ].value.filter(
                                                                      i =>
                                                                        i.uuid ===
                                                                        tag.uuid
                                                                    ).length ===
                                                                    1
                                                                  );
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return false;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                          }
                                                        ],

                                                        [
                                                          __plasmic_idx_0,
                                                          __plasmic_idx_1
                                                        ]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem9"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem9
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })();
                                                  }
                                                ),
                                                onLoadingChange:
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "tagDropdown",
                                                      __plasmic_idx_0,
                                                      "loading"
                                                    ]
                                                  ),
                                                onSearch:
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "tagDropdown",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ),
                                                placement: "bottomRight",
                                                ref: ref => {
                                                  $refs["tagDropdown"] = ref;
                                                },
                                                searchValue:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "tagDropdown",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ),
                                                searchable: true,
                                                trigger: "click",
                                                triggerContent: (() => {
                                                  const child$Props = {
                                                    className: classNames(
                                                      "__wab_instance",
                                                      sty.tagSelector
                                                    ),
                                                    onValueChange:
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "tagSelector",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      ),
                                                    value:
                                                      generateStateValueProp(
                                                        $state,
                                                        [
                                                          "tagSelector",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      )
                                                  };
                                                  initializePlasmicStates(
                                                    $state,
                                                    [
                                                      {
                                                        name: "tagSelector[].value",
                                                        initFunc: ({
                                                          $props,
                                                          $state,
                                                          $queries
                                                        }) =>
                                                          (() => {
                                                            try {
                                                              return lead.tags;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return [];
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                      }
                                                    ],

                                                    [__plasmic_idx_0]
                                                  );
                                                  return (
                                                    <TagSelector
                                                      data-plasmic-name={
                                                        "tagSelector"
                                                      }
                                                      data-plasmic-override={
                                                        overrides.tagSelector
                                                      }
                                                      {...child$Props}
                                                    />
                                                  );
                                                })()
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "loading",
                                                    plasmicStateName:
                                                      "tagDropdown[].loading"
                                                  },
                                                  {
                                                    name: "searchValue",
                                                    plasmicStateName:
                                                      "tagDropdown[].searchValue"
                                                  }
                                                ],

                                                [__plasmic_idx_0],
                                                undefined ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "tagDropdown[].loading",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) =>
                                                      (() => {
                                                        try {
                                                          return $queries
                                                            .searchTags
                                                            .isLoading;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()
                                                  },
                                                  {
                                                    name: "tagDropdown[].searchValue",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => ""
                                                  }
                                                ],

                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <Dropdown
                                                  data-plasmic-name={
                                                    "tagDropdown"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.tagDropdown
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()
                                          }
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__uZ3R1
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.tags)}
                          initialWidth={100}
                          maxWidth={200}
                          minWidth={100}
                          title={"Etiquetas"}
                        />

                        <AdvancedTableColumn
                          data-plasmic-name={"actions"}
                          data-plasmic-override={overrides.actions}
                          align={"center"}
                          cells={
                            <DataCtxReader__>
                              {$ctx =>
                                (_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return (() => {
                                        if ($queries.findManyLeads.isLoading)
                                          return Array.from({ length: 10 });
                                        return $queries.findManyLeads.data
                                          .response.results;
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const lead = __plasmic_item_0;
                                  const leadIndex = __plasmic_idx_0;
                                  return (
                                    <AdvancedTableCell
                                      align={"center"}
                                      cellContent={
                                        <DataCtxReader__>
                                          {$ctx =>
                                            (() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.dropdown2
                                                ),
                                                closeOnSelect: true,
                                                isEmpty: false,
                                                loading: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "dropdown2",
                                                    __plasmic_idx_0,
                                                    "loading"
                                                  ]
                                                ),
                                                maxHeight: "200px",
                                                menuContent: (
                                                  <React.Fragment>
                                                    {(() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        label:
                                                          "Editar Prospecto",
                                                        leftSection: (
                                                          <Icon
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.icon__p1Wwq
                                                            )}
                                                            color={"#868E96"}
                                                            icon={
                                                              "PencilSimpleLine"
                                                            }
                                                            size={16}
                                                            variant={"regular"}
                                                          />
                                                        ),

                                                        onClick: async () => {
                                                          const $steps = {};
                                                          $steps["openModal"] =
                                                            true
                                                              ? (() => {
                                                                  const actionArgs =
                                                                    {
                                                                      variable:
                                                                        {
                                                                          objRoot:
                                                                            $state,
                                                                          variablePath:
                                                                            [
                                                                              "drawers",
                                                                              "lead",
                                                                              "opened"
                                                                            ]
                                                                        },
                                                                      operation: 4
                                                                    };
                                                                  return (({
                                                                    variable,
                                                                    value,
                                                                    startIndex,
                                                                    deleteCount
                                                                  }) => {
                                                                    if (
                                                                      !variable
                                                                    ) {
                                                                      return;
                                                                    }
                                                                    const {
                                                                      objRoot,
                                                                      variablePath
                                                                    } =
                                                                      variable;
                                                                    const oldValue =
                                                                      $stateGet(
                                                                        objRoot,
                                                                        variablePath
                                                                      );
                                                                    $stateSet(
                                                                      objRoot,
                                                                      variablePath,
                                                                      !oldValue
                                                                    );
                                                                    return !oldValue;
                                                                  })?.apply(
                                                                    null,
                                                                    [actionArgs]
                                                                  );
                                                                })()
                                                              : undefined;
                                                          if (
                                                            $steps[
                                                              "openModal"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "openModal"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "openModal"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "openModal"
                                                            ] = await $steps[
                                                              "openModal"
                                                            ];
                                                          }
                                                          $steps["passData"] =
                                                            true
                                                              ? (() => {
                                                                  const actionArgs =
                                                                    {
                                                                      variable:
                                                                        {
                                                                          objRoot:
                                                                            $state,
                                                                          variablePath:
                                                                            [
                                                                              "drawers",
                                                                              "lead",
                                                                              "data"
                                                                            ]
                                                                        },
                                                                      operation: 0,
                                                                      value:
                                                                        lead
                                                                    };
                                                                  return (({
                                                                    variable,
                                                                    value,
                                                                    startIndex,
                                                                    deleteCount
                                                                  }) => {
                                                                    if (
                                                                      !variable
                                                                    ) {
                                                                      return;
                                                                    }
                                                                    const {
                                                                      objRoot,
                                                                      variablePath
                                                                    } =
                                                                      variable;
                                                                    $stateSet(
                                                                      objRoot,
                                                                      variablePath,
                                                                      value
                                                                    );
                                                                    return value;
                                                                  })?.apply(
                                                                    null,
                                                                    [actionArgs]
                                                                  );
                                                                })()
                                                              : undefined;
                                                          if (
                                                            $steps[
                                                              "passData"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "passData"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "passData"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps["passData"] =
                                                              await $steps[
                                                                "passData"
                                                              ];
                                                          }
                                                        },
                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem[].isSelected"
                                                          }
                                                        ],

                                                        [__plasmic_idx_0],
                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem[].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) => false
                                                          }
                                                        ],

                                                        [__plasmic_idx_0]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })()}
                                                    {(() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem2
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem2",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        label:
                                                          "Crear Cotizaci\u00f3n",
                                                        leftSection: (
                                                          <Icon
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.icon__iYqV
                                                            )}
                                                            color={"#868E96"}
                                                            icon={"Calculator"}
                                                            size={16}
                                                            variant={"regular"}
                                                          />
                                                        ),

                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem2",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem2[].isSelected"
                                                          }
                                                        ],

                                                        [__plasmic_idx_0],
                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem2[].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) => false
                                                          }
                                                        ],

                                                        [__plasmic_idx_0]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem2"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem2
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })()}
                                                    {(() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem3
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem3",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        label:
                                                          "Convertir en Cliente",
                                                        leftSection: (
                                                          <Icon
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.icon__jrlDu
                                                            )}
                                                            color={"#868E96"}
                                                            icon={"Handshake"}
                                                            size={16}
                                                            variant={"regular"}
                                                          />
                                                        ),

                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem3",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem3[].isSelected"
                                                          }
                                                        ],

                                                        [__plasmic_idx_0],
                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem3[].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) => false
                                                          }
                                                        ],

                                                        [__plasmic_idx_0]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem3"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem3
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })()}
                                                    <Divider
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.divider__bxEZm
                                                      )}
                                                      dashed={false}
                                                      margin={"0px"}
                                                      orientation={"left"}
                                                      orientationMargin={"0px"}
                                                      type={"horizontal"}
                                                    />

                                                    {(() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem4
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem4",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        label: (() => {
                                                          try {
                                                            return (() => {
                                                              return lead.isActive
                                                                ? "Marcar como Inactivo"
                                                                : "Activar Prospecto";
                                                            })();
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })(),
                                                        leftSection: (
                                                          <Icon
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.icon___11WAx
                                                            )}
                                                            color={"#868E96"}
                                                            icon={"Prohibit"}
                                                            size={16}
                                                            variant={"regular"}
                                                          />
                                                        ),

                                                        onClick: async () => {
                                                          const $steps = {};
                                                          $steps[
                                                            "openConfirmation"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    variable: {
                                                                      objRoot:
                                                                        $state,
                                                                      variablePath:
                                                                        [
                                                                          "confirmations",
                                                                          "toggle"
                                                                        ]
                                                                    },
                                                                    operation: 0,
                                                                    value: {
                                                                      opened:
                                                                        true,
                                                                      data: lead
                                                                    }
                                                                  };
                                                                return (({
                                                                  variable,
                                                                  value,
                                                                  startIndex,
                                                                  deleteCount
                                                                }) => {
                                                                  if (
                                                                    !variable
                                                                  ) {
                                                                    return;
                                                                  }
                                                                  const {
                                                                    objRoot,
                                                                    variablePath
                                                                  } = variable;
                                                                  $stateSet(
                                                                    objRoot,
                                                                    variablePath,
                                                                    value
                                                                  );
                                                                  return value;
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "openConfirmation"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "openConfirmation"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "openConfirmation"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "openConfirmation"
                                                            ] = await $steps[
                                                              "openConfirmation"
                                                            ];
                                                          }
                                                        },
                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem4",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem4[].isSelected"
                                                          }
                                                        ],

                                                        [__plasmic_idx_0],
                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem4[].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) => false
                                                          }
                                                        ],

                                                        [__plasmic_idx_0]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem4"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem4
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })()}
                                                    {(() => {
                                                      const child$Props = {
                                                        className: classNames(
                                                          "__wab_instance",
                                                          sty.dropdownItem5
                                                        ),
                                                        disabled: false,
                                                        isSelected:
                                                          generateStateValueProp(
                                                            $state,
                                                            [
                                                              "dropdownItem5",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        label:
                                                          "Eliminar Prospecto",
                                                        leftSection: (
                                                          <Icon
                                                            className={classNames(
                                                              "__wab_instance",
                                                              sty.icon__legn9
                                                            )}
                                                            color={"#868E96"}
                                                            icon={"Trash"}
                                                            size={16}
                                                            variant={"regular"}
                                                          />
                                                        ),

                                                        onClick: async () => {
                                                          const $steps = {};
                                                          $steps[
                                                            "openConfirmation"
                                                          ] = true
                                                            ? (() => {
                                                                const actionArgs =
                                                                  {
                                                                    variable: {
                                                                      objRoot:
                                                                        $state,
                                                                      variablePath:
                                                                        [
                                                                          "confirmations",
                                                                          "delete"
                                                                        ]
                                                                    },
                                                                    operation: 0,
                                                                    value: {
                                                                      opened:
                                                                        true,
                                                                      data: lead
                                                                    }
                                                                  };
                                                                return (({
                                                                  variable,
                                                                  value,
                                                                  startIndex,
                                                                  deleteCount
                                                                }) => {
                                                                  if (
                                                                    !variable
                                                                  ) {
                                                                    return;
                                                                  }
                                                                  const {
                                                                    objRoot,
                                                                    variablePath
                                                                  } = variable;
                                                                  $stateSet(
                                                                    objRoot,
                                                                    variablePath,
                                                                    value
                                                                  );
                                                                  return value;
                                                                })?.apply(
                                                                  null,
                                                                  [actionArgs]
                                                                );
                                                              })()
                                                            : undefined;
                                                          if (
                                                            $steps[
                                                              "openConfirmation"
                                                            ] != null &&
                                                            typeof $steps[
                                                              "openConfirmation"
                                                            ] === "object" &&
                                                            typeof $steps[
                                                              "openConfirmation"
                                                            ].then ===
                                                              "function"
                                                          ) {
                                                            $steps[
                                                              "openConfirmation"
                                                            ] = await $steps[
                                                              "openConfirmation"
                                                            ];
                                                          }
                                                        },
                                                        onIsSelectedChange:
                                                          generateStateOnChangeProp(
                                                            $state,
                                                            [
                                                              "dropdownItem5",
                                                              __plasmic_idx_0,
                                                              "isSelected"
                                                            ]
                                                          ),
                                                        selectedPosition:
                                                          "right"
                                                      };
                                                      initializeCodeComponentStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "isSelected",
                                                            plasmicStateName:
                                                              "dropdownItem5[].isSelected"
                                                          }
                                                        ],

                                                        [__plasmic_idx_0],
                                                        undefined ?? {},
                                                        child$Props
                                                      );
                                                      initializePlasmicStates(
                                                        $state,
                                                        [
                                                          {
                                                            name: "dropdownItem5[].isSelected",
                                                            initFunc: ({
                                                              $props,
                                                              $state,
                                                              $queries
                                                            }) => false
                                                          }
                                                        ],

                                                        [__plasmic_idx_0]
                                                      );
                                                      return (
                                                        <DropdownItem
                                                          data-plasmic-name={
                                                            "dropdownItem5"
                                                          }
                                                          data-plasmic-override={
                                                            overrides.dropdownItem5
                                                          }
                                                          {...child$Props}
                                                        />
                                                      );
                                                    })()}
                                                  </React.Fragment>
                                                ),

                                                onLoadingChange:
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "dropdown2",
                                                      __plasmic_idx_0,
                                                      "loading"
                                                    ]
                                                  ),
                                                onSearch:
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "dropdown2",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ),
                                                placement: "bottomRight",
                                                ref: ref => {
                                                  $refs["dropdown2"] = ref;
                                                },
                                                searchValue:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "dropdown2",
                                                      __plasmic_idx_0,
                                                      "searchValue"
                                                    ]
                                                  ),
                                                searchable: false,
                                                trigger: "click",
                                                triggerContent: (
                                                  <Button
                                                    block={false}
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.button__wVbNg
                                                    )}
                                                    danger={false}
                                                    disabled={false}
                                                    ghost={false}
                                                    icon={
                                                      <Icon
                                                        className={classNames(
                                                          "__wab_instance",
                                                          sty.icon__jxCav
                                                        )}
                                                        icon={
                                                          "DotsThreeVertical"
                                                        }
                                                        size={16}
                                                        variant={"regular"}
                                                      />
                                                    }
                                                    iconPosition={"start"}
                                                    isSubmit={false}
                                                    label={``}
                                                    loading={false}
                                                    size={"medium"}
                                                    target={"_self"}
                                                    type={"text"}
                                                  />
                                                ),

                                                width: "200px"
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "loading",
                                                    plasmicStateName:
                                                      "dropdown2[].loading"
                                                  },
                                                  {
                                                    name: "searchValue",
                                                    plasmicStateName:
                                                      "dropdown2[].searchValue"
                                                  }
                                                ],

                                                [__plasmic_idx_0],
                                                undefined ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "dropdown2[].loading",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => false
                                                  },
                                                  {
                                                    name: "dropdown2[].searchValue",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => ""
                                                  }
                                                ],

                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <Dropdown
                                                  data-plasmic-name={
                                                    "dropdown2"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.dropdown2
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()
                                          }
                                        </DataCtxReader__>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.advancedTableCell__mEj2F
                                      )}
                                      index={(() => {
                                        try {
                                          return leadIndex;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={leadIndex}
                                      loading={(() => {
                                        try {
                                          return $queries.findManyLeads
                                            .isLoading;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return false;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      size={"medium"}
                                    />
                                  );
                                })
                              }
                            </DataCtxReader__>
                          }
                          className={classNames("__wab_instance", sty.actions)}
                          initialWidth={60}
                          maxWidth={60}
                          minWidth={60}
                          title={``}
                        />
                      </React.Fragment>
                    }
                    name={"leads"}
                    ref={ref => {
                      $refs["leadsTable"] = ref;
                    }}
                  />
                ) : null}
                <Drawer
                  data-plasmic-name={"leadDrawer"}
                  data-plasmic-override={overrides.leadDrawer}
                  bodyPadding={"0px"}
                  className={classNames("__wab_instance", sty.leadDrawer)}
                  content={
                    <Form
                      data-plasmic-name={"leadForm"}
                      data-plasmic-override={overrides.leadForm}
                      className={classNames("__wab_instance", sty.leadForm)}
                      content={
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"bodyContainer"}
                          data-plasmic-override={overrides.bodyContainer}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.bodyContainer
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"leftColumn"}
                            data-plasmic-override={overrides.leftColumn}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.leftColumn
                            )}
                          >
                            <Segmented
                              data-plasmic-name={"leadType"}
                              data-plasmic-override={overrides.leadType}
                              block={true}
                              className={classNames(
                                "__wab_instance",
                                sty.leadType
                              )}
                              disabled={false}
                              onChange={generateStateOnChangeProp($state, [
                                "leadType",
                                "value"
                              ])}
                              options={[
                                {
                                  label: "Particular",
                                  value: "particular",
                                  icon: "User",
                                  disabled: false
                                },
                                {
                                  label: "Empresa",
                                  value: "enterprise",
                                  icon: "BuildingApartment",
                                  disabled: false
                                }
                              ]}
                              size={"middle"}
                              value={generateStateValueProp($state, [
                                "leadType",
                                "value"
                              ])}
                            />

                            {(() => {
                              try {
                                return $state.leadType.value === "enterprise";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormField
                                data-plasmic-name={"tradeName"}
                                data-plasmic-override={overrides.tradeName}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tradeName
                                )}
                                content={
                                  <Input
                                    data-plasmic-name={"tradeNameInput"}
                                    data-plasmic-override={
                                      overrides.tradeNameInput
                                    }
                                    allowClear={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tradeNameInput
                                    )}
                                    debounce={0}
                                    disabled={false}
                                    leftIcon={null}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["tradeNameInput", "value"]
                                    )}
                                    placeholder={"Distribuidora Gonz\u00e1lez"}
                                    rightIcon={null}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "tradeNameInput",
                                      "value"
                                    ])}
                                    variant={"outlined"}
                                  />
                                }
                                error={generateStateValueProp($state, [
                                  "tradeName",
                                  "error"
                                ])}
                                label={"Nombre Comercial"}
                                name={"tradeName"}
                                onErrorChange={generateStateOnChangeProp(
                                  $state,
                                  ["tradeName", "error"]
                                )}
                                ref={ref => {
                                  $refs["tradeName"] = ref;
                                }}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.leadType.value === "particular";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormField
                                data-plasmic-name={"leadName"}
                                data-plasmic-override={overrides.leadName}
                                className={classNames(
                                  "__wab_instance",
                                  sty.leadName
                                )}
                                content={
                                  <Input
                                    data-plasmic-name={"leadNameInput"}
                                    data-plasmic-override={
                                      overrides.leadNameInput
                                    }
                                    allowClear={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.leadNameInput
                                    )}
                                    debounce={0}
                                    disabled={false}
                                    leftIcon={null}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["leadNameInput", "value"]
                                    )}
                                    placeholder={"Alejandro"}
                                    rightIcon={null}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "leadNameInput",
                                      "value"
                                    ])}
                                    variant={"outlined"}
                                  />
                                }
                                error={generateStateValueProp($state, [
                                  "leadName",
                                  "error"
                                ])}
                                label={"Nombre(s)"}
                                name={"name"}
                                onErrorChange={generateStateOnChangeProp(
                                  $state,
                                  ["leadName", "error"]
                                )}
                                ref={ref => {
                                  $refs["leadName"] = ref;
                                }}
                              />
                            ) : null}
                            {(() => {
                              try {
                                return $state.leadType.value === "particular";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"row"}
                                data-plasmic-override={overrides.row}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.row)}
                              >
                                <FormField
                                  data-plasmic-name={"leadMiddleName"}
                                  data-plasmic-override={
                                    overrides.leadMiddleName
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.leadMiddleName
                                  )}
                                  content={
                                    <Input
                                      data-plasmic-name={"leadMiddleNameInput"}
                                      data-plasmic-override={
                                        overrides.leadMiddleNameInput
                                      }
                                      allowClear={false}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.leadMiddleNameInput
                                      )}
                                      debounce={0}
                                      disabled={false}
                                      leftIcon={null}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["leadMiddleNameInput", "value"]
                                      )}
                                      placeholder={"Murillo"}
                                      rightIcon={null}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "leadMiddleNameInput",
                                        "value"
                                      ])}
                                      variant={"outlined"}
                                    />
                                  }
                                  error={generateStateValueProp($state, [
                                    "leadMiddleName",
                                    "error"
                                  ])}
                                  label={"Apellido Paterno"}
                                  name={"middleName"}
                                  onErrorChange={generateStateOnChangeProp(
                                    $state,
                                    ["leadMiddleName", "error"]
                                  )}
                                  ref={ref => {
                                    $refs["leadMiddleName"] = ref;
                                  }}
                                />

                                <FormField
                                  data-plasmic-name={"leadLastName"}
                                  data-plasmic-override={overrides.leadLastName}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.leadLastName
                                  )}
                                  content={
                                    <Input
                                      data-plasmic-name={"leadLastNameInput"}
                                      data-plasmic-override={
                                        overrides.leadLastNameInput
                                      }
                                      allowClear={false}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.leadLastNameInput
                                      )}
                                      debounce={0}
                                      disabled={false}
                                      leftIcon={null}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["leadLastNameInput", "value"]
                                      )}
                                      placeholder={"Gonz\u00e1lez"}
                                      rightIcon={null}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "leadLastNameInput",
                                        "value"
                                      ])}
                                      variant={"outlined"}
                                    />
                                  }
                                  error={generateStateValueProp($state, [
                                    "leadLastName",
                                    "error"
                                  ])}
                                  label={"Apellido Materno"}
                                  name={"lastName"}
                                  onErrorChange={generateStateOnChangeProp(
                                    $state,
                                    ["leadLastName", "error"]
                                  )}
                                  ref={ref => {
                                    $refs["leadLastName"] = ref;
                                  }}
                                />
                              </Stack__>
                            ) : null}
                            <Divider
                              className={classNames(
                                "__wab_instance",
                                sty.divider__dIAr
                              )}
                              dashed={false}
                              margin={"32px 0 0"}
                              orientation={"left"}
                              orientationMargin={"0px"}
                              text={"Datos de Contacto"}
                              type={"horizontal"}
                            />

                            <FormField
                              data-plasmic-name={"leadEmail"}
                              data-plasmic-override={overrides.leadEmail}
                              className={classNames(
                                "__wab_instance",
                                sty.leadEmail
                              )}
                              content={
                                <Input
                                  data-plasmic-name={"leadEmailInput"}
                                  data-plasmic-override={
                                    overrides.leadEmailInput
                                  }
                                  allowClear={false}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.leadEmailInput
                                  )}
                                  debounce={0}
                                  disabled={false}
                                  leftIcon={
                                    <DataCtxReader__>
                                      {$ctx => (
                                        <Icon
                                          className={classNames(
                                            "__wab_instance",
                                            sty.icon__f8La6
                                          )}
                                          color={"#868E96"}
                                          icon={"Envelope"}
                                          size={16}
                                          variant={"regular"}
                                        />
                                      )}
                                    </DataCtxReader__>
                                  }
                                  onChange={generateStateOnChangeProp($state, [
                                    "leadEmailInput",
                                    "value"
                                  ])}
                                  placeholder={"mail@empresa.com"}
                                  rightIcon={null}
                                  size={"middle"}
                                  value={generateStateValueProp($state, [
                                    "leadEmailInput",
                                    "value"
                                  ])}
                                  variant={"outlined"}
                                />
                              }
                              error={generateStateValueProp($state, [
                                "leadEmail",
                                "error"
                              ])}
                              label={"Correo Electr\u00f3nico"}
                              name={"email"}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "leadEmail",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["leadEmail"] = ref;
                              }}
                            />

                            <FormField
                              data-plasmic-name={"leadCellphone"}
                              data-plasmic-override={overrides.leadCellphone}
                              className={classNames(
                                "__wab_instance",
                                sty.leadCellphone
                              )}
                              content={
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__sQkg6
                                  )}
                                >
                                  <Select
                                    data-plasmic-name={"leadCellphoneCodeInput"}
                                    data-plasmic-override={
                                      overrides.leadCellphoneCodeInput
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.leadCellphoneCodeInput
                                    )}
                                    isEmpty={false}
                                    loading={false}
                                    menuContent={(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $queries.findCountries.data.response
                                            .filter(
                                              i =>
                                                i.idd.root || i.idd.suffixes[0]
                                            )
                                            .sort((a, b) => {
                                              const rootA = a.idd.root.replace(
                                                "+",
                                                ""
                                              );
                                              const rootB = b.idd.root.replace(
                                                "+",
                                                ""
                                              );
                                              const suffixA = a.idd.suffixes[0];
                                              const suffixB = b.idd.suffixes[0];
                                              const finalA = parseInt(
                                                `${rootA}${suffixA}`
                                              );
                                              const finalB = parseInt(
                                                `${rootB}${suffixB}`
                                              );
                                              if (finalA < finalB) {
                                                return -1;
                                              }
                                              if (finalA > finalB) {
                                                return 1;
                                              }
                                              return 0;
                                            });
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const code = __plasmic_item_0;
                                        const currentCode = __plasmic_idx_0;
                                        return (() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.dropdownItem11
                                            ),
                                            disabled: false,
                                            isSelected: generateStateValueProp(
                                              $state,
                                              [
                                                "dropdownItem11",
                                                __plasmic_idx_0,
                                                "isSelected"
                                              ]
                                            ),
                                            key: currentCode,
                                            label: (() => {
                                              try {
                                                return `${code.idd.root}${code.idd.suffixes[0]}`;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            leftSection: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__wvNNq
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return code.flag;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            ),

                                            onClick: async () => {
                                              const $steps = {};
                                              $steps["setValue"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return $refs.leadCellphoneCodeInput.setValue(
                                                            {
                                                              label: `${code.idd.root}${code.idd.suffixes[0]}`,
                                                              value: `${code.idd.root}${code.idd.suffixes[0]}`,
                                                              flag: code.flag
                                                            }
                                                          );
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["setValue"] != null &&
                                                typeof $steps["setValue"] ===
                                                  "object" &&
                                                typeof $steps["setValue"]
                                                  .then === "function"
                                              ) {
                                                $steps["setValue"] =
                                                  await $steps["setValue"];
                                              }
                                            },
                                            onIsSelectedChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "dropdownItem11",
                                                  __plasmic_idx_0,
                                                  "isSelected"
                                                ]
                                              ),
                                            selectedPosition: "right"
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "isSelected",
                                                plasmicStateName:
                                                  "dropdownItem11[].isSelected"
                                              }
                                            ],

                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "dropdownItem11[].isSelected",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) =>
                                                  (() => {
                                                    try {
                                                      return (
                                                        $state
                                                          .leadCellphoneCodeInput
                                                          .value.value ===
                                                        `${code.idd.root}${code.idd.suffixes[0]}`
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                              }
                                            ],

                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <DropdownItem
                                              data-plasmic-name={
                                                "dropdownItem11"
                                              }
                                              data-plasmic-override={
                                                overrides.dropdownItem11
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })();
                                      }
                                    )}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["leadCellphoneCodeInput", "value"]
                                    )}
                                    onSearch={generateStateOnChangeProp(
                                      $state,
                                      ["leadCellphoneCodeInput", "searchValue"]
                                    )}
                                    placeholder={"Seleccionar..."}
                                    ref={ref => {
                                      $refs["leadCellphoneCodeInput"] = ref;
                                    }}
                                    searchValue={generateStateValueProp(
                                      $state,
                                      ["leadCellphoneCodeInput", "searchValue"]
                                    )}
                                    searchable={false}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "leadCellphoneCodeInput",
                                      "value"
                                    ])}
                                    valueContent={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__emuEv
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (() => {
                                                return $state
                                                  .leadCellphoneCodeInput.value
                                                  .flag;
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    }
                                  />

                                  <Input
                                    data-plasmic-name={"leadCellphoneInput"}
                                    data-plasmic-override={
                                      overrides.leadCellphoneInput
                                    }
                                    allowClear={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.leadCellphoneInput
                                    )}
                                    debounce={0}
                                    disabled={false}
                                    error={(() => {
                                      try {
                                        return (() => {
                                          return $state.leadCellphone.error;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    leftIcon={
                                      <DataCtxReader__>
                                        {$ctx => (
                                          <Icon
                                            className={classNames(
                                              "__wab_instance",
                                              sty.icon__e3GUj
                                            )}
                                            color={"#868E96"}
                                            icon={"DeviceMobileSpeaker"}
                                            size={16}
                                            variant={"regular"}
                                          />
                                        )}
                                      </DataCtxReader__>
                                    }
                                    mask={"99 9999 9999"}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["leadCellphoneInput", "value"]
                                    )}
                                    placeholder={"33 9999 9999"}
                                    rightIcon={null}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "leadCellphoneInput",
                                      "value"
                                    ])}
                                    variant={"outlined"}
                                  />
                                </Stack__>
                              }
                              error={generateStateValueProp($state, [
                                "leadCellphone",
                                "error"
                              ])}
                              label={"Tel\u00e9fono Celular"}
                              name={"cellphone"}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "leadCellphone",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["leadCellphone"] = ref;
                              }}
                            />

                            <FormField
                              data-plasmic-name={"leadPhone"}
                              data-plasmic-override={overrides.leadPhone}
                              className={classNames(
                                "__wab_instance",
                                sty.leadPhone
                              )}
                              content={
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__g17V
                                  )}
                                >
                                  <Select
                                    data-plasmic-name={"leadPhoneCodeInput"}
                                    data-plasmic-override={
                                      overrides.leadPhoneCodeInput
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.leadPhoneCodeInput
                                    )}
                                    isEmpty={false}
                                    loading={false}
                                    menuContent={(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return (() => {
                                            return $queries.findCountries.data.response
                                              .filter(
                                                i =>
                                                  i.idd.root ||
                                                  i.idd.suffixes[0]
                                              )
                                              .sort((a, b) => {
                                                const rootA =
                                                  a.idd.root.replace("+", "");
                                                const rootB =
                                                  b.idd.root.replace("+", "");
                                                const suffixA =
                                                  a.idd.suffixes[0];
                                                const suffixB =
                                                  b.idd.suffixes[0];
                                                const finalA = parseInt(
                                                  `${rootA}${suffixA}`
                                                );
                                                const finalB = parseInt(
                                                  `${rootB}${suffixB}`
                                                );
                                                if (finalA < finalB) {
                                                  return -1;
                                                }
                                                if (finalA > finalB) {
                                                  return 1;
                                                }
                                                return 0;
                                              });
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const code = __plasmic_item_0;
                                        const currentCode = __plasmic_idx_0;
                                        return (() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.dropdownItem10
                                            ),
                                            disabled: false,
                                            isSelected: generateStateValueProp(
                                              $state,
                                              [
                                                "dropdownItem10",
                                                __plasmic_idx_0,
                                                "isSelected"
                                              ]
                                            ),
                                            key: currentCode,
                                            label: (() => {
                                              try {
                                                return `${code.idd.root}${code.idd.suffixes[0]}`;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            leftSection: (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__jv7Jk
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return (() => {
                                                        return code.flag;
                                                      })();
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            ),

                                            onClick: async () => {
                                              const $steps = {};
                                              $steps["setValue"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return (() => {
                                                            return $refs.leadPhoneCodeInput.setValue(
                                                              {
                                                                label: `${code.idd.root}${code.idd.suffixes[0]}`,
                                                                value: `${code.idd.root}${code.idd.suffixes[0]}`,
                                                                flag: code.flag
                                                              }
                                                            );
                                                          })();
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["setValue"] != null &&
                                                typeof $steps["setValue"] ===
                                                  "object" &&
                                                typeof $steps["setValue"]
                                                  .then === "function"
                                              ) {
                                                $steps["setValue"] =
                                                  await $steps["setValue"];
                                              }
                                            },
                                            onIsSelectedChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "dropdownItem10",
                                                  __plasmic_idx_0,
                                                  "isSelected"
                                                ]
                                              ),
                                            selectedPosition: "right"
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "isSelected",
                                                plasmicStateName:
                                                  "dropdownItem10[].isSelected"
                                              }
                                            ],

                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "dropdownItem10[].isSelected",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) =>
                                                  (() => {
                                                    try {
                                                      return (
                                                        $state
                                                          .leadPhoneCodeInput
                                                          .value.value ===
                                                        `${code.idd.root}${code.idd.suffixes[0]}`
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                              }
                                            ],

                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <DropdownItem
                                              data-plasmic-name={
                                                "dropdownItem10"
                                              }
                                              data-plasmic-override={
                                                overrides.dropdownItem10
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })();
                                      }
                                    )}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["leadPhoneCodeInput", "value"]
                                    )}
                                    onSearch={generateStateOnChangeProp(
                                      $state,
                                      ["leadPhoneCodeInput", "searchValue"]
                                    )}
                                    placeholder={"Seleccionar..."}
                                    ref={ref => {
                                      $refs["leadPhoneCodeInput"] = ref;
                                    }}
                                    searchValue={generateStateValueProp(
                                      $state,
                                      ["leadPhoneCodeInput", "searchValue"]
                                    )}
                                    searchable={false}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "leadPhoneCodeInput",
                                      "value"
                                    ])}
                                    valueContent={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mZhlz
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (() => {
                                                return $state.leadPhoneCodeInput
                                                  .value.flag;
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    }
                                  />

                                  <Input
                                    data-plasmic-name={"leadPhoneInput"}
                                    data-plasmic-override={
                                      overrides.leadPhoneInput
                                    }
                                    allowClear={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.leadPhoneInput
                                    )}
                                    debounce={0}
                                    disabled={false}
                                    error={(() => {
                                      try {
                                        return (() => {
                                          return $state.leadPhone.error;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    leftIcon={
                                      <DataCtxReader__>
                                        {$ctx => (
                                          <Icon
                                            className={classNames(
                                              "__wab_instance",
                                              sty.icon__i7D1I
                                            )}
                                            color={"#868E96"}
                                            icon={"Phone"}
                                            size={16}
                                            variant={"regular"}
                                          />
                                        )}
                                      </DataCtxReader__>
                                    }
                                    mask={"99 9999 9999"}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["leadPhoneInput", "value"]
                                    )}
                                    placeholder={"33 9999 9999"}
                                    rightIcon={null}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "leadPhoneInput",
                                      "value"
                                    ])}
                                    variant={"outlined"}
                                  />
                                </Stack__>
                              }
                              error={generateStateValueProp($state, [
                                "leadPhone",
                                "error"
                              ])}
                              label={"Tel\u00e9fono Fijo"}
                              name={"phone"}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "leadPhone",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["leadPhone"] = ref;
                              }}
                            />

                            {(() => {
                              try {
                                return $state.leadType.value === "enterprise";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <FormField
                                data-plasmic-name={"leadWebsite"}
                                data-plasmic-override={overrides.leadWebsite}
                                className={classNames(
                                  "__wab_instance",
                                  sty.leadWebsite
                                )}
                                content={
                                  <Input
                                    data-plasmic-name={"leadWebsiteInput"}
                                    data-plasmic-override={
                                      overrides.leadWebsiteInput
                                    }
                                    allowClear={false}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.leadWebsiteInput
                                    )}
                                    debounce={0}
                                    disabled={false}
                                    leftIcon={
                                      <DataCtxReader__>
                                        {$ctx => (
                                          <Icon
                                            className={classNames(
                                              "__wab_instance",
                                              sty.icon___3Zn1A
                                            )}
                                            color={"#868E96"}
                                            icon={"Globe"}
                                            size={16}
                                            variant={"regular"}
                                          />
                                        )}
                                      </DataCtxReader__>
                                    }
                                    mask={"99 9999 9999"}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["leadWebsiteInput", "value"]
                                    )}
                                    placeholder={"https://www.mi-empresa.com"}
                                    rightIcon={null}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "leadWebsiteInput",
                                      "value"
                                    ])}
                                    variant={"outlined"}
                                  />
                                }
                                error={generateStateValueProp($state, [
                                  "leadWebsite",
                                  "error"
                                ])}
                                label={"Sitio Web"}
                                name={"website"}
                                onErrorChange={generateStateOnChangeProp(
                                  $state,
                                  ["leadWebsite", "error"]
                                )}
                                ref={ref => {
                                  $refs["leadWebsite"] = ref;
                                }}
                              />
                            ) : null}
                            <FormField
                              data-plasmic-name={"leadAddress"}
                              data-plasmic-override={overrides.leadAddress}
                              className={classNames(
                                "__wab_instance",
                                sty.leadAddress
                              )}
                              content={
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jvfEp
                                  )}
                                >
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___4TxT3
                                    )}
                                  >
                                    <Input
                                      data-plasmic-name={"streetInput"}
                                      data-plasmic-override={
                                        overrides.streetInput
                                      }
                                      allowClear={false}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.streetInput
                                      )}
                                      debounce={0}
                                      disabled={false}
                                      leftIcon={null}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["streetInput", "value"]
                                      )}
                                      placeholder={"Calle"}
                                      rightIcon={null}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "streetInput",
                                        "value"
                                      ])}
                                      variant={"outlined"}
                                    />

                                    <Input
                                      data-plasmic-name={"extInput"}
                                      data-plasmic-override={overrides.extInput}
                                      allowClear={false}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.extInput
                                      )}
                                      debounce={0}
                                      disabled={false}
                                      leftIcon={null}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["extInput", "value"]
                                      )}
                                      placeholder={"# Ext."}
                                      rightIcon={null}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "extInput",
                                        "value"
                                      ])}
                                      variant={"outlined"}
                                    />

                                    <Input
                                      data-plasmic-name={"intInput"}
                                      data-plasmic-override={overrides.intInput}
                                      allowClear={false}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.intInput
                                      )}
                                      debounce={0}
                                      disabled={false}
                                      leftIcon={null}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["intInput", "value"]
                                      )}
                                      placeholder={"# Int."}
                                      rightIcon={null}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "intInput",
                                        "value"
                                      ])}
                                      variant={"outlined"}
                                    />
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cRe58
                                    )}
                                  >
                                    <Input
                                      data-plasmic-name={"suburbInput"}
                                      data-plasmic-override={
                                        overrides.suburbInput
                                      }
                                      allowClear={false}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.suburbInput
                                      )}
                                      debounce={0}
                                      disabled={false}
                                      leftIcon={null}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["suburbInput", "value"]
                                      )}
                                      placeholder={"Colonia"}
                                      rightIcon={null}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "suburbInput",
                                        "value"
                                      ])}
                                      variant={"outlined"}
                                    />

                                    <Input
                                      data-plasmic-name={"cpInput"}
                                      data-plasmic-override={overrides.cpInput}
                                      allowClear={false}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cpInput
                                      )}
                                      debounce={0}
                                      disabled={false}
                                      leftIcon={null}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["cpInput", "value"]
                                      )}
                                      placeholder={"CP"}
                                      rightIcon={null}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "cpInput",
                                        "value"
                                      ])}
                                      variant={"outlined"}
                                    />
                                  </Stack__>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___97OW2
                                    )}
                                  >
                                    <Input
                                      data-plasmic-name={"cityInput"}
                                      data-plasmic-override={
                                        overrides.cityInput
                                      }
                                      allowClear={false}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.cityInput
                                      )}
                                      debounce={0}
                                      disabled={false}
                                      leftIcon={null}
                                      onChange={generateStateOnChangeProp(
                                        $state,
                                        ["cityInput", "value"]
                                      )}
                                      placeholder={"Ciudad"}
                                      rightIcon={null}
                                      size={"middle"}
                                      value={generateStateValueProp($state, [
                                        "cityInput",
                                        "value"
                                      ])}
                                      variant={"outlined"}
                                    />

                                    {(() => {
                                      try {
                                        return (() => {
                                          const country =
                                            $state.countryInput.value?.value;
                                          return !(
                                            country === "México" ||
                                            country === "Canadá" ||
                                            country === "Estados Unidos"
                                          );
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Input
                                        data-plasmic-name={"unknownStateInput"}
                                        data-plasmic-override={
                                          overrides.unknownStateInput
                                        }
                                        allowClear={false}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.unknownStateInput
                                        )}
                                        debounce={0}
                                        disabled={false}
                                        leftIcon={null}
                                        onChange={generateStateOnChangeProp(
                                          $state,
                                          ["unknownStateInput", "value"]
                                        )}
                                        placeholder={"Estado"}
                                        rightIcon={null}
                                        size={"middle"}
                                        value={generateStateValueProp($state, [
                                          "unknownStateInput",
                                          "value"
                                        ])}
                                        variant={"outlined"}
                                      />
                                    ) : null}
                                    {(() => {
                                      try {
                                        return (() => {
                                          const country =
                                            $state.countryInput.value?.value;
                                          return (
                                            country === "México" ||
                                            country === "Canadá" ||
                                            country === "Estados Unidos"
                                          );
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Select
                                        data-plasmic-name={"knownStateInput"}
                                        data-plasmic-override={
                                          overrides.knownStateInput
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.knownStateInput
                                        )}
                                        isEmpty={false}
                                        loading={false}
                                        menuContent={(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return (() => {
                                                const country =
                                                  $state.countryInput.value
                                                    .value;
                                                const mexicoStates = [
                                                  "Aguascalientes",
                                                  "Baja California",
                                                  "Baja California Sur",
                                                  "Campeche",
                                                  "Chiapas",
                                                  "Chihuahua",
                                                  "Ciudad de México",
                                                  "Coahuila",
                                                  "Colima",
                                                  "Durango",
                                                  "Estado de México",
                                                  "Guanajuato",
                                                  "Guerrero",
                                                  "Hidalgo",
                                                  "Jalisco",
                                                  "Michoacán",
                                                  "Morelos",
                                                  "Nayarit",
                                                  "Nuevo León",
                                                  "Oaxaca",
                                                  "Puebla",
                                                  "Querétaro",
                                                  "Quintana Roo",
                                                  "San Luis Potosí",
                                                  "Sinaloa",
                                                  "Sonora",
                                                  "Tabasco",
                                                  "Tamaulipas",
                                                  "Tlaxcala",
                                                  "Veracruz",
                                                  "Yucatán",
                                                  "Zacatecas"
                                                ];

                                                const unitedStatesStates = [
                                                  "Alabama",
                                                  "Alaska",
                                                  "Arizona",
                                                  "Arkansas",
                                                  "California",
                                                  "Colorado",
                                                  "Connecticut",
                                                  "Delaware",
                                                  "Florida",
                                                  "Georgia",
                                                  "Hawaii",
                                                  "Idaho",
                                                  "Illinois",
                                                  "Indiana",
                                                  "Iowa",
                                                  "Kansas",
                                                  "Kentucky",
                                                  "Louisiana",
                                                  "Maine",
                                                  "Maryland",
                                                  "Massachusetts",
                                                  "Michigan",
                                                  "Minnesota",
                                                  "Mississippi",
                                                  "Missouri",
                                                  "Montana",
                                                  "Nebraska",
                                                  "Nevada",
                                                  "New Hampshire",
                                                  "New Jersey",
                                                  "New Mexico",
                                                  "New York",
                                                  "North Carolina",
                                                  "North Dakota",
                                                  "Ohio",
                                                  "Oklahoma",
                                                  "Oregon",
                                                  "Pennsylvania",
                                                  "Rhode Island",
                                                  "South Carolina",
                                                  "South Dakota",
                                                  "Tennessee",
                                                  "Texas",
                                                  "Utah",
                                                  "Vermont",
                                                  "Virginia",
                                                  "Washington",
                                                  "West Virginia",
                                                  "Wisconsin",
                                                  "Wyoming"
                                                ];

                                                const canadaStates = [
                                                  "Alberta",
                                                  "British Columbia",
                                                  "Manitoba",
                                                  "New Brunswick",
                                                  "Newfoundland and Labrador",
                                                  "Nova Scotia",
                                                  "Ontario",
                                                  "Prince Edward Island",
                                                  "Quebec",
                                                  "Saskatchewan",
                                                  "Northwest Territories",
                                                  "Nunavut",
                                                  "Yukon"
                                                ];

                                                if (country === "México") {
                                                  return mexicoStates;
                                                } else if (
                                                  country === "Canadá"
                                                ) {
                                                  return canadaStates;
                                                } else if (
                                                  country === "Estados Unidos"
                                                ) {
                                                  return unitedStatesStates;
                                                }
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_0,
                                            __plasmic_idx_0
                                          ) => {
                                            const state = __plasmic_item_0;
                                            const stateIndex = __plasmic_idx_0;
                                            return (() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.dropdownItem12
                                                ),
                                                disabled: false,
                                                isSelected:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "dropdownItem12",
                                                      __plasmic_idx_0,
                                                      "isSelected"
                                                    ]
                                                  ),
                                                key: stateIndex,
                                                label: (() => {
                                                  try {
                                                    return state;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })(),
                                                leftSection: null,
                                                onClick: async () => {
                                                  const $steps = {};
                                                  $steps["setValue"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          tplRef:
                                                            "knownStateInput",
                                                          action: "setValue",
                                                          args: [
                                                            (() => {
                                                              try {
                                                                return {
                                                                  label: state,
                                                                  value: state
                                                                };
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                          ]
                                                        };
                                                        return (({
                                                          tplRef,
                                                          action,
                                                          args
                                                        }) => {
                                                          return $refs?.[
                                                            tplRef
                                                          ]?.[action]?.(
                                                            ...(args ?? [])
                                                          );
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["setValue"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "setValue"
                                                    ] === "object" &&
                                                    typeof $steps["setValue"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["setValue"] =
                                                      await $steps["setValue"];
                                                  }
                                                },
                                                onIsSelectedChange:
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "dropdownItem12",
                                                      __plasmic_idx_0,
                                                      "isSelected"
                                                    ]
                                                  ),
                                                selectedPosition: "right"
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "isSelected",
                                                    plasmicStateName:
                                                      "dropdownItem12[].isSelected"
                                                  }
                                                ],

                                                [__plasmic_idx_0],
                                                undefined ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "dropdownItem12[].isSelected",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) =>
                                                      (() => {
                                                        try {
                                                          return (() => {
                                                            return (
                                                              $state
                                                                .knownStateInput
                                                                .value
                                                                ?.value ===
                                                              state
                                                            );
                                                          })();
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()
                                                  }
                                                ],

                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <DropdownItem
                                                  data-plasmic-name={
                                                    "dropdownItem12"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.dropdownItem12
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })();
                                          }
                                        )}
                                        onChange={generateStateOnChangeProp(
                                          $state,
                                          ["knownStateInput", "value"]
                                        )}
                                        onSearch={generateStateOnChangeProp(
                                          $state,
                                          ["knownStateInput", "searchValue"]
                                        )}
                                        placeholder={"Estado..."}
                                        ref={ref => {
                                          $refs["knownStateInput"] = ref;
                                        }}
                                        searchValue={generateStateValueProp(
                                          $state,
                                          ["knownStateInput", "searchValue"]
                                        )}
                                        searchable={true}
                                        size={"middle"}
                                        value={generateStateValueProp($state, [
                                          "knownStateInput",
                                          "value"
                                        ])}
                                      />
                                    ) : null}
                                  </Stack__>
                                  <Select
                                    data-plasmic-name={"countryInput"}
                                    data-plasmic-override={
                                      overrides.countryInput
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.countryInput
                                    )}
                                    isEmpty={(() => {
                                      try {
                                        return (
                                          $queries.findCountries.data.response
                                            ?.length === 0
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    loading={(() => {
                                      try {
                                        return $queries.findCountries.isLoading;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    menuContent={(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $queries.findCountries.data.response
                                            .sort((a, b) => {
                                              const nameA =
                                                a.translations.spa.common.toUpperCase();
                                              const nameB =
                                                b.translations.spa.common.toUpperCase();
                                              if (nameA < nameB) {
                                                return -1;
                                              }
                                              if (nameA > nameB) {
                                                return 1;
                                              }
                                              return 0;
                                            })
                                            .slice(0, 40);
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const country = __plasmic_item_0;
                                        const countryIndex = __plasmic_idx_0;
                                        return (() => {
                                          const child$Props = {
                                            className: classNames(
                                              "__wab_instance",
                                              sty.dropdownItem15
                                            ),
                                            disabled: false,
                                            isSelected: generateStateValueProp(
                                              $state,
                                              [
                                                "dropdownItem15",
                                                __plasmic_idx_0,
                                                "isSelected"
                                              ]
                                            ),
                                            key: countryIndex,
                                            label: (() => {
                                              try {
                                                return (() => {
                                                  const label =
                                                    country.translations.spa
                                                      .common;
                                                  const flag = country.flag;
                                                  return `${flag}  ${label}`;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            leftSection: null,
                                            onClick: async () => {
                                              const $steps = {};
                                              $steps["setValue"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      tplRef: "countryInput",
                                                      action: "setValue",
                                                      args: [
                                                        (() => {
                                                          try {
                                                            return (() => {
                                                              const name =
                                                                country
                                                                  .translations
                                                                  .spa.common;
                                                              const flag =
                                                                country.flag;
                                                              return {
                                                                label: name,
                                                                value: name,
                                                                flag: flag
                                                              };
                                                            })();
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return {
                                                                label: "",
                                                                value: ""
                                                              };
                                                            }
                                                            throw e;
                                                          }
                                                        })()
                                                      ]
                                                    };
                                                    return (({
                                                      tplRef,
                                                      action,
                                                      args
                                                    }) => {
                                                      return $refs?.[tplRef]?.[
                                                        action
                                                      ]?.(...(args ?? []));
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["setValue"] != null &&
                                                typeof $steps["setValue"] ===
                                                  "object" &&
                                                typeof $steps["setValue"]
                                                  .then === "function"
                                              ) {
                                                $steps["setValue"] =
                                                  await $steps["setValue"];
                                              }
                                            },
                                            onIsSelectedChange:
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "dropdownItem15",
                                                  __plasmic_idx_0,
                                                  "isSelected"
                                                ]
                                              ),
                                            selectedPosition: "right"
                                          };
                                          initializeCodeComponentStates(
                                            $state,
                                            [
                                              {
                                                name: "isSelected",
                                                plasmicStateName:
                                                  "dropdownItem15[].isSelected"
                                              }
                                            ],

                                            [__plasmic_idx_0],
                                            undefined ?? {},
                                            child$Props
                                          );
                                          initializePlasmicStates(
                                            $state,
                                            [
                                              {
                                                name: "dropdownItem15[].isSelected",
                                                initFunc: ({
                                                  $props,
                                                  $state,
                                                  $queries
                                                }) =>
                                                  (() => {
                                                    try {
                                                      return (
                                                        country.name.common ===
                                                        $state.countryInput
                                                          .value.value
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                              }
                                            ],

                                            [__plasmic_idx_0]
                                          );
                                          return (
                                            <DropdownItem
                                              data-plasmic-name={
                                                "dropdownItem15"
                                              }
                                              data-plasmic-override={
                                                overrides.dropdownItem15
                                              }
                                              {...child$Props}
                                            />
                                          );
                                        })();
                                      }
                                    )}
                                    onChange={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "countryInput",
                                        "value"
                                      ]).apply(null, eventArgs);
                                      (async value => {
                                        const $steps = {};
                                        $steps["runActionOnKnownStateInput"] =
                                          true
                                            ? (() => {
                                                const actionArgs = {
                                                  tplRef: "knownStateInput",
                                                  action: "setValue"
                                                };
                                                return (({
                                                  tplRef,
                                                  action,
                                                  args
                                                }) => {
                                                  return $refs?.[tplRef]?.[
                                                    action
                                                  ]?.(...(args ?? []));
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps[
                                            "runActionOnKnownStateInput"
                                          ] != null &&
                                          typeof $steps[
                                            "runActionOnKnownStateInput"
                                          ] === "object" &&
                                          typeof $steps[
                                            "runActionOnKnownStateInput"
                                          ].then === "function"
                                        ) {
                                          $steps["runActionOnKnownStateInput"] =
                                            await $steps[
                                              "runActionOnKnownStateInput"
                                            ];
                                        }
                                      }).apply(null, eventArgs);
                                    }}
                                    onSearch={async (...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "countryInput",
                                        "searchValue"
                                      ]).apply(null, eventArgs);
                                      (async value => {
                                        const $steps = {};
                                        $steps["setSearch"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "search",
                                                    "countries"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $state.countryInput
                                                    .searchValue
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["setSearch"] != null &&
                                          typeof $steps["setSearch"] ===
                                            "object" &&
                                          typeof $steps["setSearch"].then ===
                                            "function"
                                        ) {
                                          $steps["setSearch"] = await $steps[
                                            "setSearch"
                                          ];
                                        }
                                      }).apply(null, eventArgs);
                                    }}
                                    placeholder={"Pa\u00eds"}
                                    ref={ref => {
                                      $refs["countryInput"] = ref;
                                    }}
                                    searchValue={generateStateValueProp(
                                      $state,
                                      ["countryInput", "searchValue"]
                                    )}
                                    searchable={true}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "countryInput",
                                      "value"
                                    ])}
                                    valueContent={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ml9As
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (() => {
                                                return $state.countryInput.value
                                                  .flag;
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    }
                                  />
                                </Stack__>
                              }
                              error={generateStateValueProp($state, [
                                "leadAddress",
                                "error"
                              ])}
                              label={"Domicilio Principal"}
                              name={"address"}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "leadAddress",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["leadAddress"] = ref;
                              }}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"rightColumn"}
                            data-plasmic-override={overrides.rightColumn}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.rightColumn
                            )}
                          >
                            <FormField
                              data-plasmic-name={"leadRate"}
                              data-plasmic-override={overrides.leadRate}
                              className={classNames(
                                "__wab_instance",
                                sty.leadRate
                              )}
                              content={
                                <Rate
                                  data-plasmic-name={"leadRateInput"}
                                  data-plasmic-override={
                                    overrides.leadRateInput
                                  }
                                  allowClear={true}
                                  allowHalf={false}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.leadRateInput
                                  )}
                                  count={5}
                                  disabled={false}
                                  icon={"SketchLogo"}
                                  onValueChange={generateStateOnChangeProp(
                                    $state,
                                    ["leadRateInput", "value"]
                                  )}
                                  value={generateStateValueProp($state, [
                                    "leadRateInput",
                                    "value"
                                  ])}
                                />
                              }
                              error={generateStateValueProp($state, [
                                "leadRate",
                                "error"
                              ])}
                              label={"Calificaci\u00f3n"}
                              name={"rate"}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "leadRate",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["leadRate"] = ref;
                              }}
                            />

                            <FormField
                              data-plasmic-name={"leadResponsible"}
                              data-plasmic-override={overrides.leadResponsible}
                              className={classNames(
                                "__wab_instance",
                                sty.leadResponsible
                              )}
                              content={(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.leadResponsibleInput
                                  ),
                                  isEmpty: (() => {
                                    try {
                                      return (
                                        $queries.searchUsers.data.response
                                          .results?.length === 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  loading: (() => {
                                    try {
                                      return $queries.searchUsers.isLoading;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })(),
                                  menuContent: (_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.searchUsers.data
                                          .response.results;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const user = __plasmic_item_0;
                                    const userIndex = __plasmic_idx_0;
                                    return (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.dropdownItem16
                                        ),
                                        disabled: false,
                                        isSelected: generateStateValueProp(
                                          $state,
                                          [
                                            "dropdownItem16",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]
                                        ),
                                        key: userIndex,
                                        label: (() => {
                                          try {
                                            return (() => {
                                              const {
                                                name,
                                                middleName,
                                                lastName
                                              } = user;
                                              return $$.parseName({
                                                name,
                                                middleName,
                                                lastName
                                              });
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        leftSection: (
                                          <Avatar
                                            bordered={true}
                                            className={classNames(
                                              "__wab_instance",
                                              sty.avatar__mvFdp
                                            )}
                                            color={true ? "#1F32C4" : undefined}
                                            content={(() => {
                                              try {
                                                return (() => {
                                                  const { image, name } = user;
                                                  if (image?.url)
                                                    return image.url;
                                                  return name;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            isCircular={true}
                                            size={"xs"}
                                            type={(() => {
                                              try {
                                                return (() => {
                                                  const { image } = user;
                                                  if (image?.url)
                                                    return "image";
                                                  return "text";
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "text";
                                                }
                                                throw e;
                                              }
                                            })()}
                                            variant={"filled"}
                                          />
                                        ),

                                        onClick: async () => {
                                          const $steps = {};
                                          $steps["setValue"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  tplRef:
                                                    "leadResponsibleInput",
                                                  action: "setValue",
                                                  args: [
                                                    (() => {
                                                      try {
                                                        return (() => {
                                                          const isSelected =
                                                            user.uuid ===
                                                            $state
                                                              .leadResponsibleInput
                                                              .value.value;
                                                          if (isSelected)
                                                            return null;
                                                          return {
                                                            label:
                                                              $$.parseName(
                                                                user
                                                              ),
                                                            value: user.uuid,
                                                            image: user.image
                                                          };
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return (({
                                                  tplRef,
                                                  action,
                                                  args
                                                }) => {
                                                  return $refs?.[tplRef]?.[
                                                    action
                                                  ]?.(...(args ?? []));
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["setValue"] != null &&
                                            typeof $steps["setValue"] ===
                                              "object" &&
                                            typeof $steps["setValue"].then ===
                                              "function"
                                          ) {
                                            $steps["setValue"] = await $steps[
                                              "setValue"
                                            ];
                                          }
                                        },
                                        onIsSelectedChange:
                                          generateStateOnChangeProp($state, [
                                            "dropdownItem16",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]),
                                        selectedPosition: "right"
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "isSelected",
                                            plasmicStateName:
                                              "dropdownItem16[].isSelected"
                                          }
                                        ],

                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "dropdownItem16[].isSelected",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return (
                                                    user.uuid ===
                                                    $state.leadResponsibleInput
                                                      .value.value
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],

                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <DropdownItem
                                          data-plasmic-name={"dropdownItem16"}
                                          data-plasmic-override={
                                            overrides.dropdownItem16
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })();
                                  }),
                                  onChange: generateStateOnChangeProp($state, [
                                    "leadResponsibleInput",
                                    "value"
                                  ]),
                                  onSearch: async (...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "leadResponsibleInput",
                                      "searchValue"
                                    ]).apply(null, eventArgs);
                                    (async value => {
                                      const $steps = {};
                                      $steps["setSearch"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "search",
                                                  "users"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $state.leadResponsibleInput
                                                  .searchValue
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["setSearch"] != null &&
                                        typeof $steps["setSearch"] ===
                                          "object" &&
                                        typeof $steps["setSearch"].then ===
                                          "function"
                                      ) {
                                        $steps["setSearch"] = await $steps[
                                          "setSearch"
                                        ];
                                      }
                                    }).apply(null, eventArgs);
                                  },
                                  placeholder: "Selecionar Responsable...",
                                  ref: ref => {
                                    $refs["leadResponsibleInput"] = ref;
                                  },
                                  searchValue: generateStateValueProp($state, [
                                    "leadResponsibleInput",
                                    "searchValue"
                                  ]),
                                  searchable: true,
                                  size: "middle",
                                  value: generateStateValueProp($state, [
                                    "leadResponsibleInput",
                                    "value"
                                  ]),
                                  valueContent: (
                                    <Avatar
                                      bordered={true}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.avatar__oCoaS
                                      )}
                                      color={true ? "#1F32C4" : undefined}
                                      content={(() => {
                                        try {
                                          return (() => {
                                            const { image, label } =
                                              $state.leadResponsibleInput.value;
                                            if (image?.url) return image.url;
                                            return label;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      isCircular={true}
                                      size={"xs"}
                                      type={(() => {
                                        try {
                                          return (() => {
                                            const { image, label } =
                                              $state.leadResponsibleInput.value;
                                            if (image?.url) return "image";
                                            return "text";
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "text";
                                          }
                                          throw e;
                                        }
                                      })()}
                                      variant={"filled"}
                                    />
                                  )
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName:
                                        "leadResponsibleInput.value"
                                    },
                                    {
                                      name: "searchValue",
                                      plasmicStateName:
                                        "leadResponsibleInput.searchValue"
                                    }
                                  ],

                                  [],
                                  undefined ?? {},
                                  child$Props
                                );
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "leadResponsibleInput.value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return (() => {
                                              const user = $ctx.user;
                                              const { responsible } =
                                                $state.drawers.lead.data ?? {};
                                              if (
                                                !responsible?.uuid &&
                                                $state.drawers.lead.data?.uuid
                                              ) {
                                                return null;
                                              }
                                              return {
                                                label: responsible?.uuid
                                                  ? $$.parseName(responsible)
                                                  : $$.parseName(user),
                                                value: responsible?.uuid
                                                  ? responsible.uuid
                                                  : user.uuid,
                                                image: responsible?.uuid
                                                  ? responsible.image
                                                  : user.image
                                              };
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],

                                  []
                                );
                                return (
                                  <Select
                                    data-plasmic-name={"leadResponsibleInput"}
                                    data-plasmic-override={
                                      overrides.leadResponsibleInput
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                              error={generateStateValueProp($state, [
                                "leadResponsible",
                                "error"
                              ])}
                              label={"Responsable"}
                              name={"responsible"}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "leadResponsible",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["leadResponsible"] = ref;
                              }}
                            />

                            <FormField
                              data-plasmic-name={"leadGroup"}
                              data-plasmic-override={overrides.leadGroup}
                              className={classNames(
                                "__wab_instance",
                                sty.leadGroup
                              )}
                              content={
                                <Select
                                  data-plasmic-name={"leadGroupInput"}
                                  data-plasmic-override={
                                    overrides.leadGroupInput
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.leadGroupInput
                                  )}
                                  isEmpty={(() => {
                                    try {
                                      return (
                                        $queries.searchGroups.data.response
                                          .results?.length === 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  loading={(() => {
                                    try {
                                      return $queries.searchGroups.isLoading;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  menuContent={(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.searchGroups.data
                                          .response.results;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const group = __plasmic_item_0;
                                    const groupIndex = __plasmic_idx_0;
                                    return (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.dropdownItem17
                                        ),
                                        disabled: false,
                                        isSelected: generateStateValueProp(
                                          $state,
                                          [
                                            "dropdownItem17",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]
                                        ),
                                        key: groupIndex,
                                        label: (() => {
                                          try {
                                            return group.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        leftSection: (
                                          <Icon
                                            className={classNames(
                                              "__wab_instance",
                                              sty.icon___2I5Hn
                                            )}
                                            color={(() => {
                                              try {
                                                return group.color;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            icon={"Smiley"}
                                            size={20}
                                            variant={"duotone"}
                                          />
                                        ),

                                        onClick: async () => {
                                          const $steps = {};
                                          $steps["setValue"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  tplRef: "leadGroupInput",
                                                  action: "setValue",
                                                  args: [
                                                    (() => {
                                                      try {
                                                        return (() => {
                                                          const isSelected =
                                                            group.uuid ===
                                                            $state
                                                              .leadGroupInput
                                                              .value?.value;
                                                          return isSelected
                                                            ? undefined
                                                            : {
                                                                label:
                                                                  group.name,
                                                                color:
                                                                  group.color,
                                                                value:
                                                                  group.uuid,
                                                                icon: group.icon
                                                              };
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return (({
                                                  tplRef,
                                                  action,
                                                  args
                                                }) => {
                                                  return $refs?.[tplRef]?.[
                                                    action
                                                  ]?.(...(args ?? []));
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["setValue"] != null &&
                                            typeof $steps["setValue"] ===
                                              "object" &&
                                            typeof $steps["setValue"].then ===
                                              "function"
                                          ) {
                                            $steps["setValue"] = await $steps[
                                              "setValue"
                                            ];
                                          }
                                        },
                                        onIsSelectedChange:
                                          generateStateOnChangeProp($state, [
                                            "dropdownItem17",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]),
                                        selectedPosition: "right"
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "isSelected",
                                            plasmicStateName:
                                              "dropdownItem17[].isSelected"
                                          }
                                        ],

                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "dropdownItem17[].isSelected",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return (
                                                    group.uuid ===
                                                    $state.leadGroupInput.value
                                                      ?.value
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],

                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <DropdownItem
                                          data-plasmic-name={"dropdownItem17"}
                                          data-plasmic-override={
                                            overrides.dropdownItem17
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })();
                                  })}
                                  onChange={generateStateOnChangeProp($state, [
                                    "leadGroupInput",
                                    "value"
                                  ])}
                                  onSearch={async (...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "leadGroupInput",
                                      "searchValue"
                                    ]).apply(null, eventArgs);
                                    (async value => {
                                      const $steps = {};
                                      $steps["setSearch"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "search",
                                                  "groups"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $state.leadGroupInput
                                                  .searchValue
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["setSearch"] != null &&
                                        typeof $steps["setSearch"] ===
                                          "object" &&
                                        typeof $steps["setSearch"].then ===
                                          "function"
                                      ) {
                                        $steps["setSearch"] = await $steps[
                                          "setSearch"
                                        ];
                                      }
                                    }).apply(null, eventArgs);
                                  }}
                                  placeholder={"Selecionar Grupo..."}
                                  ref={ref => {
                                    $refs["leadGroupInput"] = ref;
                                  }}
                                  searchValue={generateStateValueProp($state, [
                                    "leadGroupInput",
                                    "searchValue"
                                  ])}
                                  searchable={true}
                                  size={"middle"}
                                  value={generateStateValueProp($state, [
                                    "leadGroupInput",
                                    "value"
                                  ])}
                                  valueContent={
                                    <Icon
                                      className={classNames(
                                        "__wab_instance",
                                        sty.icon__kjVfL
                                      )}
                                      color={(() => {
                                        try {
                                          return $state.leadGroupInput.value
                                            .color;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      icon={"Smiley"}
                                      size={20}
                                      variant={"duotone"}
                                    />
                                  }
                                />
                              }
                              error={generateStateValueProp($state, [
                                "leadGroup",
                                "error"
                              ])}
                              label={"Grupo"}
                              name={"group"}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "leadGroup",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["leadGroup"] = ref;
                              }}
                            />

                            <FormField
                              data-plasmic-name={"leadSource"}
                              data-plasmic-override={overrides.leadSource}
                              className={classNames(
                                "__wab_instance",
                                sty.leadSource
                              )}
                              content={
                                <Select
                                  data-plasmic-name={"leadSourceInput"}
                                  data-plasmic-override={
                                    overrides.leadSourceInput
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.leadSourceInput
                                  )}
                                  isEmpty={(() => {
                                    try {
                                      return (
                                        $queries.searchSources.data.response
                                          .results?.length === 0
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  loading={(() => {
                                    try {
                                      return $queries.searchSources.isLoading;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return false;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  menuContent={(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $queries.searchSources.data
                                          .response.results;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const source = __plasmic_item_0;
                                    const sourceIndex = __plasmic_idx_0;
                                    return (() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.dropdownItem18
                                        ),
                                        disabled: false,
                                        isSelected: generateStateValueProp(
                                          $state,
                                          [
                                            "dropdownItem18",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]
                                        ),
                                        key: sourceIndex,
                                        label: (() => {
                                          try {
                                            return source.name;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        leftSection: (
                                          <PlasmicImg__
                                            alt={""}
                                            className={classNames(
                                              sty.img___4SsWs
                                            )}
                                            displayHeight={"24px"}
                                            displayMaxHeight={"none"}
                                            displayMaxWidth={"100%"}
                                            displayMinHeight={"0"}
                                            displayMinWidth={"0"}
                                            displayWidth={"24px"}
                                            loading={"lazy"}
                                            src={(() => {
                                              try {
                                                return source.icon;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                          />
                                        ),

                                        onClick: async () => {
                                          const $steps = {};
                                          $steps["setValue"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  tplRef: "leadSourceInput",
                                                  action: "setValue",
                                                  args: [
                                                    (() => {
                                                      try {
                                                        return (() => {
                                                          const isSelected =
                                                            source.uuid ===
                                                            $state
                                                              .leadSourceInput
                                                              .value?.value;
                                                          return isSelected
                                                            ? undefined
                                                            : {
                                                                label:
                                                                  source.name,
                                                                icon: source.icon,
                                                                value:
                                                                  source.uuid
                                                              };
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return (({
                                                  tplRef,
                                                  action,
                                                  args
                                                }) => {
                                                  return $refs?.[tplRef]?.[
                                                    action
                                                  ]?.(...(args ?? []));
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["setValue"] != null &&
                                            typeof $steps["setValue"] ===
                                              "object" &&
                                            typeof $steps["setValue"].then ===
                                              "function"
                                          ) {
                                            $steps["setValue"] = await $steps[
                                              "setValue"
                                            ];
                                          }
                                        },
                                        onIsSelectedChange:
                                          generateStateOnChangeProp($state, [
                                            "dropdownItem18",
                                            __plasmic_idx_0,
                                            "isSelected"
                                          ]),
                                        selectedPosition: "right"
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "isSelected",
                                            plasmicStateName:
                                              "dropdownItem18[].isSelected"
                                          }
                                        ],

                                        [__plasmic_idx_0],
                                        undefined ?? {},
                                        child$Props
                                      );
                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "dropdownItem18[].isSelected",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) =>
                                              (() => {
                                                try {
                                                  return (
                                                    source.uuid ===
                                                    $state.leadSourceInput.value
                                                      ?.value
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return false;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                          }
                                        ],

                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <DropdownItem
                                          data-plasmic-name={"dropdownItem18"}
                                          data-plasmic-override={
                                            overrides.dropdownItem18
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })();
                                  })}
                                  onChange={generateStateOnChangeProp($state, [
                                    "leadSourceInput",
                                    "value"
                                  ])}
                                  onSearch={async (...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "leadSourceInput",
                                      "searchValue"
                                    ]).apply(null, eventArgs);
                                    (async value => {
                                      const $steps = {};
                                      $steps["setSearch"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "search",
                                                  "sources"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $state.leadSourceInput
                                                  .searchValue
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["setSearch"] != null &&
                                        typeof $steps["setSearch"] ===
                                          "object" &&
                                        typeof $steps["setSearch"].then ===
                                          "function"
                                      ) {
                                        $steps["setSearch"] = await $steps[
                                          "setSearch"
                                        ];
                                      }
                                    }).apply(null, eventArgs);
                                  }}
                                  placeholder={"Selecionar Fuente..."}
                                  ref={ref => {
                                    $refs["leadSourceInput"] = ref;
                                  }}
                                  searchValue={generateStateValueProp($state, [
                                    "leadSourceInput",
                                    "searchValue"
                                  ])}
                                  searchable={true}
                                  size={"middle"}
                                  value={generateStateValueProp($state, [
                                    "leadSourceInput",
                                    "value"
                                  ])}
                                  valueContent={
                                    <PlasmicImg__
                                      alt={""}
                                      className={classNames(sty.img__cw5ZA)}
                                      displayHeight={"auto"}
                                      displayMaxHeight={"none"}
                                      displayMaxWidth={"100%"}
                                      displayMinHeight={"0"}
                                      displayMinWidth={"0"}
                                      displayWidth={"auto"}
                                      height={"24"}
                                      loading={"lazy"}
                                      src={(() => {
                                        try {
                                          return $state.leadSourceInput.value
                                            .icon;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      width={"24"}
                                    />
                                  }
                                />
                              }
                              error={generateStateValueProp($state, [
                                "leadSource",
                                "error"
                              ])}
                              label={"Fuente"}
                              name={"source"}
                              onErrorChange={generateStateOnChangeProp($state, [
                                "leadSource",
                                "error"
                              ])}
                              ref={ref => {
                                $refs["leadSource"] = ref;
                              }}
                            />
                          </Stack__>
                        </Stack__>
                      }
                      loading={generateStateValueProp($state, [
                        "leadForm",
                        "loading"
                      ])}
                      onLoadingChange={generateStateOnChangeProp($state, [
                        "leadForm",
                        "loading"
                      ])}
                      onSubmit={async () => {
                        const $steps = {};
                        $steps["validateForm"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const type = $state.leadType.value;
                                    const name = $state.leadNameInput.value;
                                    const tradeName =
                                      $state.tradeNameInput.value;
                                    const email = $state.leadEmailInput.value;
                                    const cellphone =
                                      $state.leadCellphoneInput.value;
                                    const phone = $state.leadPhoneInput.value;
                                    let isValid = true;
                                    if (!name && type === "particular") {
                                      $refs.leadName.setFieldError(
                                        "Ingresa el nombre del prospecto"
                                      );
                                      isValid = false;
                                    }
                                    if (!tradeName && type === "enterprise") {
                                      $refs.tradeName.setFieldError(
                                        "Ingresa el nombre comercial del prospecto"
                                      );
                                      isValid = false;
                                    }
                                    if (email && !$$.validateEmail(email)) {
                                      $refs.leadEmail.setFieldError(
                                        "Ingresa un correo electrónico válido"
                                      );
                                      isValid = false;
                                    }
                                    if (
                                      cellphone &&
                                      !$$.validatePhone(cellphone)
                                    ) {
                                      $refs.leadCellphone.setFieldError(
                                        "Ingresa un celular válido"
                                      );
                                      isValid = false;
                                    }
                                    if (phone && !$$.validatePhone(phone)) {
                                      $refs.leadPhone.setFieldError(
                                        "Ingresa un teléfono válido"
                                      );
                                      isValid = false;
                                    }
                                    return isValid;
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["validateForm"] != null &&
                          typeof $steps["validateForm"] === "object" &&
                          typeof $steps["validateForm"].then === "function"
                        ) {
                          $steps["validateForm"] = await $steps["validateForm"];
                        }
                        $steps["postRequest"] =
                          $steps.validateForm && !$state.drawers.lead.data
                            ? (() => {
                                const actionArgs = {
                                  continueOnError: true,
                                  dataOp: {
                                    sourceId: "nuXvvBTSGXM93PqWnV14Lf",
                                    opId: "665e8a2d-caf4-4e20-bf13-aab1d231f287",
                                    userArgs: {
                                      body: [
                                        (() => {
                                          const type = $state.leadType.value;
                                          const name =
                                            $state.leadNameInput.value;
                                          const middleName =
                                            $state.leadMiddleNameInput.value;
                                          const lastName =
                                            $state.leadLastNameInput.value;
                                          const tradeName =
                                            $state.tradeNameInput.value;
                                          const email =
                                            $state.leadEmailInput.value;
                                          const cellphoneCode =
                                            $state.leadCellphoneCodeInput.value
                                              ?.value;
                                          const cellphoneNumber =
                                            $state.leadCellphoneInput.value;
                                          const phoneCode =
                                            $state.leadPhoneCodeInput.value
                                              ?.value;
                                          const phoneNumber =
                                            $state.leadPhoneInput.value;
                                          const street =
                                            $state.streetInput.value;
                                          const extNumber =
                                            $state.extInput.value;
                                          const intNumber =
                                            $state.intInput.value;
                                          const suburb =
                                            $state.suburbInput.value;
                                          const cp = $state.cpInput.value;
                                          const city = $state.cityInput.value;
                                          const unknownState =
                                            $state.unknownStateInput.value;
                                          const knowState =
                                            $state.knownStateInput.value?.value;
                                          const country =
                                            $state.countryInput.value?.value;
                                          const isKnownCountry =
                                            country === "Mexico" ||
                                            country === "Canada" ||
                                            country === "United States";
                                          const responsible =
                                            $state.leadResponsibleInput.value
                                              ?.value;
                                          const rating =
                                            $state.leadRateInput.value;
                                          const group =
                                            $state.leadGroupInput.value?.value;
                                          const source =
                                            $state.leadSourceInput.value?.value;
                                          return {
                                            ...(type === "particular" && {
                                              completeName: {
                                                name,
                                                middleName,
                                                lastName
                                              }
                                            }),
                                            ...(type === "enterprise" && {
                                              tradeName
                                            }),
                                            email,
                                            ...(cellphoneNumber && {
                                              cellphone: {
                                                code: cellphoneCode,
                                                number: cellphoneNumber
                                              }
                                            }),
                                            ...(phoneNumber && {
                                              phone: {
                                                code: phoneCode,
                                                number: phoneNumber
                                              }
                                            }),
                                            mainAddress: {
                                              street,
                                              extNumber,
                                              intNumber,
                                              suburb,
                                              cp,
                                              city,
                                              country,
                                              ...(isKnownCountry
                                                ? { state: knowState }
                                                : { state: unknownState })
                                            },
                                            responsible,
                                            rating,
                                            group,
                                            source
                                          };
                                        })()
                                      ],

                                      headers: [`Bearer ${$ctx.token}`]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: [
                                      "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                                    ],

                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["postRequest"] != null &&
                          typeof $steps["postRequest"] === "object" &&
                          typeof $steps["postRequest"].then === "function"
                        ) {
                          $steps["postRequest"] = await $steps["postRequest"];
                        }
                        $steps["handleResponse"] = $steps.postRequest
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    const isSuccess = $steps.postRequest.data;
                                    if (isSuccess) {
                                      $state.drawers.lead.opened = false;
                                      $$.showNotification(
                                        "Prospecto Creado Correctamente",
                                        { type: "success" }
                                      );
                                      return;
                                    }
                                    const errorKey =
                                      $steps.postRequest.details?.key;
                                    switch (errorKey) {
                                      case "lead.duplicated_email":
                                        $refs.leadEmail.setFieldError(
                                          "Ya hay un prospecto registrado con este correo"
                                        );
                                        break;
                                      case "lead.duplicated_cellphone":
                                        $refs.leadCellphone.setFieldError(
                                          "Ya hay un prospecto registrado con este celular"
                                        );
                                        break;
                                      case "lead.duplicated_phone":
                                        $refs.leadPhone.setFieldError(
                                          "Ya hay un prospecto registrado con este teléfono"
                                        );
                                        break;
                                      default:
                                        $$.showNotification(
                                          "Sucedió un error desconocido",
                                          { type: "error" }
                                        );
                                        break;
                                    }
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["handleResponse"] != null &&
                          typeof $steps["handleResponse"] === "object" &&
                          typeof $steps["handleResponse"].then === "function"
                        ) {
                          $steps["handleResponse"] = await $steps[
                            "handleResponse"
                          ];
                        }
                      }}
                      ref={ref => {
                        $refs["leadForm"] = ref;
                      }}
                    />
                  }
                  extra={
                    <Button
                      block={false}
                      className={classNames(
                        "__wab_instance",
                        sty.button__q8SPi
                      )}
                      danger={false}
                      disabled={false}
                      ghost={false}
                      icon={
                        <Icon
                          className={classNames(
                            "__wab_instance",
                            sty.icon__qAfoT
                          )}
                          icon={"FloppyDiskBack"}
                          size={16}
                          variant={"regular"}
                        />
                      }
                      iconPosition={"start"}
                      isSubmit={false}
                      label={(() => {
                        try {
                          return (() => {
                            return $state.drawers.lead.data?.uuid
                              ? "Guardar Cambios"
                              : "Guardar Prospecto";
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      loading={(() => {
                        try {
                          return (() => {
                            return $state.leadForm.loading;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return false;
                          }
                          throw e;
                        }
                      })()}
                      onClick={async () => {
                        const $steps = {};
                        $steps["submitForm"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $refs.leadForm.submitForm();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["submitForm"] != null &&
                          typeof $steps["submitForm"] === "object" &&
                          typeof $steps["submitForm"].then === "function"
                        ) {
                          $steps["submitForm"] = await $steps["submitForm"];
                        }
                      }}
                      size={"medium"}
                      target={"_self"}
                      type={"primary"}
                    />
                  }
                  mask={true}
                  maskClosable={true}
                  onClose={async () => {
                    const $steps = {};
                    $steps["closeModal"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawers", "lead", "opened"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["closeModal"] != null &&
                      typeof $steps["closeModal"] === "object" &&
                      typeof $steps["closeModal"].then === "function"
                    ) {
                      $steps["closeModal"] = await $steps["closeModal"];
                    }
                    $steps["cleanData"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["drawers", "lead", "data"]
                            },
                            operation: 1
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, undefined);
                            return undefined;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["cleanData"] != null &&
                      typeof $steps["cleanData"] === "object" &&
                      typeof $steps["cleanData"].then === "function"
                    ) {
                      $steps["cleanData"] = await $steps["cleanData"];
                    }
                  }}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "leadDrawer",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["leadDrawer", "open"])}
                  placement={"right"}
                  title={(() => {
                    try {
                      return (() => {
                        const isUpdated = $state.drawers.lead.data;
                        if (isUpdated) return "Editar Prospecto";
                        return "Nuevo Prospecto";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  width={"800px"}
                />

                <Confirmation
                  data-plasmic-name={"deleteConfirmation"}
                  data-plasmic-override={overrides.deleteConfirmation}
                  className={classNames(
                    "__wab_instance",
                    sty.deleteConfirmation
                  )}
                  description={
                    "Si eliminas al prospecto se perder\u00e1 toda su informaci\u00f3n y los estad\u00edsticos generales se ver\u00e1n afectados. Procede solo si est\u00e1s seguro de querer realizar esta acci\u00f3n."
                  }
                  loading={(() => {
                    try {
                      return (() => {
                        return $state.loading.delete;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  okText={"Si, Eliminar"}
                  onCancel={async () => {
                    const $steps = {};
                    $steps["closeDialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: [
                                "confirmations",
                                "delete",
                                "opened"
                              ]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["closeDialog"] != null &&
                      typeof $steps["closeDialog"] === "object" &&
                      typeof $steps["closeDialog"].then === "function"
                    ) {
                      $steps["closeDialog"] = await $steps["closeDialog"];
                    }
                  }}
                  onOk={async () => {
                    const $steps = {};
                    $steps["setLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading", "delete"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["setLoading"] != null &&
                      typeof $steps["setLoading"] === "object" &&
                      typeof $steps["setLoading"].then === "function"
                    ) {
                      $steps["setLoading"] = await $steps["setLoading"];
                    }
                    $steps["deleteRequest"] = true
                      ? (() => {
                          const actionArgs = {
                            continueOnError: false,
                            dataOp: {
                              sourceId: "nuXvvBTSGXM93PqWnV14Lf",
                              opId: "738c7465-e4db-4a3d-a402-4d1e277fd559",
                              userArgs: {
                                path: [
                                  `contacts/leads/${$state.confirmations.delete.data.uuid}`
                                ],

                                headers: [`Bearer ${$ctx.token}`]
                              },
                              cacheKey: null,
                              invalidatedKeys: [
                                "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                              ],

                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["deleteRequest"] != null &&
                      typeof $steps["deleteRequest"] === "object" &&
                      typeof $steps["deleteRequest"].then === "function"
                    ) {
                      $steps["deleteRequest"] = await $steps["deleteRequest"];
                    }
                    $steps["handleResponse"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                $state.confirmations.delete.opened = false;
                                $state.loading.delete = false;
                                return $$.showNotification(
                                  "Prospecto Eliminado Correctamente",
                                  { type: "success" }
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["handleResponse"] != null &&
                      typeof $steps["handleResponse"] === "object" &&
                      typeof $steps["handleResponse"].then === "function"
                    ) {
                      $steps["handleResponse"] = await $steps["handleResponse"];
                    }
                  }}
                  open={(() => {
                    try {
                      return (() => {
                        return $state.confirmations.delete.opened;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  title={"Eliminar Prospecto"}
                  type={"danger"}
                />

                <Confirmation
                  data-plasmic-name={"toggleConfirmation"}
                  data-plasmic-override={overrides.toggleConfirmation}
                  className={classNames(
                    "__wab_instance",
                    sty.toggleConfirmation
                  )}
                  description={(() => {
                    try {
                      return (() => {
                        const { isActive } =
                          $state.confirmations.toggle.data ?? {};
                        if (isActive)
                          return "Si desactivas al prospecto se guardará toda su información pero no se se podrá interactuar con él (cotizaciones, notas, etc...). Procede solo si estás seguro de querer realizar esta acción.";
                        return "Si activas al prospecto se podrá interactuar con él nuevamente y toda su información quedará igual.";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  loading={(() => {
                    try {
                      return (() => {
                        return $state.loading.toggle;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  okText={(() => {
                    try {
                      return (() => {
                        const { isActive } =
                          $state.confirmations.toggle.data ?? {};
                        return isActive ? "Si, Desactivar" : "Si, Activar";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  onCancel={async () => {
                    const $steps = {};
                    $steps["closeDialog"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: [
                                "confirmations",
                                "toggle",
                                "opened"
                              ]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["closeDialog"] != null &&
                      typeof $steps["closeDialog"] === "object" &&
                      typeof $steps["closeDialog"].then === "function"
                    ) {
                      $steps["closeDialog"] = await $steps["closeDialog"];
                    }
                  }}
                  onOk={async () => {
                    const $steps = {};
                    $steps["setLoading"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["loading", "toggle"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;
                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["setLoading"] != null &&
                      typeof $steps["setLoading"] === "object" &&
                      typeof $steps["setLoading"].then === "function"
                    ) {
                      $steps["setLoading"] = await $steps["setLoading"];
                    }
                    $steps["deleteRequest"] = true
                      ? (() => {
                          const actionArgs = {
                            continueOnError: false,
                            dataOp: {
                              sourceId: "nuXvvBTSGXM93PqWnV14Lf",
                              opId: "01ac5960-a6c9-4991-ab9f-7d2e18f1c22c",
                              userArgs: {
                                path: [
                                  `contacts/leads/${$state.confirmations.toggle.data.uuid}/toggle`
                                ],

                                headers: [`Bearer ${$ctx.token}`]
                              },
                              cacheKey: null,
                              invalidatedKeys: [
                                "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                              ],

                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["deleteRequest"] != null &&
                      typeof $steps["deleteRequest"] === "object" &&
                      typeof $steps["deleteRequest"].then === "function"
                    ) {
                      $steps["deleteRequest"] = await $steps["deleteRequest"];
                    }
                    $steps["handleResponse"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                const { isActive } =
                                  $state.confirmations.toggle.data ?? {};
                                $state.confirmations.toggle.opened = false;
                                $state.loading.toggle = false;
                                return $$.showNotification(
                                  isActive
                                    ? "Prospecto Desactivado Correctamente"
                                    : "Prospecto Activado Correctamente",
                                  { type: "success" }
                                );
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["handleResponse"] != null &&
                      typeof $steps["handleResponse"] === "object" &&
                      typeof $steps["handleResponse"].then === "function"
                    ) {
                      $steps["handleResponse"] = await $steps["handleResponse"];
                    }
                  }}
                  open={(() => {
                    try {
                      return (() => {
                        return $state.confirmations.toggle.opened;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  title={(() => {
                    try {
                      return (() => {
                        const { isActive } =
                          $state.confirmations.toggle.data ?? {};
                        if (isActive) return "Desactivar Prospecto";
                        return "Activar Prospecto";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  type={"danger"}
                />
              </div>
            }
            pageTitle={"Prospectos"}
            preContent={
              <div
                data-plasmic-name={"complementaryContent"}
                data-plasmic-override={overrides.complementaryContent}
                className={classNames(projectcss.all, sty.complementaryContent)}
              >
                <Select
                  data-plasmic-name={"select"}
                  data-plasmic-override={overrides.select}
                  className={classNames("__wab_instance", sty.select)}
                  isEmpty={false}
                  loading={false}
                  menuContent={
                    <React.Fragment>
                      <DropdownItem
                        data-plasmic-name={"dropdownItem13"}
                        data-plasmic-override={overrides.dropdownItem13}
                        className={classNames(
                          "__wab_instance",
                          sty.dropdownItem13
                        )}
                        disabled={false}
                        isSelected={generateStateValueProp($state, [
                          "dropdownItem13",
                          "isSelected"
                        ])}
                        label={"Todos"}
                        leftSection={null}
                        onClick={async () => {
                          const $steps = {};
                          $steps["updateSubSection"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["subSection"]
                                  },
                                  operation: 0,
                                  value: "all"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSubSection"] != null &&
                            typeof $steps["updateSubSection"] === "object" &&
                            typeof $steps["updateSubSection"].then ===
                              "function"
                          ) {
                            $steps["updateSubSection"] = await $steps[
                              "updateSubSection"
                            ];
                          }
                          $steps["refreshData"] = true
                            ? (() => {
                                const actionArgs = {
                                  queryInvalidation: [
                                    "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                                  ]
                                };
                                return (async ({ queryInvalidation }) => {
                                  if (!queryInvalidation) {
                                    return;
                                  }
                                  await plasmicInvalidate(queryInvalidation);
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["refreshData"] != null &&
                            typeof $steps["refreshData"] === "object" &&
                            typeof $steps["refreshData"].then === "function"
                          ) {
                            $steps["refreshData"] = await $steps["refreshData"];
                          }
                        }}
                        onIsSelectedChange={generateStateOnChangeProp($state, [
                          "dropdownItem13",
                          "isSelected"
                        ])}
                        rightSection={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lillC
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const { active, inactive } =
                                      $queries.findManyLeads.data.response
                                        .stats ?? {};
                                    return active + inactive;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "0";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        selectedPosition={"left"}
                      />

                      <Divider
                        className={classNames(
                          "__wab_instance",
                          sty.divider__hR4Ko
                        )}
                        dashed={false}
                        margin={"0px"}
                        orientation={"left"}
                        orientationMargin={"0px"}
                        type={"horizontal"}
                      />

                      <DropdownItem
                        data-plasmic-name={"dropdownItem14"}
                        data-plasmic-override={overrides.dropdownItem14}
                        className={classNames(
                          "__wab_instance",
                          sty.dropdownItem14
                        )}
                        disabled={false}
                        isSelected={generateStateValueProp($state, [
                          "dropdownItem14",
                          "isSelected"
                        ])}
                        label={"Activos"}
                        leftSection={null}
                        onClick={async () => {
                          const $steps = {};
                          $steps["updateSubSection"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["subSection"]
                                  },
                                  operation: 0,
                                  value: "active"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSubSection"] != null &&
                            typeof $steps["updateSubSection"] === "object" &&
                            typeof $steps["updateSubSection"].then ===
                              "function"
                          ) {
                            $steps["updateSubSection"] = await $steps[
                              "updateSubSection"
                            ];
                          }
                          $steps["refreshData"] = true
                            ? (() => {
                                const actionArgs = {
                                  queryInvalidation: [
                                    "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                                  ]
                                };
                                return (async ({ queryInvalidation }) => {
                                  if (!queryInvalidation) {
                                    return;
                                  }
                                  await plasmicInvalidate(queryInvalidation);
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["refreshData"] != null &&
                            typeof $steps["refreshData"] === "object" &&
                            typeof $steps["refreshData"].then === "function"
                          ) {
                            $steps["refreshData"] = await $steps["refreshData"];
                          }
                        }}
                        onIsSelectedChange={generateStateOnChangeProp($state, [
                          "dropdownItem14",
                          "isSelected"
                        ])}
                        rightSection={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1XlDy
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const { active } =
                                      $queries.findManyLeads.data.response
                                        .stats ?? {};
                                    return active;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "0";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        selectedPosition={"left"}
                      />

                      <DropdownItem
                        data-plasmic-name={"dropdownItem19"}
                        data-plasmic-override={overrides.dropdownItem19}
                        className={classNames(
                          "__wab_instance",
                          sty.dropdownItem19
                        )}
                        disabled={false}
                        isSelected={generateStateValueProp($state, [
                          "dropdownItem19",
                          "isSelected"
                        ])}
                        label={"Inactivos"}
                        leftSection={null}
                        onClick={async () => {
                          const $steps = {};
                          $steps["updateSubSection"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["subSection"]
                                  },
                                  operation: 0,
                                  value: "inactive"
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSubSection"] != null &&
                            typeof $steps["updateSubSection"] === "object" &&
                            typeof $steps["updateSubSection"].then ===
                              "function"
                          ) {
                            $steps["updateSubSection"] = await $steps[
                              "updateSubSection"
                            ];
                          }
                          $steps["refreshData"] = true
                            ? (() => {
                                const actionArgs = {
                                  queryInvalidation: [
                                    "86914df1-eeef-4f35-aa3f-9f2db713ea21"
                                  ]
                                };
                                return (async ({ queryInvalidation }) => {
                                  if (!queryInvalidation) {
                                    return;
                                  }
                                  await plasmicInvalidate(queryInvalidation);
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["refreshData"] != null &&
                            typeof $steps["refreshData"] === "object" &&
                            typeof $steps["refreshData"].then === "function"
                          ) {
                            $steps["refreshData"] = await $steps["refreshData"];
                          }
                        }}
                        onIsSelectedChange={generateStateOnChangeProp($state, [
                          "dropdownItem19",
                          "isSelected"
                        ])}
                        rightSection={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vkSKa
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    const { inactive } =
                                      $queries.findManyLeads.data.response
                                        .stats ?? {};
                                    return inactive;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "0";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        selectedPosition={"left"}
                      />
                    </React.Fragment>
                  }
                  onChange={generateStateOnChangeProp($state, [
                    "select",
                    "value"
                  ])}
                  onSearch={generateStateOnChangeProp($state, [
                    "select",
                    "searchValue"
                  ])}
                  placeholder={"Seleccionar..."}
                  ref={ref => {
                    $refs["select"] = ref;
                  }}
                  searchValue={generateStateValueProp($state, [
                    "select",
                    "searchValue"
                  ])}
                  searchable={false}
                  size={"small"}
                  value={generateStateValueProp($state, ["select", "value"])}
                />
              </div>
            }
            sufixContent={
              <div className={classNames(projectcss.all, sty.freeBox__ssqK0)}>
                <HeaderCounter
                  data-plasmic-name={"headerCounter"}
                  data-plasmic-override={overrides.headerCounter}
                  className={classNames("__wab_instance", sty.headerCounter)}
                  loading={(() => {
                    try {
                      return (() => {
                        return $queries.findManyLeads.isLoading;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return false;
                      }
                      throw e;
                    }
                  })()}
                  value={(() => {
                    try {
                      return (() => {
                        const subSection = $state.subSection;
                        const { active, inactive } =
                          $queries.findManyLeads.data.response.stats;
                        if (subSection === "active") return active;
                        if (subSection === "inactive") return inactive;
                        if (subSection === "all") return active + inactive;
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 0;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            }
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  mainSection: [
    "mainSection",
    "appShell",
    "actionBar",
    "searchInput",
    "rightSection",
    "secondaryActions",
    "emptyData",
    "stats",
    "leadsTable",
    "name",
    "avatarText",
    "phone",
    "textIcon2",
    "phone2",
    "textIcon3",
    "textIcon4",
    "responsible",
    "responsibleDropdown",
    "userSelector",
    "dropdownItem6",
    "rating",
    "rate",
    "group",
    "groupDropdown",
    "groupSelector",
    "dropdownItem7",
    "group2",
    "sourceDropdown",
    "sourceSelector",
    "dropdownItem8",
    "potential",
    "container",
    "progress",
    "value",
    "tags",
    "tagDropdown",
    "tagSelector",
    "dropdownItem9",
    "actions",
    "dropdown2",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4",
    "dropdownItem5",
    "leadDrawer",
    "leadForm",
    "bodyContainer",
    "leftColumn",
    "leadType",
    "tradeName",
    "tradeNameInput",
    "leadName",
    "leadNameInput",
    "row",
    "leadMiddleName",
    "leadMiddleNameInput",
    "leadLastName",
    "leadLastNameInput",
    "leadEmail",
    "leadEmailInput",
    "leadCellphone",
    "leadCellphoneCodeInput",
    "dropdownItem11",
    "leadCellphoneInput",
    "leadPhone",
    "leadPhoneCodeInput",
    "dropdownItem10",
    "leadPhoneInput",
    "leadWebsite",
    "leadWebsiteInput",
    "leadAddress",
    "streetInput",
    "extInput",
    "intInput",
    "suburbInput",
    "cpInput",
    "cityInput",
    "unknownStateInput",
    "knownStateInput",
    "dropdownItem12",
    "countryInput",
    "dropdownItem15",
    "rightColumn",
    "leadRate",
    "leadRateInput",
    "leadResponsible",
    "leadResponsibleInput",
    "dropdownItem16",
    "leadGroup",
    "leadGroupInput",
    "dropdownItem17",
    "leadSource",
    "leadSourceInput",
    "dropdownItem18",
    "deleteConfirmation",
    "toggleConfirmation",
    "complementaryContent",
    "select",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem19",
    "headerCounter"
  ],

  appShell: [
    "appShell",
    "actionBar",
    "searchInput",
    "rightSection",
    "secondaryActions",
    "emptyData",
    "stats",
    "leadsTable",
    "name",
    "avatarText",
    "phone",
    "textIcon2",
    "phone2",
    "textIcon3",
    "textIcon4",
    "responsible",
    "responsibleDropdown",
    "userSelector",
    "dropdownItem6",
    "rating",
    "rate",
    "group",
    "groupDropdown",
    "groupSelector",
    "dropdownItem7",
    "group2",
    "sourceDropdown",
    "sourceSelector",
    "dropdownItem8",
    "potential",
    "container",
    "progress",
    "value",
    "tags",
    "tagDropdown",
    "tagSelector",
    "dropdownItem9",
    "actions",
    "dropdown2",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4",
    "dropdownItem5",
    "leadDrawer",
    "leadForm",
    "bodyContainer",
    "leftColumn",
    "leadType",
    "tradeName",
    "tradeNameInput",
    "leadName",
    "leadNameInput",
    "row",
    "leadMiddleName",
    "leadMiddleNameInput",
    "leadLastName",
    "leadLastNameInput",
    "leadEmail",
    "leadEmailInput",
    "leadCellphone",
    "leadCellphoneCodeInput",
    "dropdownItem11",
    "leadCellphoneInput",
    "leadPhone",
    "leadPhoneCodeInput",
    "dropdownItem10",
    "leadPhoneInput",
    "leadWebsite",
    "leadWebsiteInput",
    "leadAddress",
    "streetInput",
    "extInput",
    "intInput",
    "suburbInput",
    "cpInput",
    "cityInput",
    "unknownStateInput",
    "knownStateInput",
    "dropdownItem12",
    "countryInput",
    "dropdownItem15",
    "rightColumn",
    "leadRate",
    "leadRateInput",
    "leadResponsible",
    "leadResponsibleInput",
    "dropdownItem16",
    "leadGroup",
    "leadGroupInput",
    "dropdownItem17",
    "leadSource",
    "leadSourceInput",
    "dropdownItem18",
    "deleteConfirmation",
    "toggleConfirmation",
    "complementaryContent",
    "select",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem19",
    "headerCounter"
  ],

  actionBar: ["actionBar", "searchInput", "rightSection", "secondaryActions"],
  searchInput: ["searchInput"],
  rightSection: ["rightSection", "secondaryActions"],
  secondaryActions: ["secondaryActions"],
  emptyData: ["emptyData"],
  stats: ["stats"],
  leadsTable: [
    "leadsTable",
    "name",
    "avatarText",
    "phone",
    "textIcon2",
    "phone2",
    "textIcon3",
    "textIcon4",
    "responsible",
    "responsibleDropdown",
    "userSelector",
    "dropdownItem6",
    "rating",
    "rate",
    "group",
    "groupDropdown",
    "groupSelector",
    "dropdownItem7",
    "group2",
    "sourceDropdown",
    "sourceSelector",
    "dropdownItem8",
    "potential",
    "container",
    "progress",
    "value",
    "tags",
    "tagDropdown",
    "tagSelector",
    "dropdownItem9",
    "actions",
    "dropdown2",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4",
    "dropdownItem5"
  ],

  name: ["name", "avatarText"],
  avatarText: ["avatarText"],
  phone: ["phone", "textIcon2"],
  textIcon2: ["textIcon2"],
  phone2: ["phone2", "textIcon3", "textIcon4"],
  textIcon3: ["textIcon3"],
  textIcon4: ["textIcon4"],
  responsible: [
    "responsible",
    "responsibleDropdown",
    "userSelector",
    "dropdownItem6"
  ],

  responsibleDropdown: ["responsibleDropdown", "userSelector", "dropdownItem6"],
  userSelector: ["userSelector"],
  dropdownItem6: ["dropdownItem6"],
  rating: ["rating", "rate"],
  rate: ["rate"],
  group: ["group", "groupDropdown", "groupSelector", "dropdownItem7"],
  groupDropdown: ["groupDropdown", "groupSelector", "dropdownItem7"],
  groupSelector: ["groupSelector"],
  dropdownItem7: ["dropdownItem7"],
  group2: ["group2", "sourceDropdown", "sourceSelector", "dropdownItem8"],
  sourceDropdown: ["sourceDropdown", "sourceSelector", "dropdownItem8"],
  sourceSelector: ["sourceSelector"],
  dropdownItem8: ["dropdownItem8"],
  potential: ["potential", "container", "progress"],
  container: ["container", "progress"],
  progress: ["progress"],
  value: ["value"],
  tags: ["tags", "tagDropdown", "tagSelector", "dropdownItem9"],
  tagDropdown: ["tagDropdown", "tagSelector", "dropdownItem9"],
  tagSelector: ["tagSelector"],
  dropdownItem9: ["dropdownItem9"],
  actions: [
    "actions",
    "dropdown2",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4",
    "dropdownItem5"
  ],

  dropdown2: [
    "dropdown2",
    "dropdownItem",
    "dropdownItem2",
    "dropdownItem3",
    "dropdownItem4",
    "dropdownItem5"
  ],

  dropdownItem: ["dropdownItem"],
  dropdownItem2: ["dropdownItem2"],
  dropdownItem3: ["dropdownItem3"],
  dropdownItem4: ["dropdownItem4"],
  dropdownItem5: ["dropdownItem5"],
  leadDrawer: [
    "leadDrawer",
    "leadForm",
    "bodyContainer",
    "leftColumn",
    "leadType",
    "tradeName",
    "tradeNameInput",
    "leadName",
    "leadNameInput",
    "row",
    "leadMiddleName",
    "leadMiddleNameInput",
    "leadLastName",
    "leadLastNameInput",
    "leadEmail",
    "leadEmailInput",
    "leadCellphone",
    "leadCellphoneCodeInput",
    "dropdownItem11",
    "leadCellphoneInput",
    "leadPhone",
    "leadPhoneCodeInput",
    "dropdownItem10",
    "leadPhoneInput",
    "leadWebsite",
    "leadWebsiteInput",
    "leadAddress",
    "streetInput",
    "extInput",
    "intInput",
    "suburbInput",
    "cpInput",
    "cityInput",
    "unknownStateInput",
    "knownStateInput",
    "dropdownItem12",
    "countryInput",
    "dropdownItem15",
    "rightColumn",
    "leadRate",
    "leadRateInput",
    "leadResponsible",
    "leadResponsibleInput",
    "dropdownItem16",
    "leadGroup",
    "leadGroupInput",
    "dropdownItem17",
    "leadSource",
    "leadSourceInput",
    "dropdownItem18"
  ],

  leadForm: [
    "leadForm",
    "bodyContainer",
    "leftColumn",
    "leadType",
    "tradeName",
    "tradeNameInput",
    "leadName",
    "leadNameInput",
    "row",
    "leadMiddleName",
    "leadMiddleNameInput",
    "leadLastName",
    "leadLastNameInput",
    "leadEmail",
    "leadEmailInput",
    "leadCellphone",
    "leadCellphoneCodeInput",
    "dropdownItem11",
    "leadCellphoneInput",
    "leadPhone",
    "leadPhoneCodeInput",
    "dropdownItem10",
    "leadPhoneInput",
    "leadWebsite",
    "leadWebsiteInput",
    "leadAddress",
    "streetInput",
    "extInput",
    "intInput",
    "suburbInput",
    "cpInput",
    "cityInput",
    "unknownStateInput",
    "knownStateInput",
    "dropdownItem12",
    "countryInput",
    "dropdownItem15",
    "rightColumn",
    "leadRate",
    "leadRateInput",
    "leadResponsible",
    "leadResponsibleInput",
    "dropdownItem16",
    "leadGroup",
    "leadGroupInput",
    "dropdownItem17",
    "leadSource",
    "leadSourceInput",
    "dropdownItem18"
  ],

  bodyContainer: [
    "bodyContainer",
    "leftColumn",
    "leadType",
    "tradeName",
    "tradeNameInput",
    "leadName",
    "leadNameInput",
    "row",
    "leadMiddleName",
    "leadMiddleNameInput",
    "leadLastName",
    "leadLastNameInput",
    "leadEmail",
    "leadEmailInput",
    "leadCellphone",
    "leadCellphoneCodeInput",
    "dropdownItem11",
    "leadCellphoneInput",
    "leadPhone",
    "leadPhoneCodeInput",
    "dropdownItem10",
    "leadPhoneInput",
    "leadWebsite",
    "leadWebsiteInput",
    "leadAddress",
    "streetInput",
    "extInput",
    "intInput",
    "suburbInput",
    "cpInput",
    "cityInput",
    "unknownStateInput",
    "knownStateInput",
    "dropdownItem12",
    "countryInput",
    "dropdownItem15",
    "rightColumn",
    "leadRate",
    "leadRateInput",
    "leadResponsible",
    "leadResponsibleInput",
    "dropdownItem16",
    "leadGroup",
    "leadGroupInput",
    "dropdownItem17",
    "leadSource",
    "leadSourceInput",
    "dropdownItem18"
  ],

  leftColumn: [
    "leftColumn",
    "leadType",
    "tradeName",
    "tradeNameInput",
    "leadName",
    "leadNameInput",
    "row",
    "leadMiddleName",
    "leadMiddleNameInput",
    "leadLastName",
    "leadLastNameInput",
    "leadEmail",
    "leadEmailInput",
    "leadCellphone",
    "leadCellphoneCodeInput",
    "dropdownItem11",
    "leadCellphoneInput",
    "leadPhone",
    "leadPhoneCodeInput",
    "dropdownItem10",
    "leadPhoneInput",
    "leadWebsite",
    "leadWebsiteInput",
    "leadAddress",
    "streetInput",
    "extInput",
    "intInput",
    "suburbInput",
    "cpInput",
    "cityInput",
    "unknownStateInput",
    "knownStateInput",
    "dropdownItem12",
    "countryInput",
    "dropdownItem15"
  ],

  leadType: ["leadType"],
  tradeName: ["tradeName", "tradeNameInput"],
  tradeNameInput: ["tradeNameInput"],
  leadName: ["leadName", "leadNameInput"],
  leadNameInput: ["leadNameInput"],
  row: [
    "row",
    "leadMiddleName",
    "leadMiddleNameInput",
    "leadLastName",
    "leadLastNameInput"
  ],

  leadMiddleName: ["leadMiddleName", "leadMiddleNameInput"],
  leadMiddleNameInput: ["leadMiddleNameInput"],
  leadLastName: ["leadLastName", "leadLastNameInput"],
  leadLastNameInput: ["leadLastNameInput"],
  leadEmail: ["leadEmail", "leadEmailInput"],
  leadEmailInput: ["leadEmailInput"],
  leadCellphone: [
    "leadCellphone",
    "leadCellphoneCodeInput",
    "dropdownItem11",
    "leadCellphoneInput"
  ],

  leadCellphoneCodeInput: ["leadCellphoneCodeInput", "dropdownItem11"],
  dropdownItem11: ["dropdownItem11"],
  leadCellphoneInput: ["leadCellphoneInput"],
  leadPhone: [
    "leadPhone",
    "leadPhoneCodeInput",
    "dropdownItem10",
    "leadPhoneInput"
  ],

  leadPhoneCodeInput: ["leadPhoneCodeInput", "dropdownItem10"],
  dropdownItem10: ["dropdownItem10"],
  leadPhoneInput: ["leadPhoneInput"],
  leadWebsite: ["leadWebsite", "leadWebsiteInput"],
  leadWebsiteInput: ["leadWebsiteInput"],
  leadAddress: [
    "leadAddress",
    "streetInput",
    "extInput",
    "intInput",
    "suburbInput",
    "cpInput",
    "cityInput",
    "unknownStateInput",
    "knownStateInput",
    "dropdownItem12",
    "countryInput",
    "dropdownItem15"
  ],

  streetInput: ["streetInput"],
  extInput: ["extInput"],
  intInput: ["intInput"],
  suburbInput: ["suburbInput"],
  cpInput: ["cpInput"],
  cityInput: ["cityInput"],
  unknownStateInput: ["unknownStateInput"],
  knownStateInput: ["knownStateInput", "dropdownItem12"],
  dropdownItem12: ["dropdownItem12"],
  countryInput: ["countryInput", "dropdownItem15"],
  dropdownItem15: ["dropdownItem15"],
  rightColumn: [
    "rightColumn",
    "leadRate",
    "leadRateInput",
    "leadResponsible",
    "leadResponsibleInput",
    "dropdownItem16",
    "leadGroup",
    "leadGroupInput",
    "dropdownItem17",
    "leadSource",
    "leadSourceInput",
    "dropdownItem18"
  ],

  leadRate: ["leadRate", "leadRateInput"],
  leadRateInput: ["leadRateInput"],
  leadResponsible: [
    "leadResponsible",
    "leadResponsibleInput",
    "dropdownItem16"
  ],

  leadResponsibleInput: ["leadResponsibleInput", "dropdownItem16"],
  dropdownItem16: ["dropdownItem16"],
  leadGroup: ["leadGroup", "leadGroupInput", "dropdownItem17"],
  leadGroupInput: ["leadGroupInput", "dropdownItem17"],
  dropdownItem17: ["dropdownItem17"],
  leadSource: ["leadSource", "leadSourceInput", "dropdownItem18"],
  leadSourceInput: ["leadSourceInput", "dropdownItem18"],
  dropdownItem18: ["dropdownItem18"],
  deleteConfirmation: ["deleteConfirmation"],
  toggleConfirmation: ["toggleConfirmation"],
  complementaryContent: [
    "complementaryContent",
    "select",
    "dropdownItem13",
    "dropdownItem14",
    "dropdownItem19"
  ],

  select: ["select", "dropdownItem13", "dropdownItem14", "dropdownItem19"],
  dropdownItem13: ["dropdownItem13"],
  dropdownItem14: ["dropdownItem14"],
  dropdownItem19: ["dropdownItem19"],
  headerCounter: ["headerCounter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCrmProspectos__ArgProps,
          internalVariantPropNames: PlasmicCrmProspectos__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCrmProspectos__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainSection") {
    func.displayName = "PlasmicCrmProspectos";
  } else {
    func.displayName = `PlasmicCrmProspectos.${nodeName}`;
  }
  return func;
}

export const PlasmicCrmProspectos = Object.assign(
  // Top-level PlasmicCrmProspectos renders the root element
  makeNodeComponent("mainSection"),
  {
    // Helper components rendering sub-elements
    appShell: makeNodeComponent("appShell"),
    actionBar: makeNodeComponent("actionBar"),
    searchInput: makeNodeComponent("searchInput"),
    rightSection: makeNodeComponent("rightSection"),
    secondaryActions: makeNodeComponent("secondaryActions"),
    emptyData: makeNodeComponent("emptyData"),
    stats: makeNodeComponent("stats"),
    leadsTable: makeNodeComponent("leadsTable"),
    _name: makeNodeComponent("name"),
    avatarText: makeNodeComponent("avatarText"),
    phone: makeNodeComponent("phone"),
    textIcon2: makeNodeComponent("textIcon2"),
    phone2: makeNodeComponent("phone2"),
    textIcon3: makeNodeComponent("textIcon3"),
    textIcon4: makeNodeComponent("textIcon4"),
    responsible: makeNodeComponent("responsible"),
    responsibleDropdown: makeNodeComponent("responsibleDropdown"),
    userSelector: makeNodeComponent("userSelector"),
    dropdownItem6: makeNodeComponent("dropdownItem6"),
    rating: makeNodeComponent("rating"),
    rate: makeNodeComponent("rate"),
    group: makeNodeComponent("group"),
    groupDropdown: makeNodeComponent("groupDropdown"),
    groupSelector: makeNodeComponent("groupSelector"),
    dropdownItem7: makeNodeComponent("dropdownItem7"),
    group2: makeNodeComponent("group2"),
    sourceDropdown: makeNodeComponent("sourceDropdown"),
    sourceSelector: makeNodeComponent("sourceSelector"),
    dropdownItem8: makeNodeComponent("dropdownItem8"),
    potential: makeNodeComponent("potential"),
    container: makeNodeComponent("container"),
    progress: makeNodeComponent("progress"),
    value: makeNodeComponent("value"),
    tags: makeNodeComponent("tags"),
    tagDropdown: makeNodeComponent("tagDropdown"),
    tagSelector: makeNodeComponent("tagSelector"),
    dropdownItem9: makeNodeComponent("dropdownItem9"),
    actions: makeNodeComponent("actions"),
    dropdown2: makeNodeComponent("dropdown2"),
    dropdownItem: makeNodeComponent("dropdownItem"),
    dropdownItem2: makeNodeComponent("dropdownItem2"),
    dropdownItem3: makeNodeComponent("dropdownItem3"),
    dropdownItem4: makeNodeComponent("dropdownItem4"),
    dropdownItem5: makeNodeComponent("dropdownItem5"),
    leadDrawer: makeNodeComponent("leadDrawer"),
    leadForm: makeNodeComponent("leadForm"),
    bodyContainer: makeNodeComponent("bodyContainer"),
    leftColumn: makeNodeComponent("leftColumn"),
    leadType: makeNodeComponent("leadType"),
    tradeName: makeNodeComponent("tradeName"),
    tradeNameInput: makeNodeComponent("tradeNameInput"),
    leadName: makeNodeComponent("leadName"),
    leadNameInput: makeNodeComponent("leadNameInput"),
    row: makeNodeComponent("row"),
    leadMiddleName: makeNodeComponent("leadMiddleName"),
    leadMiddleNameInput: makeNodeComponent("leadMiddleNameInput"),
    leadLastName: makeNodeComponent("leadLastName"),
    leadLastNameInput: makeNodeComponent("leadLastNameInput"),
    leadEmail: makeNodeComponent("leadEmail"),
    leadEmailInput: makeNodeComponent("leadEmailInput"),
    leadCellphone: makeNodeComponent("leadCellphone"),
    leadCellphoneCodeInput: makeNodeComponent("leadCellphoneCodeInput"),
    dropdownItem11: makeNodeComponent("dropdownItem11"),
    leadCellphoneInput: makeNodeComponent("leadCellphoneInput"),
    leadPhone: makeNodeComponent("leadPhone"),
    leadPhoneCodeInput: makeNodeComponent("leadPhoneCodeInput"),
    dropdownItem10: makeNodeComponent("dropdownItem10"),
    leadPhoneInput: makeNodeComponent("leadPhoneInput"),
    leadWebsite: makeNodeComponent("leadWebsite"),
    leadWebsiteInput: makeNodeComponent("leadWebsiteInput"),
    leadAddress: makeNodeComponent("leadAddress"),
    streetInput: makeNodeComponent("streetInput"),
    extInput: makeNodeComponent("extInput"),
    intInput: makeNodeComponent("intInput"),
    suburbInput: makeNodeComponent("suburbInput"),
    cpInput: makeNodeComponent("cpInput"),
    cityInput: makeNodeComponent("cityInput"),
    unknownStateInput: makeNodeComponent("unknownStateInput"),
    knownStateInput: makeNodeComponent("knownStateInput"),
    dropdownItem12: makeNodeComponent("dropdownItem12"),
    countryInput: makeNodeComponent("countryInput"),
    dropdownItem15: makeNodeComponent("dropdownItem15"),
    rightColumn: makeNodeComponent("rightColumn"),
    leadRate: makeNodeComponent("leadRate"),
    leadRateInput: makeNodeComponent("leadRateInput"),
    leadResponsible: makeNodeComponent("leadResponsible"),
    leadResponsibleInput: makeNodeComponent("leadResponsibleInput"),
    dropdownItem16: makeNodeComponent("dropdownItem16"),
    leadGroup: makeNodeComponent("leadGroup"),
    leadGroupInput: makeNodeComponent("leadGroupInput"),
    dropdownItem17: makeNodeComponent("dropdownItem17"),
    leadSource: makeNodeComponent("leadSource"),
    leadSourceInput: makeNodeComponent("leadSourceInput"),
    dropdownItem18: makeNodeComponent("dropdownItem18"),
    deleteConfirmation: makeNodeComponent("deleteConfirmation"),
    toggleConfirmation: makeNodeComponent("toggleConfirmation"),
    complementaryContent: makeNodeComponent("complementaryContent"),
    select: makeNodeComponent("select"),
    dropdownItem13: makeNodeComponent("dropdownItem13"),
    dropdownItem14: makeNodeComponent("dropdownItem14"),
    dropdownItem19: makeNodeComponent("dropdownItem19"),
    headerCounter: makeNodeComponent("headerCounter"),
    // Metadata about props expected for PlasmicCrmProspectos
    internalVariantProps: PlasmicCrmProspectos__VariantProps,
    internalArgProps: PlasmicCrmProspectos__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Prospectos",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCrmProspectos;
/* prettier-ignore-end */
