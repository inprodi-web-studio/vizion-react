// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rhtpiygehaYPHyZZdWmjau
// Component: 0Re2ao-UpkEe
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Icon } from "inprodi-design-system"; // plasmic-import: pr11DOeHp2wt/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: rhtpiygehaYPHyZZdWmjau/projectcss
import sty from "./PlasmicIconSelector.module.css"; // plasmic-import: 0Re2ao-UpkEe/css

createPlasmicElementProxy;

export const PlasmicIconSelector__VariantProps = new Array();

export const PlasmicIconSelector__ArgProps = new Array(
  "labelAccesor",
  "colorAccesor",
  "iconAccesor",
  "emptyLabel",
  "value",
  "onValueChange"
);

const $$ = {};

function PlasmicIconSelector__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          labelAccesor: "name",
          colorAccesor: "color",
          iconAccesor: "icon",
          emptyLabel: "Sin Asignar"
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "value",
        type: "writable",
        variableType: "object",
        valueProp: "value",
        onChangeProp: "onValueChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"mainContainer"}
      data-plasmic-override={overrides.mainContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.mainContainer
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"groupSelector"}
        data-plasmic-override={overrides.groupSelector}
        hasGap={true}
        className={classNames(projectcss.all, sty.groupSelector)}
        style={(() => {
          try {
            return (() => {
              return {
                borderStyle: $props.value ? "solid" : "dashed",
                boxShadow: $props.value
                  ? "rgba(0, 0, 0, 0.04) 0px 1px 3px 0px, rgba(0, 0, 0, 0.01) 0px 1px 2px 0px"
                  : "none",
                borderColor: $props.value
                  ? $props.value[$props.colorAccesor]
                  : "var(--antd-colorBorder)"
              };
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <Icon
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames("__wab_instance", sty.icon)}
          color={(() => {
            try {
              return $props.value
                ? $props.value[$props.colorAccesor]
                : "#bfbfbf";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          icon={(() => {
            try {
              return $props.value ? "Smiley" : "CircleDashed";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          size={18}
          variant={"duotone"}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
          style={(() => {
            try {
              return (() => {
                return {
                  color: $props.value
                    ? $props.value[$props.colorAccesor]
                    : "#868e96"
                };
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.value
                  ? $props.value[$props.labelAccesor]
                  : $props.emptyLabel;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  mainContainer: ["mainContainer", "groupSelector", "icon", "text"],
  groupSelector: ["groupSelector", "icon", "text"],
  icon: ["icon"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIconSelector__ArgProps,
          internalVariantPropNames: PlasmicIconSelector__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIconSelector__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainContainer") {
    func.displayName = "PlasmicIconSelector";
  } else {
    func.displayName = `PlasmicIconSelector.${nodeName}`;
  }
  return func;
}

export const PlasmicIconSelector = Object.assign(
  // Top-level PlasmicIconSelector renders the root element
  makeNodeComponent("mainContainer"),
  {
    // Helper components rendering sub-elements
    groupSelector: makeNodeComponent("groupSelector"),
    icon: makeNodeComponent("icon"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicIconSelector
    internalVariantProps: PlasmicIconSelector__VariantProps,
    internalArgProps: PlasmicIconSelector__ArgProps
  }
);

export default PlasmicIconSelector;
/* prettier-ignore-end */
